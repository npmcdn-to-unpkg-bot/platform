// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Organisation : Allors.ObjectBase , Searchable, UniquelyIdentifiable, UserInterfaceable, SearchResult
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		public Organisation(Allors.IStrategy allors) : base(allors) {}

		public static Organisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Organisation) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public global::Allors.Extent<Person> Shareholders
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Shareholder);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Shareholder, value);
			}
		}

		virtual public void AddShareholder (Person value)
		{
			Strategy.AddCompositeRole(Meta.Shareholder, value);
		}

		virtual public void RemoveShareholder (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Shareholder,value);
		}

		virtual public bool ExistShareholders
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Shareholder);
			}
		}

		virtual public void RemoveShareholders()
		{
			Strategy.RemoveCompositeRoles(Meta.Shareholder);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<Person> Employees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Employee);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Employee, value);
			}
		}

		virtual public void AddEmployee (Person value)
		{
			Strategy.AddCompositeRole(Meta.Employee, value);
		}

		virtual public void RemoveEmployee (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Employee,value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Employee);
			}
		}

		virtual public void RemoveEmployees()
		{
			Strategy.RemoveCompositeRoles(Meta.Employee);
		}



		virtual public global::System.Boolean Incorporated 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.Incorporated);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Incorporated, value);
			}
		}

		virtual public bool ExistIncorporated{
			get
			{
				return Strategy.ExistUnitRole(Meta.Incorporated);
			}
		}

		virtual public void RemoveIncorporated()
		{
			Strategy.RemoveUnitRole(Meta.Incorporated);
		}



		virtual public global::System.Boolean IsSupplier 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.IsSupplier);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsSupplier, value);
			}
		}

		virtual public bool ExistIsSupplier{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsSupplier);
			}
		}

		virtual public void RemoveIsSupplier()
		{
			Strategy.RemoveUnitRole(Meta.IsSupplier);
		}



		virtual public global::System.DateTime IncorporationDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.IncorporationDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IncorporationDate, value);
			}
		}

		virtual public bool ExistIncorporationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.IncorporationDate);
			}
		}

		virtual public void RemoveIncorporationDate()
		{
			Strategy.RemoveUnitRole(Meta.IncorporationDate);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Address);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Address, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Address, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Address,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Address);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Address);
		}


		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner ,value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner);
		}


		virtual public Media Logo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Logo);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Logo ,value);
			}
		}

		virtual public bool ExistLogo
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Logo);
			}
		}

		virtual public void RemoveLogo()
		{
			Strategy.RemoveCompositeRole(Meta.Logo);
		}



		virtual public global::System.String Size 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Size);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Size, value);
			}
		}

		virtual public bool ExistSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.Size);
			}
		}

		virtual public void RemoveSize()
		{
			Strategy.RemoveUnitRole(Meta.Size);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyMany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}

	}

	public class OrganisationMeta
	{
		public static readonly OrganisationMeta Instance = new OrganisationMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Organisation;

		public global::Allors.Meta.RoleType Shareholder 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationShareholder;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationName;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationDescription;
			}
		} 
		public global::Allors.Meta.RoleType Employee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationEmployee;
			}
		} 
		public global::Allors.Meta.RoleType Incorporated 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationIncorporated;
			}
		} 
		public global::Allors.Meta.RoleType IsSupplier 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationIsSupplier;
			}
		} 
		public global::Allors.Meta.RoleType IncorporationDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationIncorporationDate;
			}
		} 
		public global::Allors.Meta.RoleType Address 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationAddress;
			}
		} 
		public global::Allors.Meta.RoleType Owner 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationOwner;
			}
		} 
		public global::Allors.Meta.RoleType Logo 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationLogo;
			}
		} 
		public global::Allors.Meta.RoleType Size 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationSize;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType BadUIsWhereCompanyOne 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUICompanyOne;
			}
		} 
		public global::Allors.Meta.AssociationType BadUIsWhereCompanyMany 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUICompanyMany;
			}
		} 

		public global::Allors.Meta.MethodType JustDoIt 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.OrganisationJustDoIt;
			}
		} 

	}
}