// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Dependee : Allors.ObjectBase 
	{
		public static readonly DependeeMeta Meta = DependeeMeta.Instance;

		public Dependee(Allors.IStrategy allors) : base(allors) {}

		public static Dependee Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Dependee) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public Subdependee Subdependee
		{ 
			get
			{
				return (Subdependee) Strategy.GetCompositeRole(Meta.Subdependee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Subdependee ,value);
			}
		}

		virtual public bool ExistSubdependee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Subdependee);
			}
		}

		virtual public void RemoveSubdependee()
		{
			Strategy.RemoveCompositeRole(Meta.Subdependee);
		}



		virtual public global::System.Int32 Subcounter 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Subcounter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter);
		}



		virtual public global::System.Int32 Counter 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Counter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Counter, value);
			}
		}

		virtual public bool ExistCounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Counter);
			}
		}

		virtual public void RemoveCounter()
		{
			Strategy.RemoveUnitRole(Meta.Counter);
		}



		virtual public global::System.Boolean DeleteDependent 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.DeleteDependent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeleteDependent, value);
			}
		}

		virtual public bool ExistDeleteDependent{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeleteDependent);
			}
		}

		virtual public void RemoveDeleteDependent()
		{
			Strategy.RemoveUnitRole(Meta.DeleteDependent);
		}



		virtual public Dependent DependentWhereDependee
		{ 
			get
			{
				return (Dependent) Strategy.GetCompositeAssociation(Meta.DependentWhereDependee);
			}
		} 

		virtual public bool ExistDependentWhereDependee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.DependentWhereDependee);
			}
		}

	}

	public class DependeeMeta
	{
		public static readonly DependeeMeta Instance = new DependeeMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Dependee;

		public global::Allors.Meta.RoleType Subdependee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependeeSubdependee;
			}
		} 
		public global::Allors.Meta.RoleType Subcounter 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependeeSubcounter;
			}
		} 
		public global::Allors.Meta.RoleType Counter 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependeeCounter;
			}
		} 
		public global::Allors.Meta.RoleType DeleteDependent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependeeDeleteDependent;
			}
		} 

		public global::Allors.Meta.AssociationType DependentWhereDependee 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.DependentDependee;
			}
		} 

	}
}