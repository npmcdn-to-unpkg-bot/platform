// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Image : Allors.ObjectBase 
	{
		public static readonly ImageMeta Meta = ImageMeta.Instance;

		public Image(Allors.IStrategy allors) : base(allors) {}

		public static Image Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Image) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (ImageBuilder)objectBuilder;

			this.OriginalFilename = builder.OriginalFilename;
		

			this.Original = builder.Original;



			this.Responsive = builder.Responsive;


		}



		virtual public Media Original
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Original);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Original ,value);
			}
		}

		virtual public bool ExistOriginal
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Original);
			}
		}

		virtual public void RemoveOriginal()
		{
			Strategy.RemoveCompositeRole(Meta.Original);
		}


		virtual public Media Responsive
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Responsive);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Responsive ,value);
			}
		}

		virtual public bool ExistResponsive
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Responsive);
			}
		}

		virtual public void RemoveResponsive()
		{
			Strategy.RemoveCompositeRole(Meta.Responsive);
		}



		virtual public global::System.String OriginalFilename 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.OriginalFilename);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OriginalFilename, value);
			}
		}

		virtual public bool ExistOriginalFilename{
			get
			{
				return Strategy.ExistUnitRole(Meta.OriginalFilename);
			}
		}

		virtual public void RemoveOriginalFilename()
		{
			Strategy.RemoveUnitRole(Meta.OriginalFilename);
		}

	}

	public class ImageMeta
	{
		public static readonly ImageMeta Instance = new ImageMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Image;

		public global::Allors.Meta.RoleType Original 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ImageOriginal;
			}
		} 
		public global::Allors.Meta.RoleType Responsive 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ImageResponsive;
			}
		} 
		public global::Allors.Meta.RoleType OriginalFilename 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ImageOriginalFilename;
			}
		} 

	}

	public partial class ImageBuilder : Allors.ObjectBuilder<Image> , global::System.IDisposable
	{		
		public ImageBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Media Original {get; set;}

				/// <exclude/>
				public ImageBuilder WithOriginal(Media value)
		        {
		            if(this.Original!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Original = value;
		            return this;
		        }		

				
				public Media Responsive {get; set;}

				/// <exclude/>
				public ImageBuilder WithResponsive(Media value)
		        {
		            if(this.Responsive!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Responsive = value;
		            return this;
		        }		

				
				public global::System.String OriginalFilename {get; set;}

				/// <exclude/>
				public ImageBuilder WithOriginalFilename(global::System.String value)
		        {
				    if(this.OriginalFilename!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OriginalFilename = value;
		            return this;
		        }	


	}

	public partial class Images : global::Allors.ObjectsBase<Image>
	{
		public static readonly ImageMeta Meta = ImageMeta.Instance;

		public Images(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}