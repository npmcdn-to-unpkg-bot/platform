// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SecurityToken : Allors.IObject , Deletable, Derivable
	{
		public static readonly SecurityTokenMeta Meta = SecurityTokenMeta.Instance;

		private readonly IStrategy strategy;

		public SecurityToken(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SecurityToken Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SecurityToken) allorsSession.Instantiate(allorsObjectId);		
		}

		public void OnBuild(IObjectBuilder objectBuilder)
		{
			var builder = (SecurityTokenBuilder)objectBuilder;
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Singleton> SingletonsWhereAdministratorSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereAdministratorSecurityToken);
			}
		}

		virtual public bool ExistSingletonsWhereAdministratorSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereAdministratorSecurityToken);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWhereDefaultSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereDefaultSecurityToken);
			}
		}

		virtual public bool ExistSingletonsWhereDefaultSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereDefaultSecurityToken);
			}
		}


		virtual public SecurityTokenOwner SecurityTokenOwnerWhereOwnerSecurityToken
		{ 
			get
			{
				return (SecurityTokenOwner) Strategy.GetCompositeAssociation(Meta.SecurityTokenOwnerWhereOwnerSecurityToken);
			}
		} 

		virtual public bool ExistSecurityTokenOwnerWhereOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SecurityTokenOwnerWhereOwnerSecurityToken);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereObject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereObject);
			}
		}

		virtual public bool ExistAccessControlsWhereObject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereObject);
			}
		}


		virtual public global::Allors.Extent<AccessControlledObject> AccessControlledObjectsWhereSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlledObjectsWhereSecurityToken);
			}
		}

		virtual public bool ExistAccessControlledObjectsWhereSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlledObjectsWhereSecurityToken);
			}
		}



		public DeletableDelete Delete()
		{ 
			return new SecurityTokenDelete(this);
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			return new SecurityTokenOnPostBuild(this);
		}

		public ObjectApplySecurityOnPostBuild ApplySecurityOnPostBuild()
		{ 
			return new SecurityTokenApplySecurityOnPostBuild(this);
		}

		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new SecurityTokenPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new SecurityTokenDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new SecurityTokenApplySecurityOnDerive(this);
		}
	}

	public class SecurityTokenMeta
	{
		public static readonly SecurityTokenMeta Instance = new SecurityTokenMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.SecurityToken;

		public global::Allors.Meta.AssociationType SingletonsWhereAdministratorSecurityToken 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SingletonAdministratorSecurityToken;
			}
		} 
		public global::Allors.Meta.AssociationType SingletonsWhereDefaultSecurityToken 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SingletonDefaultSecurityToken;
			}
		} 
		public global::Allors.Meta.AssociationType SecurityTokenOwnerWhereOwnerSecurityToken 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SecurityTokenOwnerOwnerSecurityToken;
			}
		} 
		public global::Allors.Meta.AssociationType AccessControlsWhereObject 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccessControlObject;
			}
		} 
		public global::Allors.Meta.AssociationType AccessControlledObjectsWhereSecurityToken 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.MethodType Delete 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DeletableDelete;
			}
		} 
		public global::Allors.Meta.MethodType OnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectApplySecurityOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 

	}

	public partial class SecurityTokenBuilder : Allors.ObjectBuilder<SecurityToken> , DeletableBuilder, DerivableBuilder, global::System.IDisposable
	{		
		public SecurityTokenBuilder(Allors.ISession session) : base(session)
	    {
	    }

	}

	public partial class SecurityTokens : global::Allors.ObjectsBase<SecurityToken>
	{
		public static readonly SecurityTokenMeta Meta = SecurityTokenMeta.Instance;

		public SecurityTokens(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}