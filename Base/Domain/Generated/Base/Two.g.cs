// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Two : Allors.ObjectBase , UserInterfaceable, Shared
	{
		public static readonly TwoMeta Meta = TwoMeta.Instance;

		public Two(Allors.IStrategy allors) : base(allors) {}

		public static Two Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Two) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (TwoBuilder)objectBuilder;

			this.DisplayName = builder.DisplayName;
		

			this.Shared = builder.Shared;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}



		virtual public Shared Shared
		{ 
			get
			{
				return (Shared) Strategy.GetCompositeRole(Meta.Shared);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Shared ,value);
			}
		}

		virtual public bool ExistShared
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Shared);
			}
		}

		virtual public void RemoveShared()
		{
			Strategy.RemoveCompositeRole(Meta.Shared);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<One> OnesWhereTwo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OnesWhereTwo);
			}
		}

		virtual public bool ExistOnesWhereTwo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OnesWhereTwo);
			}
		}


		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared);
			}
		}

	}

	public class TwoMeta
	{
		public static readonly TwoMeta Instance = new TwoMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Two;

		public global::Allors.Meta.RoleType Shared 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.TwoShared;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType OnesWhereTwo 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OneTwo;
			}
		} 
		public global::Allors.Meta.AssociationType TwosWhereShared 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.TwoShared;
			}
		} 

	}

	public partial class TwoBuilder : Allors.ObjectBuilder<Two> , UserInterfaceableBuilder, SharedBuilder, global::System.IDisposable
	{		
		public TwoBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Shared Shared {get; set;}

				/// <exclude/>
				public TwoBuilder WithShared(Shared value)
		        {
		            if(this.Shared!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Shared = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public TwoBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public TwoBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public TwoBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Twos : global::Allors.ObjectsBase<Two>
	{
		public static readonly TwoMeta Meta = TwoMeta.Instance;

		public Twos(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}