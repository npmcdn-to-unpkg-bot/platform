// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Dependent : Allors.ObjectBase , Derivable
	{
		public static readonly DependentMeta Meta = DependentMeta.Instance;

		public Dependent(Allors.IStrategy allors) : base(allors) {}

		public static Dependent Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Dependent) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (DependentBuilder)objectBuilder;
			

			if(builder.Counter.HasValue)
			{
				this.Counter = builder.Counter.Value;
			}			
					

			if(builder.Subcounter.HasValue)
			{
				this.Subcounter = builder.Subcounter.Value;
			}			
		

			this.Dependee = builder.Dependee;


		}



		virtual public Dependee Dependee
		{ 
			get
			{
				return (Dependee) Strategy.GetCompositeRole(Meta.Dependee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Dependee ,value);
			}
		}

		virtual public bool ExistDependee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Dependee);
			}
		}

		virtual public void RemoveDependee()
		{
			Strategy.RemoveCompositeRole(Meta.Dependee);
		}



		virtual public global::System.Int32? Counter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Counter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Counter, value);
			}
		}

		virtual public bool ExistCounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Counter);
			}
		}

		virtual public void RemoveCounter()
		{
			Strategy.RemoveUnitRole(Meta.Counter);
		}



		virtual public global::System.Int32? Subcounter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Subcounter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter);
		}



		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new DependentPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new DependentDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new DependentApplySecurityOnDerive(this);
		}
	}

	public class DependentMeta
	{
		public static readonly DependentMeta Instance = new DependentMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Dependent;

		public global::Allors.Meta.RoleType Dependee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependentDependee;
			}
		} 
		public global::Allors.Meta.RoleType Counter 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependentCounter;
			}
		} 
		public global::Allors.Meta.RoleType Subcounter 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DependentSubcounter;
			}
		} 

		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 

	}

	public partial class DependentBuilder : Allors.ObjectBuilder<Dependent> , DerivableBuilder, global::System.IDisposable
	{		
		public DependentBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Dependee Dependee {get; set;}

				/// <exclude/>
				public DependentBuilder WithDependee(Dependee value)
		        {
		            if(this.Dependee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Dependee = value;
		            return this;
		        }		

				
				public global::System.Int32? Counter {get; set;}

				/// <exclude/>
				public DependentBuilder WithCounter(global::System.Int32? value)
		        {
				    if(this.Counter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Counter = value;
		            return this;
		        }	

				public global::System.Int32? Subcounter {get; set;}

				/// <exclude/>
				public DependentBuilder WithSubcounter(global::System.Int32? value)
		        {
				    if(this.Subcounter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subcounter = value;
		            return this;
		        }	


	}

	public partial class Dependents : global::Allors.ObjectsBase<Dependent>
	{
		public static readonly DependentMeta Meta = DependentMeta.Instance;

		public Dependents(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}