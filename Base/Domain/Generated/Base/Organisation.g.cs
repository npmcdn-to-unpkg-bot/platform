// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Organisation : Allors.ObjectBase , Derivable, Searchable, UniquelyIdentifiable, UserInterfaceable, SearchResult
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		public Organisation(Allors.IStrategy allors) : base(allors) {}

		public static Organisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Organisation) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (OrganisationBuilder)objectBuilder;

			this.Name = builder.Name;
		

			this.Description = builder.Description;
					

			if(builder.Incorporated.HasValue)
			{
				this.Incorporated = builder.Incorporated.Value;
			}			
					

			if(builder.IsSupplier.HasValue)
			{
				this.IsSupplier = builder.IsSupplier.Value;
			}			
		

			this.Size = builder.Size;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		
			if(builder.Shareholders!=null)
			{
				this.Shareholders = builder.Shareholders.ToArray();
			}

			if(builder.Employees!=null)
			{
				this.Employees = builder.Employees.ToArray();
			}

			if(builder.Addresses!=null)
			{
				this.Addresses = builder.Addresses.ToArray();
			}


			this.Owner = builder.Owner;



			this.Logo = builder.Logo;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}



		virtual public global::Allors.Extent<Person> Shareholders
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Shareholder);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Shareholder, value);
			}
		}

		virtual public void AddShareholder (Person value)
		{
			Strategy.AddCompositeRole(Meta.Shareholder, value);
		}

		virtual public void RemoveShareholder (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Shareholder,value);
		}

		virtual public bool ExistShareholders
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Shareholder);
			}
		}

		virtual public void RemoveShareholders()
		{
			Strategy.RemoveCompositeRoles(Meta.Shareholder);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<Person> Employees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Employee);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Employee, value);
			}
		}

		virtual public void AddEmployee (Person value)
		{
			Strategy.AddCompositeRole(Meta.Employee, value);
		}

		virtual public void RemoveEmployee (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Employee,value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Employee);
			}
		}

		virtual public void RemoveEmployees()
		{
			Strategy.RemoveCompositeRoles(Meta.Employee);
		}



		virtual public global::System.Boolean? Incorporated 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.Incorporated);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Incorporated, value);
			}
		}

		virtual public bool ExistIncorporated{
			get
			{
				return Strategy.ExistUnitRole(Meta.Incorporated);
			}
		}

		virtual public void RemoveIncorporated()
		{
			Strategy.RemoveUnitRole(Meta.Incorporated);
		}



		virtual public global::System.Boolean? IsSupplier 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsSupplier);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsSupplier, value);
			}
		}

		virtual public bool ExistIsSupplier{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsSupplier);
			}
		}

		virtual public void RemoveIsSupplier()
		{
			Strategy.RemoveUnitRole(Meta.IsSupplier);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Address);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Address, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Address, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Address,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Address);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Address);
		}


		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner ,value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner);
		}


		virtual public Media Logo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Logo);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Logo ,value);
			}
		}

		virtual public bool ExistLogo
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Logo);
			}
		}

		virtual public void RemoveLogo()
		{
			Strategy.RemoveCompositeRole(Meta.Logo);
		}



		virtual public global::System.String Size 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Size);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Size, value);
			}
		}

		virtual public bool ExistSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.Size);
			}
		}

		virtual public void RemoveSize()
		{
			Strategy.RemoveUnitRole(Meta.Size);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyMany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}



		public OrganisationJustDoIt JustDoIt()
		{ 
			return new OrganisationJustDoIt(this);
		}

		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new OrganisationPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new OrganisationDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new OrganisationApplySecurityOnDerive(this);
		}
	}

	public class OrganisationMeta
	{
		public static readonly OrganisationMeta Instance = new OrganisationMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Organisation;

		public global::Allors.Meta.RoleType Shareholder 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationShareholder;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationName;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationDescription;
			}
		} 
		public global::Allors.Meta.RoleType Employee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationEmployee;
			}
		} 
		public global::Allors.Meta.RoleType Incorporated 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationIncorporated;
			}
		} 
		public global::Allors.Meta.RoleType IsSupplier 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationIsSupplier;
			}
		} 
		public global::Allors.Meta.RoleType Address 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationAddress;
			}
		} 
		public global::Allors.Meta.RoleType Owner 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationOwner;
			}
		} 
		public global::Allors.Meta.RoleType Logo 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationLogo;
			}
		} 
		public global::Allors.Meta.RoleType Size 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrganisationSize;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType BadUIsWhereCompanyOne 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUICompanyOne;
			}
		} 
		public global::Allors.Meta.AssociationType BadUIsWhereCompanyMany 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUICompanyMany;
			}
		} 

		public global::Allors.Meta.MethodType JustDoIt 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.OrganisationJustDoIt;
			}
		} 
		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 

	}

	public partial class OrganisationBuilder : Allors.ObjectBuilder<Organisation> , DerivableBuilder, SearchableBuilder, UniquelyIdentifiableBuilder, UserInterfaceableBuilder, SearchResultBuilder, global::System.IDisposable
	{		
		public OrganisationBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<Person> Shareholders {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithShareholder(Person value)
		        {
					if(this.Shareholders == null)
					{
						this.Shareholders = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Shareholders.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> Employees {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithEmployee(Person value)
		        {
					if(this.Employees == null)
					{
						this.Employees = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Employees.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? Incorporated {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIncorporated(global::System.Boolean? value)
		        {
				    if(this.Incorporated!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Incorporated = value;
		            return this;
		        }	

				public global::System.Boolean? IsSupplier {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIsSupplier(global::System.Boolean? value)
		        {
				    if(this.IsSupplier!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsSupplier = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public Media Logo {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLogo(Media value)
		        {
		            if(this.Logo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Logo = value;
		            return this;
		        }		

				
				public global::System.String Size {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSize(global::System.String value)
		        {
				    if(this.Size!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Size = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Organisations : global::Allors.ObjectsBase<Organisation>
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		public Organisations(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}