// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Organisation
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (OrganisationBuilder)objectBuilder;

			this.Name = builder.Name;
		

			this.Description = builder.Description;
					

			if(builder.Incorporated.HasValue)
			{
				this.Incorporated = builder.Incorporated.Value;
			}			
					

			if(builder.IsSupplier.HasValue)
			{
				this.IsSupplier = builder.IsSupplier.Value;
			}			
		

			this.Size = builder.Size;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		
			if(builder.Shareholders!=null)
			{
				this.Shareholders = builder.Shareholders.ToArray();
			}

			if(builder.Employees!=null)
			{
				this.Employees = builder.Employees.ToArray();
			}

			if(builder.Addresses!=null)
			{
				this.Addresses = builder.Addresses.ToArray();
			}


			this.Owner = builder.Owner;



			this.Logo = builder.Logo;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class OrganisationBuilder : Allors.ObjectBuilder<Organisation> , SearchableBuilder, UniquelyIdentifiableBuilder, UserInterfaceableBuilder, SearchResultBuilder, global::System.IDisposable
	{		
		public OrganisationBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<Person> Shareholders {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithShareholder(Person value)
		        {
					if(this.Shareholders == null)
					{
						this.Shareholders = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Shareholders.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> Employees {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithEmployee(Person value)
		        {
					if(this.Employees == null)
					{
						this.Employees = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Employees.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? Incorporated {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIncorporated(global::System.Boolean? value)
		        {
				    if(this.Incorporated!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Incorporated = value;
		            return this;
		        }	

				public global::System.Boolean? IsSupplier {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIsSupplier(global::System.Boolean? value)
		        {
				    if(this.IsSupplier!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsSupplier = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public Media Logo {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLogo(Media value)
		        {
		            if(this.Logo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Logo = value;
		            return this;
		        }		

				
				public global::System.String Size {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSize(global::System.String value)
		        {
				    if(this.Size!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Size = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Organisations : global::Allors.ObjectsBase<Organisation>
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		public Organisations(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}