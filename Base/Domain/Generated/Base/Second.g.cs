// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Second : Allors.IObject , Derivable
	{
		public static readonly SecondMeta Meta = SecondMeta.Instance;

		private readonly IStrategy strategy;

		public Second(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Second Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Second) allorsSession.Instantiate(allorsObjectId);		
		}

		public void OnBuild(IObjectBuilder objectBuilder)
		{
			var builder = (SecondBuilder)objectBuilder;
			

			if(builder.IsDerived.HasValue)
			{
				this.IsDerived = builder.IsDerived.Value;
			}			
		

			this.Third = builder.Third;


		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Third Third
		{ 
			get
			{
				return (Third) Strategy.GetCompositeRole(Meta.Third);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Third ,value);
			}
		}

		virtual public bool ExistThird
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Third);
			}
		}

		virtual public void RemoveThird()
		{
			Strategy.RemoveCompositeRole(Meta.Third);
		}


		virtual public global::System.Boolean? IsDerived 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsDerived);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsDerived, value);
			}
		}

		virtual public bool ExistIsDerived{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsDerived);
			}
		}

		virtual public void RemoveIsDerived()
		{
			Strategy.RemoveUnitRole(Meta.IsDerived);
		}



		virtual public First FirstWhereSecond
		{ 
			get
			{
				return (First) Strategy.GetCompositeAssociation(Meta.FirstWhereSecond);
			}
		} 

		virtual public bool ExistFirstWhereSecond
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.FirstWhereSecond);
			}
		}



		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new SecondPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new SecondDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new SecondApplySecurityOnDerive(this);
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			return new SecondOnPostBuild(this);
		}

		public ObjectApplySecurityOnPostBuild ApplySecurityOnPostBuild()
		{ 
			return new SecondApplySecurityOnPostBuild(this);
		}
	}

	public class SecondMeta
	{
		public static readonly SecondMeta Instance = new SecondMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Second;

		public global::Allors.Meta.RoleType Third 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SecondThird;
			}
		} 
		public global::Allors.Meta.RoleType IsDerived 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SecondIsDerived;
			}
		} 

		public global::Allors.Meta.AssociationType FirstWhereSecond 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.FirstSecond;
			}
		} 

		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 
		public global::Allors.Meta.MethodType OnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectApplySecurityOnPostBuild;
			}
		} 

	}

	public partial class SecondBuilder : Allors.ObjectBuilder<Second> , DerivableBuilder, global::System.IDisposable
	{		
		public SecondBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Third Third {get; set;}

				/// <exclude/>
				public SecondBuilder WithThird(Third value)
		        {
		            if(this.Third!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Third = value;
		            return this;
		        }		

				
				public global::System.Boolean? IsDerived {get; set;}

				/// <exclude/>
				public SecondBuilder WithIsDerived(global::System.Boolean? value)
		        {
				    if(this.IsDerived!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsDerived = value;
		            return this;
		        }	


	}

	public partial class Seconds : global::Allors.ObjectsBase<Second>
	{
		public static readonly SecondMeta Meta = SecondMeta.Instance;

		public Seconds(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}