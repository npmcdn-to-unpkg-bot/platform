// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Login : Allors.IObject , Derivable, Deletable
	{
		public static readonly LoginMeta Meta = LoginMeta.Instance;

		private readonly IStrategy strategy;

		public Login(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Login Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Login) allorsSession.Instantiate(allorsObjectId);		
		}

		public void OnBuild(IObjectBuilder objectBuilder)
		{
			var builder = (LoginBuilder)objectBuilder;

			this.Key = builder.Key;
		

			this.Provider = builder.Provider;
		

			this.User = builder.User;


		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Key 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Key);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Key, value);
			}
		}

		virtual public bool ExistKey{
			get
			{
				return Strategy.ExistUnitRole(Meta.Key);
			}
		}

		virtual public void RemoveKey()
		{
			Strategy.RemoveUnitRole(Meta.Key);
		}


		virtual public global::System.String Provider 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Provider);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Provider, value);
			}
		}

		virtual public bool ExistProvider{
			get
			{
				return Strategy.ExistUnitRole(Meta.Provider);
			}
		}

		virtual public void RemoveProvider()
		{
			Strategy.RemoveUnitRole(Meta.Provider);
		}


		virtual public User User
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.User);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.User ,value);
			}
		}

		virtual public bool ExistUser
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.User);
			}
		}

		virtual public void RemoveUser()
		{
			Strategy.RemoveCompositeRole(Meta.User);
		}



		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new LoginPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new LoginDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new LoginApplySecurityOnDerive(this);
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			return new LoginOnPostBuild(this);
		}

		public ObjectApplySecurityOnPostBuild ApplySecurityOnPostBuild()
		{ 
			return new LoginApplySecurityOnPostBuild(this);
		}

		public DeletableDelete Delete()
		{ 
			return new LoginDelete(this);
		}
	}

	public class LoginMeta
	{
		public static readonly LoginMeta Instance = new LoginMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Login;

		public global::Allors.Meta.RoleType Key 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.LoginKey;
			}
		} 
		public global::Allors.Meta.RoleType Provider 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.LoginProvider;
			}
		} 
		public global::Allors.Meta.RoleType User 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.LoginUser;
			}
		} 

		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 
		public global::Allors.Meta.MethodType OnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectApplySecurityOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType Delete 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DeletableDelete;
			}
		} 

	}

	public partial class LoginBuilder : Allors.ObjectBuilder<Login> , DerivableBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public LoginBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String Key {get; set;}

				/// <exclude/>
				public LoginBuilder WithKey(global::System.String value)
		        {
				    if(this.Key!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Key = value;
		            return this;
		        }	

				public global::System.String Provider {get; set;}

				/// <exclude/>
				public LoginBuilder WithProvider(global::System.String value)
		        {
				    if(this.Provider!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Provider = value;
		            return this;
		        }	

				public User User {get; set;}

				/// <exclude/>
				public LoginBuilder WithUser(User value)
		        {
		            if(this.User!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.User = value;
		            return this;
		        }		

				

	}

	public partial class Logins : global::Allors.ObjectsBase<Login>
	{
		public static readonly LoginMeta Meta = LoginMeta.Instance;

		public Logins(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}