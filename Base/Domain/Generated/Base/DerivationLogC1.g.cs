// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class DerivationLogC1 : Allors.ObjectBase , Derivable, DerivationLogI12
	{
		public static readonly DerivationLogC1Meta Meta = DerivationLogC1Meta.Instance;

		public DerivationLogC1(Allors.IStrategy allors) : base(allors) {}

		public static DerivationLogC1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (DerivationLogC1) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (DerivationLogC1Builder)objectBuilder;
			

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		
		}




		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new DerivationLogC1PrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new DerivationLogC1Derive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new DerivationLogC1ApplySecurityOnDerive(this);
		}
	}

	public class DerivationLogC1Meta
	{
		public static readonly DerivationLogC1Meta Instance = new DerivationLogC1Meta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.DerivationLogC1;

		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DerivationLogI12UniqueId;
			}
		} 

		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 

	}

	public partial class DerivationLogC1Builder : Allors.ObjectBuilder<DerivationLogC1> , DerivableBuilder, DerivationLogI12Builder, global::System.IDisposable
	{		
		public DerivationLogC1Builder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public DerivationLogC1Builder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class DerivationLogC1s : global::Allors.ObjectsBase<DerivationLogC1>
	{
		public static readonly DerivationLogC1Meta Meta = DerivationLogC1Meta.Instance;

		public DerivationLogC1s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}