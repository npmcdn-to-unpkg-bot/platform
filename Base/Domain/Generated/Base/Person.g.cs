// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Person : Allors.ObjectBase , User, AccessControlledObject, UniquelyIdentifiable, SearchResult, UserInterfaceable, Searchable, Printable
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		public Person(Allors.IStrategy allors) : base(allors) {}

		public static Person Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Person) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PersonBuilder)objectBuilder;

			this.LastName = builder.LastName;
		

			this.MiddleName = builder.MiddleName;
		

			this.FirstName = builder.FirstName;
		

			this.TinyMCEText = builder.TinyMCEText;
		

			this.Text = builder.Text;
					

			if(builder.Age.HasValue)
			{
				this.Age = builder.Age.Value;
			}			
					

			if(builder.IsStudent.HasValue)
			{
				this.IsStudent = builder.IsStudent.Value;
			}			
		

			this.FullName = builder.FullName;
					

			if(builder.ShirtSize.HasValue)
			{
				this.ShirtSize = builder.ShirtSize.Value;
			}			
		

			this.CKEditorText = builder.CKEditorText;
					

			if(builder.IsMarried.HasValue)
			{
				this.IsMarried = builder.IsMarried.Value;
			}			
					

			if(builder.Weight.HasValue)
			{
				this.Weight = builder.Weight.Value;
			}			
					

			if(builder.UserEmailConfirmed.HasValue)
			{
				this.UserEmailConfirmed = builder.UserEmailConfirmed.Value;
			}			
		

			this.UserName = builder.UserName;
		

			this.UserEmail = builder.UserEmail;
		

			this.UserPasswordHash = builder.UserPasswordHash;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.PrintContent = builder.PrintContent;
		

			this.MainAddress = builder.MainAddress;



			this.MailboxAddress = builder.MailboxAddress;



			this.Gender = builder.Gender;



			this.Photo = builder.Photo;


			if(builder.Addresses!=null)
			{
				this.Addresses = builder.Addresses.ToArray();
			}


			this.OwnerSecurityToken = builder.OwnerSecurityToken;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.Locale = builder.Locale;



			this.SearchData = builder.SearchData;


		}




		virtual public global::System.String LastName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.LastName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastName, value);
			}
		}

		virtual public bool ExistLastName{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastName);
			}
		}

		virtual public void RemoveLastName()
		{
			Strategy.RemoveUnitRole(Meta.LastName);
		}



		virtual public global::System.String MiddleName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.MiddleName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MiddleName, value);
			}
		}

		virtual public bool ExistMiddleName{
			get
			{
				return Strategy.ExistUnitRole(Meta.MiddleName);
			}
		}

		virtual public void RemoveMiddleName()
		{
			Strategy.RemoveUnitRole(Meta.MiddleName);
		}



		virtual public global::System.String FirstName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FirstName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FirstName, value);
			}
		}

		virtual public bool ExistFirstName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FirstName);
			}
		}

		virtual public void RemoveFirstName()
		{
			Strategy.RemoveUnitRole(Meta.FirstName);
		}


		virtual public Address MainAddress
		{ 
			get
			{
				return (Address) Strategy.GetCompositeRole(Meta.MainAddress);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MainAddress ,value);
			}
		}

		virtual public bool ExistMainAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MainAddress);
			}
		}

		virtual public void RemoveMainAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MainAddress);
		}



		virtual public global::System.String TinyMCEText 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TinyMCEText);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TinyMCEText, value);
			}
		}

		virtual public bool ExistTinyMCEText{
			get
			{
				return Strategy.ExistUnitRole(Meta.TinyMCEText);
			}
		}

		virtual public void RemoveTinyMCEText()
		{
			Strategy.RemoveUnitRole(Meta.TinyMCEText);
		}



		virtual public global::System.String Text 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Text);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Text, value);
			}
		}

		virtual public bool ExistText{
			get
			{
				return Strategy.ExistUnitRole(Meta.Text);
			}
		}

		virtual public void RemoveText()
		{
			Strategy.RemoveUnitRole(Meta.Text);
		}



		virtual public global::System.Int32? Age 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Age);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Age, value);
			}
		}

		virtual public bool ExistAge{
			get
			{
				return Strategy.ExistUnitRole(Meta.Age);
			}
		}

		virtual public void RemoveAge()
		{
			Strategy.RemoveUnitRole(Meta.Age);
		}



		virtual public global::System.Boolean? IsStudent 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsStudent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsStudent, value);
			}
		}

		virtual public bool ExistIsStudent{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsStudent);
			}
		}

		virtual public void RemoveIsStudent()
		{
			Strategy.RemoveUnitRole(Meta.IsStudent);
		}


		virtual public MailboxAddress MailboxAddress
		{ 
			get
			{
				return (MailboxAddress) Strategy.GetCompositeRole(Meta.MailboxAddress);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MailboxAddress ,value);
			}
		}

		virtual public bool ExistMailboxAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MailboxAddress);
			}
		}

		virtual public void RemoveMailboxAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MailboxAddress);
		}


		virtual public Gender Gender
		{ 
			get
			{
				return (Gender) Strategy.GetCompositeRole(Meta.Gender);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Gender ,value);
			}
		}

		virtual public bool ExistGender
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Gender);
			}
		}

		virtual public void RemoveGender()
		{
			Strategy.RemoveCompositeRole(Meta.Gender);
		}



		virtual public global::System.String FullName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FullName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FullName, value);
			}
		}

		virtual public bool ExistFullName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FullName);
			}
		}

		virtual public void RemoveFullName()
		{
			Strategy.RemoveUnitRole(Meta.FullName);
		}



		virtual public global::System.Int32? ShirtSize 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.ShirtSize);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShirtSize, value);
			}
		}

		virtual public bool ExistShirtSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShirtSize);
			}
		}

		virtual public void RemoveShirtSize()
		{
			Strategy.RemoveUnitRole(Meta.ShirtSize);
		}



		virtual public global::System.String CKEditorText 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.CKEditorText);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CKEditorText, value);
			}
		}

		virtual public bool ExistCKEditorText{
			get
			{
				return Strategy.ExistUnitRole(Meta.CKEditorText);
			}
		}

		virtual public void RemoveCKEditorText()
		{
			Strategy.RemoveUnitRole(Meta.CKEditorText);
		}



		virtual public global::System.Boolean? IsMarried 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsMarried);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsMarried, value);
			}
		}

		virtual public bool ExistIsMarried{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsMarried);
			}
		}

		virtual public void RemoveIsMarried()
		{
			Strategy.RemoveUnitRole(Meta.IsMarried);
		}



		virtual public global::System.Decimal? Weight 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Weight);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Weight, value);
			}
		}

		virtual public bool ExistWeight{
			get
			{
				return Strategy.ExistUnitRole(Meta.Weight);
			}
		}

		virtual public void RemoveWeight()
		{
			Strategy.RemoveUnitRole(Meta.Weight);
		}


		virtual public Media Photo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Photo);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Photo ,value);
			}
		}

		virtual public bool ExistPhoto
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Photo);
			}
		}

		virtual public void RemovePhoto()
		{
			Strategy.RemoveCompositeRole(Meta.Photo);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Address);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Address, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Address, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Address,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Address);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Address);
		}



		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UserEmailConfirmed);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmailConfirmed, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmailConfirmed);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			Strategy.RemoveUnitRole(Meta.UserEmailConfirmed);
		}



		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserName, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserName);
			}
		}

		virtual public void RemoveUserName()
		{
			Strategy.RemoveUnitRole(Meta.UserName);
		}



		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserEmail);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmail, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmail);
			}
		}

		virtual public void RemoveUserEmail()
		{
			Strategy.RemoveUnitRole(Meta.UserEmail);
		}



		virtual public global::System.String UserPasswordHash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserPasswordHash);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserPasswordHash, value);
			}
		}

		virtual public bool ExistUserPasswordHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserPasswordHash);
			}
		}

		virtual public void RemoveUserPasswordHash()
		{
			Strategy.RemoveUnitRole(Meta.UserPasswordHash);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken ,value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale ,value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.String PrintContent 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PrintContent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PrintContent, value);
			}
		}

		virtual public bool ExistPrintContent{
			get
			{
				return Strategy.ExistUnitRole(Meta.PrintContent);
			}
		}

		virtual public void RemovePrintContent()
		{
			Strategy.RemoveUnitRole(Meta.PrintContent);
		}



		virtual public global::Allors.Extent<Organisation> OrganisationsWhereShareholder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereShareholder);
			}
		}

		virtual public bool ExistOrganisationsWhereShareholder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereShareholder);
			}
		}


		virtual public Organisation OrganisationWhereEmployee
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereEmployee);
			}
		} 

		virtual public bool ExistOrganisationWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereEmployee);
			}
		}


		virtual public Organisation OrganisationWhereOwner
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereOwner);
			}
		} 

		virtual public bool ExistOrganisationWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereOwner);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereEmployee);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereEmployee);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereManager
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereManager);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereManager);
			}
		}


		virtual public BadUI BadUIWherePersonMany
		{ 
			get
			{
				return (BadUI) Strategy.GetCompositeAssociation(Meta.BadUIWherePersonMany);
			}
		} 

		virtual public bool ExistBadUIWherePersonMany
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.BadUIWherePersonMany);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWherePersonOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWherePersonOne);
			}
		}

		virtual public bool ExistBadUIsWherePersonOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWherePersonOne);
			}
		}


		virtual public Singleton SingletonWhereGuest
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereGuest);
			}
		} 

		virtual public bool ExistSingletonWhereGuest
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereGuest);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereMember
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereMember);
			}
		}

		virtual public bool ExistUserGroupsWhereMember
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereMember);
			}
		}


		virtual public global::Allors.Extent<Login> LoginsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LoginsWhereUser);
			}
		}

		virtual public bool ExistLoginsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LoginsWhereUser);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubject);
			}
		}

		virtual public bool ExistAccessControlsWhereSubject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubject);
			}
		}


		virtual public global::Allors.Extent<PrintQueue> PrintQueuesWherePrintable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PrintQueuesWherePrintable);
			}
		}

		virtual public bool ExistPrintQueuesWherePrintable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PrintQueuesWherePrintable);
			}
		}

	}

	public class PersonMeta
	{
		public static readonly PersonMeta Instance = new PersonMeta();

		public global::Allors.Meta.Class class = global::Allors.Meta.Classes.Person;

		public global::Allors.Meta.RoleType LastName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonLastName;
			}
		} 
		public global::Allors.Meta.RoleType MiddleName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonMiddleName;
			}
		} 
		public global::Allors.Meta.RoleType FirstName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonFirstName;
			}
		} 
		public global::Allors.Meta.RoleType MainAddress 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonMainAddress;
			}
		} 
		public global::Allors.Meta.RoleType TinyMCEText 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonTinyMCEText;
			}
		} 
		public global::Allors.Meta.RoleType Text 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonText;
			}
		} 
		public global::Allors.Meta.RoleType Age 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonAge;
			}
		} 
		public global::Allors.Meta.RoleType IsStudent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonIsStudent;
			}
		} 
		public global::Allors.Meta.RoleType MailboxAddress 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonMailboxAddress;
			}
		} 
		public global::Allors.Meta.RoleType Gender 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonGender;
			}
		} 
		public global::Allors.Meta.RoleType FullName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonFullName;
			}
		} 
		public global::Allors.Meta.RoleType ShirtSize 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonShirtSize;
			}
		} 
		public global::Allors.Meta.RoleType CKEditorText 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonCKEditorText;
			}
		} 
		public global::Allors.Meta.RoleType IsMarried 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonIsMarried;
			}
		} 
		public global::Allors.Meta.RoleType Weight 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonWeight;
			}
		} 
		public global::Allors.Meta.RoleType Photo 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonPhoto;
			}
		} 
		public global::Allors.Meta.RoleType Address 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PersonAddress;
			}
		} 
		public global::Allors.Meta.RoleType UserEmailConfirmed 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserUserEmailConfirmed;
			}
		} 
		public global::Allors.Meta.RoleType UserName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserUserName;
			}
		} 
		public global::Allors.Meta.RoleType UserEmail 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserUserEmail;
			}
		} 
		public global::Allors.Meta.RoleType UserPasswordHash 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserUserPasswordHash;
			}
		} 
		public global::Allors.Meta.RoleType OwnerSecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SecurityTokenOwnerOwnerSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType Locale 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.LocalisedLocale;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType PrintContent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PrintablePrintContent;
			}
		} 

		public global::Allors.Meta.AssociationType OrganisationsWhereShareholder 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrganisationShareholder;
			}
		} 
		public global::Allors.Meta.AssociationType OrganisationWhereEmployee 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrganisationEmployee;
			}
		} 
		public global::Allors.Meta.AssociationType OrganisationWhereOwner 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrganisationOwner;
			}
		} 
		public global::Allors.Meta.AssociationType StatefulCompaniesWhereEmployee 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.StatefulCompanyEmployee;
			}
		} 
		public global::Allors.Meta.AssociationType StatefulCompaniesWhereManager 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.StatefulCompanyManager;
			}
		} 
		public global::Allors.Meta.AssociationType BadUIWherePersonMany 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUIPersonMany;
			}
		} 
		public global::Allors.Meta.AssociationType BadUIsWherePersonOne 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BadUIPersonOne;
			}
		} 
		public global::Allors.Meta.AssociationType SingletonWhereGuest 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SingletonGuest;
			}
		} 
		public global::Allors.Meta.AssociationType UserGroupsWhereMember 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.UserGroupMember;
			}
		} 
		public global::Allors.Meta.AssociationType LoginsWhereUser 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.LoginUser;
			}
		} 
		public global::Allors.Meta.AssociationType AccessControlsWhereSubject 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccessControlSubject;
			}
		} 
		public global::Allors.Meta.AssociationType PrintQueuesWherePrintable 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PrintQueuePrintable;
			}
		} 

	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , UserBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, SearchResultBuilder, UserInterfaceableBuilder, SearchableBuilder, PrintableBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String LastName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public Address MainAddress {get; set;}

				/// <exclude/>
				public AddressBuilder WithMainAddress(Address value)
		        {
		            if(this.MainAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MainAddress = value;
		            return this;
		        }		

				
				public global::System.String TinyMCEText {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithTinyMCEText(global::System.String value)
		        {
				    if(this.TinyMCEText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TinyMCEText = value;
		            return this;
		        }	

				public global::System.String Text {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.Int32? Age {get; set;}

				/// <exclude/>
				public AllorsIntegerBuilder WithAge(global::System.Int32? value)
		        {
				    if(this.Age!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Age = value;
		            return this;
		        }	

				public global::System.Boolean? IsStudent {get; set;}

				/// <exclude/>
				public AllorsBooleanBuilder WithIsStudent(global::System.Boolean? value)
		        {
				    if(this.IsStudent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsStudent = value;
		            return this;
		        }	

				public MailboxAddress MailboxAddress {get; set;}

				/// <exclude/>
				public MailboxAddressBuilder WithMailboxAddress(MailboxAddress value)
		        {
		            if(this.MailboxAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MailboxAddress = value;
		            return this;
		        }		

				
				public Gender Gender {get; set;}

				/// <exclude/>
				public GenderBuilder WithGender(Gender value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.String FullName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithFullName(global::System.String value)
		        {
				    if(this.FullName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FullName = value;
		            return this;
		        }	

				public global::System.Int32? ShirtSize {get; set;}

				/// <exclude/>
				public AllorsIntegerBuilder WithShirtSize(global::System.Int32? value)
		        {
				    if(this.ShirtSize!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShirtSize = value;
		            return this;
		        }	

				public global::System.String CKEditorText {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithCKEditorText(global::System.String value)
		        {
				    if(this.CKEditorText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CKEditorText = value;
		            return this;
		        }	

				public global::System.Boolean? IsMarried {get; set;}

				/// <exclude/>
				public AllorsBooleanBuilder WithIsMarried(global::System.Boolean? value)
		        {
				    if(this.IsMarried!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsMarried = value;
		            return this;
		        }	

				public global::System.Decimal? Weight {get; set;}

				/// <exclude/>
				public AllorsDecimalBuilder WithWeight(global::System.Decimal? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public Media Photo {get; set;}

				/// <exclude/>
				public MediaBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public AddressBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public AllorsBooleanBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public SecurityToken OwnerSecurityToken {get; set;}

				/// <exclude/>
				public SecurityTokenBuilder WithOwnerSecurityToken(SecurityToken value)
		        {
		            if(this.OwnerSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OwnerSecurityToken = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PermissionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SecurityTokenBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public LocaleBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public AllorsUniqueBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public SearchDataBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public AllorsStringBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	


	}

	public partial class Persons : global::Allors.ObjectsBase<Person>
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		public Persons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}