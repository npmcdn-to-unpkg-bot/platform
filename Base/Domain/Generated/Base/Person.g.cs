// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Person
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PersonBuilder)objectBuilder;

			this.LastName = builder.LastName;
		

			this.MiddleName = builder.MiddleName;
		

			this.FirstName = builder.FirstName;
		

			this.TinyMCEText = builder.TinyMCEText;
		

			this.Text = builder.Text;
					

			if(builder.Age.HasValue)
			{
				this.Age = builder.Age.Value;
			}			
					

			if(builder.IsStudent.HasValue)
			{
				this.IsStudent = builder.IsStudent.Value;
			}			
		

			this.FullName = builder.FullName;
					

			if(builder.ShirtSize.HasValue)
			{
				this.ShirtSize = builder.ShirtSize.Value;
			}			
		

			this.CKEditorText = builder.CKEditorText;
					

			if(builder.IsMarried.HasValue)
			{
				this.IsMarried = builder.IsMarried.Value;
			}			
					

			if(builder.Weight.HasValue)
			{
				this.Weight = builder.Weight.Value;
			}			
					

			if(builder.UserEmailConfirmed.HasValue)
			{
				this.UserEmailConfirmed = builder.UserEmailConfirmed.Value;
			}			
		

			this.UserName = builder.UserName;
		

			this.UserEmail = builder.UserEmail;
		

			this.UserPasswordHash = builder.UserPasswordHash;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.PrintContent = builder.PrintContent;
		

			this.MainAddress = builder.MainAddress;



			this.MailboxAddress = builder.MailboxAddress;



			this.Gender = builder.Gender;



			this.Photo = builder.Photo;


			if(builder.Addresses!=null)
			{
				this.Addresses = builder.Addresses.ToArray();
			}


			this.OwnerSecurityToken = builder.OwnerSecurityToken;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.Locale = builder.Locale;



			this.SearchData = builder.SearchData;


		}
	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , UserBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, SearchResultBuilder, UserInterfaceableBuilder, SearchableBuilder, PrintableBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String LastName {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public Address MainAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMainAddress(Address value)
		        {
		            if(this.MainAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MainAddress = value;
		            return this;
		        }		

				
				public global::System.String TinyMCEText {get; set;}

				/// <exclude/>
				public PersonBuilder WithTinyMCEText(global::System.String value)
		        {
				    if(this.TinyMCEText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TinyMCEText = value;
		            return this;
		        }	

				public global::System.String Text {get; set;}

				/// <exclude/>
				public PersonBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.Int32? Age {get; set;}

				/// <exclude/>
				public PersonBuilder WithAge(global::System.Int32? value)
		        {
				    if(this.Age!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Age = value;
		            return this;
		        }	

				public global::System.Boolean? IsStudent {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsStudent(global::System.Boolean? value)
		        {
				    if(this.IsStudent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsStudent = value;
		            return this;
		        }	

				public MailboxAddress MailboxAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMailboxAddress(MailboxAddress value)
		        {
		            if(this.MailboxAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MailboxAddress = value;
		            return this;
		        }		

				
				public Gender Gender {get; set;}

				/// <exclude/>
				public PersonBuilder WithGender(Gender value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.String FullName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFullName(global::System.String value)
		        {
				    if(this.FullName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FullName = value;
		            return this;
		        }	

				public global::System.Int32? ShirtSize {get; set;}

				/// <exclude/>
				public PersonBuilder WithShirtSize(global::System.Int32? value)
		        {
				    if(this.ShirtSize!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShirtSize = value;
		            return this;
		        }	

				public global::System.String CKEditorText {get; set;}

				/// <exclude/>
				public PersonBuilder WithCKEditorText(global::System.String value)
		        {
				    if(this.CKEditorText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CKEditorText = value;
		            return this;
		        }	

				public global::System.Boolean? IsMarried {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsMarried(global::System.Boolean? value)
		        {
				    if(this.IsMarried!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsMarried = value;
		            return this;
		        }	

				public global::System.Decimal? Weight {get; set;}

				/// <exclude/>
				public PersonBuilder WithWeight(global::System.Decimal? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public Media Photo {get; set;}

				/// <exclude/>
				public PersonBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public PersonBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public SecurityToken OwnerSecurityToken {get; set;}

				/// <exclude/>
				public PersonBuilder WithOwnerSecurityToken(SecurityToken value)
		        {
		            if(this.OwnerSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OwnerSecurityToken = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PersonBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PersonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public PersonBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PersonBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public PersonBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public PersonBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	


	}

	public partial class Persons : global::Allors.ObjectsBase<Person>
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		public Persons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}