// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class C1 : Allors.IObject , Derivable, I1
	{
		public static readonly C1Meta Meta = C1Meta.Instance;

		private readonly IStrategy strategy;

		public C1(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static C1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C1) allorsSession.Instantiate(allorsObjectId);		
		}

		public void OnBuild(IObjectBuilder objectBuilder)
		{
			var builder = (C1Builder)objectBuilder;

			this.C1AllorsString = builder.C1AllorsString;
					

			if(builder.C1AllorsDecimal.HasValue)
			{
				this.C1AllorsDecimal = builder.C1AllorsDecimal.Value;
			}			
		

			this.C1AllorsBinary = builder.C1AllorsBinary;
		

			this.AllorsStringMax = builder.AllorsStringMax;
					

			if(builder.C1AllorsBoolean.HasValue)
			{
				this.C1AllorsBoolean = builder.C1AllorsBoolean.Value;
			}			
					

			if(builder.C1AllorsUnique.HasValue)
			{
				this.C1AllorsUnique = builder.C1AllorsUnique.Value;
			}			
					

			if(builder.C1AllorsFloat.HasValue)
			{
				this.C1AllorsFloat = builder.C1AllorsFloat.Value;
			}			
					

			if(builder.C1AllorsInteger.HasValue)
			{
				this.C1AllorsInteger = builder.C1AllorsInteger.Value;
			}			
		

			this.I1AllorsString = builder.I1AllorsString;
					

			if(builder.I1AllorsInteger.HasValue)
			{
				this.I1AllorsInteger = builder.I1AllorsInteger.Value;
			}			
					

			if(builder.I1AllorsBoolean.HasValue)
			{
				this.I1AllorsBoolean = builder.I1AllorsBoolean.Value;
			}			
					

			if(builder.I1AllorsDecimal.HasValue)
			{
				this.I1AllorsDecimal = builder.I1AllorsDecimal.Value;
			}			
		

			this.I1AllorsBinary = builder.I1AllorsBinary;
					

			if(builder.I1AllorsFloat.HasValue)
			{
				this.I1AllorsFloat = builder.I1AllorsFloat.Value;
			}			
					

			if(builder.I1AllorsUnique.HasValue)
			{
				this.I1AllorsUnique = builder.I1AllorsUnique.Value;
			}			
		

			this.I12AllorsBinary = builder.I12AllorsBinary;
					

			if(builder.I12AllorsFloat.HasValue)
			{
				this.I12AllorsFloat = builder.I12AllorsFloat.Value;
			}			
		

			this.I12AllorsString = builder.I12AllorsString;
					

			if(builder.I12AllorsDecimal.HasValue)
			{
				this.I12AllorsDecimal = builder.I12AllorsDecimal.Value;
			}			
		

			this.Name = builder.Name;
					

			if(builder.I12AllorsUnique.HasValue)
			{
				this.I12AllorsUnique = builder.I12AllorsUnique.Value;
			}			
					

			if(builder.I12AllorsInteger.HasValue)
			{
				this.I12AllorsInteger = builder.I12AllorsInteger.Value;
			}			
					

			if(builder.I12AllorsBoolean.HasValue)
			{
				this.I12AllorsBoolean = builder.I12AllorsBoolean.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.C1I1One2One = builder.C1I1One2One;



			this.C1C2Many2One = builder.C1C2Many2One;



			this.C1I2One2One = builder.C1I2One2One;



			this.C1C1One2One = builder.C1C1One2One;



			this.C1I1Many2One = builder.C1I1Many2One;


			if(builder.C1I1Many2Manies!=null)
			{
				this.C1I1Many2Manies = builder.C1I1Many2Manies.ToArray();
			}

			if(builder.C1I2One2Manies!=null)
			{
				this.C1I2One2Manies = builder.C1I2One2Manies.ToArray();
			}

			if(builder.C1C1Many2Manies!=null)
			{
				this.C1C1Many2Manies = builder.C1C1Many2Manies.ToArray();
			}

			if(builder.C1I12Many2Manies!=null)
			{
				this.C1I12Many2Manies = builder.C1I12Many2Manies.ToArray();
			}

			if(builder.C1I12One2Manies!=null)
			{
				this.C1I12One2Manies = builder.C1I12One2Manies.ToArray();
			}

			if(builder.C1C2One2Manies!=null)
			{
				this.C1C2One2Manies = builder.C1C2One2Manies.ToArray();
			}

			if(builder.C1C1One2Manies!=null)
			{
				this.C1C1One2Manies = builder.C1C1One2Manies.ToArray();
			}


			this.C1C1Many2One = builder.C1C1Many2One;



			this.C1I12One2One = builder.C1I12One2One;



			this.C1I12Many2One = builder.C1I12Many2One;


			if(builder.C1I2Many2Manies!=null)
			{
				this.C1I2Many2Manies = builder.C1I2Many2Manies.ToArray();
			}


			this.C1I2Many2One = builder.C1I2Many2One;


			if(builder.C1I1One2Manies!=null)
			{
				this.C1I1One2Manies = builder.C1I1One2Manies.ToArray();
			}


			this.C1C2One2One = builder.C1C2One2One;


			if(builder.C1C2Many2Manies!=null)
			{
				this.C1C2Many2Manies = builder.C1C2Many2Manies.ToArray();
			}


			this.I1I1Many2One = builder.I1I1Many2One;


			if(builder.I1I12Many2Manies!=null)
			{
				this.I1I12Many2Manies = builder.I1I12Many2Manies.ToArray();
			}

			if(builder.I1I2Many2Manies!=null)
			{
				this.I1I2Many2Manies = builder.I1I2Many2Manies.ToArray();
			}


			this.I1I2Many2One = builder.I1I2Many2One;



			this.I1I12Many2One = builder.I1I12Many2One;


			if(builder.I1I2One2Manies!=null)
			{
				this.I1I2One2Manies = builder.I1I2One2Manies.ToArray();
			}

			if(builder.I1C2One2Manies!=null)
			{
				this.I1C2One2Manies = builder.I1C2One2Manies.ToArray();
			}


			this.I1C1One2One = builder.I1C1One2One;


			if(builder.I1C2Many2Manies!=null)
			{
				this.I1C2Many2Manies = builder.I1C2Many2Manies.ToArray();
			}

			if(builder.I1I1One2Manies!=null)
			{
				this.I1I1One2Manies = builder.I1I1One2Manies.ToArray();
			}

			if(builder.I1I1Many2Manies!=null)
			{
				this.I1I1Many2Manies = builder.I1I1Many2Manies.ToArray();
			}


			this.I1I12One2One = builder.I1I12One2One;



			this.I1I2One2One = builder.I1I2One2One;



			this.I1C2One2One = builder.I1C2One2One;


			if(builder.I1C1One2Manies!=null)
			{
				this.I1C1One2Manies = builder.I1C1One2Manies.ToArray();
			}

			if(builder.I1C1Many2Manies!=null)
			{
				this.I1C1Many2Manies = builder.I1C1Many2Manies.ToArray();
			}


			this.I1I1One2One = builder.I1I1One2One;



			this.I1C1Many2One = builder.I1C1Many2One;


			if(builder.I1I12One2Manies!=null)
			{
				this.I1I12One2Manies = builder.I1I12One2Manies.ToArray();
			}


			this.I1C2Many2One = builder.I1C2Many2One;



			this.I12C2One2One = builder.I12C2One2One;



			this.I12I1Many2One = builder.I12I1Many2One;


			if(builder.I12I12Many2Manies!=null)
			{
				this.I12I12Many2Manies = builder.I12I12Many2Manies.ToArray();
			}

			if(builder.I12I2Many2Manies!=null)
			{
				this.I12I2Many2Manies = builder.I12I2Many2Manies.ToArray();
			}

			if(builder.I12C2Many2Manies!=null)
			{
				this.I12C2Many2Manies = builder.I12C2Many2Manies.ToArray();
			}

			if(builder.I12I1Many2Manies!=null)
			{
				this.I12I1Many2Manies = builder.I12I1Many2Manies.ToArray();
			}

			if(builder.I12I12One2Manies!=null)
			{
				this.I12I12One2Manies = builder.I12I12One2Manies.ToArray();
			}

			if(builder.I12C1Many2Manies!=null)
			{
				this.I12C1Many2Manies = builder.I12C1Many2Manies.ToArray();
			}


			this.I12I2Many2One = builder.I12I2Many2One;


			if(builder.I12I1One2Manies!=null)
			{
				this.I12I1One2Manies = builder.I12I1One2Manies.ToArray();
			}


			this.I12C1One2One = builder.I12C1One2One;



			this.I12I12One2One = builder.I12I12One2One;



			this.I12I2One2One = builder.I12I2One2One;


			if(builder.Dependencies!=null)
			{
				this.Dependencies = builder.Dependencies.ToArray();
			}

			if(builder.I12I2One2Manies!=null)
			{
				this.I12I2One2Manies = builder.I12I2One2Manies.ToArray();
			}


			this.I12C2Many2One = builder.I12C2Many2One;



			this.I12I12Many2One = builder.I12I12Many2One;



			this.I12I1One2One = builder.I12I1One2One;


			if(builder.I12C1One2Manies!=null)
			{
				this.I12C1One2Manies = builder.I12C1One2Manies.ToArray();
			}


			this.I12C1Many2One = builder.I12C1Many2One;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public I1 C1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1One2One ,value);
			}
		}

		virtual public bool ExistC1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1One2One);
			}
		}

		virtual public void RemoveC1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2One);
		}


		virtual public global::System.String C1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsString, value);
			}
		}

		virtual public bool ExistC1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsString);
			}
		}

		virtual public void RemoveC1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsString);
		}


		virtual public C2 C1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2Many2One ,value);
			}
		}

		virtual public bool ExistC1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2Many2One);
			}
		}

		virtual public void RemoveC1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2One);
		}


		virtual public I2 C1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2One2One ,value);
			}
		}

		virtual public bool ExistC1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2One2One);
			}
		}

		virtual public void RemoveC1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2One);
		}


		virtual public C1 C1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1One2One ,value);
			}
		}

		virtual public bool ExistC1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1One2One);
			}
		}

		virtual public void RemoveC1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2One);
		}


		virtual public I1 C1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1Many2One ,value);
			}
		}

		virtual public bool ExistC1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1Many2One);
			}
		}

		virtual public void RemoveC1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2One);
		}


		virtual public global::Allors.Extent<I1> C1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1Many2Many, value);
			}
		}

		virtual public void AddC1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1Many2Many, value);
		}

		virtual public void RemoveC1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2Many,value);
		}

		virtual public bool ExistC1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1Many2Many);
			}
		}

		virtual public void RemoveC1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1Many2Many);
		}


		virtual public global::Allors.Extent<I2> C1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2One2Many, value);
			}
		}

		virtual public void AddC1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2One2Many, value);
		}

		virtual public void RemoveC1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2Many,value);
		}

		virtual public bool ExistC1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2One2Many);
			}
		}

		virtual public void RemoveC1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2One2Many);
		}


		virtual public global::System.Decimal? C1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDecimal, value);
			}
		}

		virtual public bool ExistC1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDecimal);
			}
		}

		virtual public void RemoveC1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDecimal);
		}


		virtual public global::Allors.Extent<C1> C1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1Many2Many, value);
			}
		}

		virtual public void AddC1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1Many2Many, value);
		}

		virtual public void RemoveC1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2Many,value);
		}

		virtual public bool ExistC1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1Many2Many);
			}
		}

		virtual public void RemoveC1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1Many2Many);
		}


		virtual public global::Allors.Extent<I12> C1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12Many2Many, value);
			}
		}

		virtual public void AddC1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12Many2Many, value);
		}

		virtual public void RemoveC1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2Many,value);
		}

		virtual public bool ExistC1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12Many2Many);
			}
		}

		virtual public void RemoveC1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12Many2Many);
		}


		virtual public global::System.Byte[] C1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBinary, value);
			}
		}

		virtual public bool ExistC1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBinary);
			}
		}

		virtual public void RemoveC1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBinary);
		}


		virtual public global::Allors.Extent<I12> C1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12One2Many, value);
			}
		}

		virtual public void AddC1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12One2Many, value);
		}

		virtual public void RemoveC1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2Many,value);
		}

		virtual public bool ExistC1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12One2Many);
			}
		}

		virtual public void RemoveC1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12One2Many);
		}


		virtual public global::Allors.Extent<C2> C1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2One2Many, value);
			}
		}

		virtual public void AddC1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2One2Many, value);
		}

		virtual public void RemoveC1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2Many,value);
		}

		virtual public bool ExistC1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2One2Many);
			}
		}

		virtual public void RemoveC1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2One2Many);
		}


		virtual public global::Allors.Extent<C1> C1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1One2Many, value);
			}
		}

		virtual public void AddC1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1One2Many, value);
		}

		virtual public void RemoveC1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2Many,value);
		}

		virtual public bool ExistC1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1One2Many);
			}
		}

		virtual public void RemoveC1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1One2Many);
		}


		virtual public global::System.String AllorsStringMax 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsStringMax);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsStringMax, value);
			}
		}

		virtual public bool ExistAllorsStringMax{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsStringMax);
			}
		}

		virtual public void RemoveAllorsStringMax()
		{
			Strategy.RemoveUnitRole(Meta.AllorsStringMax);
		}


		virtual public C1 C1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1Many2One ,value);
			}
		}

		virtual public bool ExistC1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1Many2One);
			}
		}

		virtual public void RemoveC1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2One);
		}


		virtual public global::System.Boolean? C1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBoolean, value);
			}
		}

		virtual public bool ExistC1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBoolean);
			}
		}

		virtual public void RemoveC1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBoolean);
		}


		virtual public I12 C1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12One2One ,value);
			}
		}

		virtual public bool ExistC1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12One2One);
			}
		}

		virtual public void RemoveC1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2One);
		}


		virtual public I12 C1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12Many2One ,value);
			}
		}

		virtual public bool ExistC1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12Many2One);
			}
		}

		virtual public void RemoveC1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2One);
		}


		virtual public global::Allors.Extent<I2> C1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2Many2Many, value);
			}
		}

		virtual public void AddC1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2Many2Many, value);
		}

		virtual public void RemoveC1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2Many,value);
		}

		virtual public bool ExistC1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2Many2Many);
			}
		}

		virtual public void RemoveC1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2Many2Many);
		}


		virtual public global::System.Guid? C1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsUnique, value);
			}
		}

		virtual public bool ExistC1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsUnique);
			}
		}

		virtual public void RemoveC1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsUnique);
		}


		virtual public I2 C1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2Many2One ,value);
			}
		}

		virtual public bool ExistC1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2Many2One);
			}
		}

		virtual public void RemoveC1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2One);
		}


		virtual public global::Allors.Extent<I1> C1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1One2Many, value);
			}
		}

		virtual public void AddC1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1One2Many, value);
		}

		virtual public void RemoveC1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2Many,value);
		}

		virtual public bool ExistC1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1One2Many);
			}
		}

		virtual public void RemoveC1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1One2Many);
		}


		virtual public C2 C1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2One2One ,value);
			}
		}

		virtual public bool ExistC1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2One2One);
			}
		}

		virtual public void RemoveC1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2One);
		}


		virtual public global::System.Double? C1AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C1AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsFloat, value);
			}
		}

		virtual public bool ExistC1AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsFloat);
			}
		}

		virtual public void RemoveC1AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsFloat);
		}


		virtual public global::Allors.Extent<C2> C1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2Many2Many, value);
			}
		}

		virtual public void AddC1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2Many2Many, value);
		}

		virtual public void RemoveC1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2Many,value);
		}

		virtual public bool ExistC1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2Many2Many);
			}
		}

		virtual public void RemoveC1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2Many2Many);
		}


		virtual public global::System.Int32? C1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsInteger, value);
			}
		}

		virtual public bool ExistC1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsInteger);
			}
		}

		virtual public void RemoveC1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsInteger);
		}


		virtual public I1 I1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1Many2One ,value);
			}
		}

		virtual public bool ExistI1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1Many2One);
			}
		}

		virtual public void RemoveI1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2One);
		}


		virtual public global::Allors.Extent<I12> I1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12Many2Many, value);
			}
		}

		virtual public void AddI1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12Many2Many, value);
		}

		virtual public void RemoveI1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2Many,value);
		}

		virtual public bool ExistI1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12Many2Many);
			}
		}

		virtual public void RemoveI1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12Many2Many);
		}


		virtual public global::Allors.Extent<I2> I1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2Many2Many, value);
			}
		}

		virtual public void AddI1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2Many2Many, value);
		}

		virtual public void RemoveI1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2Many,value);
		}

		virtual public bool ExistI1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2Many2Many);
			}
		}

		virtual public void RemoveI1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2Many2Many);
		}


		virtual public I2 I1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2Many2One ,value);
			}
		}

		virtual public bool ExistI1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2Many2One);
			}
		}

		virtual public void RemoveI1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2One);
		}


		virtual public global::System.String I1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsString, value);
			}
		}

		virtual public bool ExistI1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsString);
			}
		}

		virtual public void RemoveI1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsString);
		}


		virtual public I12 I1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12Many2One ,value);
			}
		}

		virtual public bool ExistI1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12Many2One);
			}
		}

		virtual public void RemoveI1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2One);
		}


		virtual public global::Allors.Extent<I2> I1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2One2Many, value);
			}
		}

		virtual public void AddI1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2One2Many, value);
		}

		virtual public void RemoveI1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2Many,value);
		}

		virtual public bool ExistI1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2One2Many);
			}
		}

		virtual public void RemoveI1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2One2Many);
		}


		virtual public global::Allors.Extent<C2> I1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2One2Many, value);
			}
		}

		virtual public void AddI1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2One2Many, value);
		}

		virtual public void RemoveI1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2Many,value);
		}

		virtual public bool ExistI1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2One2Many);
			}
		}

		virtual public void RemoveI1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2One2Many);
		}


		virtual public C1 I1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1One2One ,value);
			}
		}

		virtual public bool ExistI1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1One2One);
			}
		}

		virtual public void RemoveI1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2One);
		}


		virtual public global::System.Int32? I1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsInteger, value);
			}
		}

		virtual public bool ExistI1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsInteger);
			}
		}

		virtual public void RemoveI1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsInteger);
		}


		virtual public global::Allors.Extent<C2> I1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2Many2Many, value);
			}
		}

		virtual public void AddI1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2Many2Many, value);
		}

		virtual public void RemoveI1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2Many,value);
		}

		virtual public bool ExistI1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2Many2Many);
			}
		}

		virtual public void RemoveI1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2Many2Many);
		}


		virtual public global::Allors.Extent<I1> I1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1One2Many, value);
			}
		}

		virtual public void AddI1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1One2Many, value);
		}

		virtual public void RemoveI1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2Many,value);
		}

		virtual public bool ExistI1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1One2Many);
			}
		}

		virtual public void RemoveI1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1One2Many);
		}


		virtual public global::Allors.Extent<I1> I1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1Many2Many, value);
			}
		}

		virtual public void AddI1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1Many2Many, value);
		}

		virtual public void RemoveI1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2Many,value);
		}

		virtual public bool ExistI1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1Many2Many);
			}
		}

		virtual public void RemoveI1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1Many2Many);
		}


		virtual public global::System.Boolean? I1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBoolean, value);
			}
		}

		virtual public bool ExistI1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBoolean);
			}
		}

		virtual public void RemoveI1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBoolean);
		}


		virtual public global::System.Decimal? I1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDecimal, value);
			}
		}

		virtual public bool ExistI1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDecimal);
			}
		}

		virtual public void RemoveI1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDecimal);
		}


		virtual public I12 I1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12One2One ,value);
			}
		}

		virtual public bool ExistI1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12One2One);
			}
		}

		virtual public void RemoveI1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2One);
		}


		virtual public I2 I1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2One2One ,value);
			}
		}

		virtual public bool ExistI1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2One2One);
			}
		}

		virtual public void RemoveI1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2One);
		}


		virtual public C2 I1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2One2One ,value);
			}
		}

		virtual public bool ExistI1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2One2One);
			}
		}

		virtual public void RemoveI1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2One);
		}


		virtual public global::Allors.Extent<C1> I1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1One2Many, value);
			}
		}

		virtual public void AddI1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1One2Many, value);
		}

		virtual public void RemoveI1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2Many,value);
		}

		virtual public bool ExistI1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1One2Many);
			}
		}

		virtual public void RemoveI1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1One2Many);
		}


		virtual public global::System.Byte[] I1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBinary, value);
			}
		}

		virtual public bool ExistI1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBinary);
			}
		}

		virtual public void RemoveI1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBinary);
		}


		virtual public global::Allors.Extent<C1> I1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1Many2Many, value);
			}
		}

		virtual public void AddI1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1Many2Many, value);
		}

		virtual public void RemoveI1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2Many,value);
		}

		virtual public bool ExistI1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1Many2Many);
			}
		}

		virtual public void RemoveI1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1Many2Many);
		}


		virtual public global::System.Double? I1AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I1AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsFloat, value);
			}
		}

		virtual public bool ExistI1AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsFloat);
			}
		}

		virtual public void RemoveI1AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsFloat);
		}


		virtual public I1 I1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1One2One ,value);
			}
		}

		virtual public bool ExistI1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1One2One);
			}
		}

		virtual public void RemoveI1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2One);
		}


		virtual public C1 I1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1Many2One ,value);
			}
		}

		virtual public bool ExistI1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1Many2One);
			}
		}

		virtual public void RemoveI1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2One);
		}


		virtual public global::Allors.Extent<I12> I1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12One2Many, value);
			}
		}

		virtual public void AddI1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12One2Many, value);
		}

		virtual public void RemoveI1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2Many,value);
		}

		virtual public bool ExistI1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12One2Many);
			}
		}

		virtual public void RemoveI1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12One2Many);
		}


		virtual public C2 I1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2Many2One ,value);
			}
		}

		virtual public bool ExistI1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2Many2One);
			}
		}

		virtual public void RemoveI1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2One);
		}


		virtual public global::System.Guid? I1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsUnique, value);
			}
		}

		virtual public bool ExistI1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsUnique);
			}
		}

		virtual public void RemoveI1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsUnique);
		}


		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One ,value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One);
		}


		virtual public global::System.Double? I12AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsFloat, value);
			}
		}

		virtual public bool ExistI12AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsFloat);
			}
		}

		virtual public void RemoveI12AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsFloat);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One ,value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One);
		}


		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Many, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Many, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Many,value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Many);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Many);
		}


		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Many, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Many, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Many,value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Many);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Many);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Many, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Many, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Many,value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Many);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Many);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Many, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Many, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Many,value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Many);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Many);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Many, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Many, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Many,value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Many);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Many);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Many, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Many, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Many,value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Many);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Many);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One ,value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One);
		}


		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique);
		}


		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Many, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Many, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Many,value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Many);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Many);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One ,value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One ,value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One ,value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependency);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependency, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependency, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependency,value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependency);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependency);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Many, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Many, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Many,value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Many);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Many);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One ,value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One ,value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One);
		}


		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One ,value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Many, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Many, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Many,value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Many);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Many);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One ,value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One);
		}


		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::Allors.Extent<I2> I2sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC1Many2One);
			}
		}

		virtual public bool ExistI2sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC1Many2One);
			}
		}


		virtual public I2 I2WhereC1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC1One2Many);
			}
		} 

		virtual public bool ExistI2WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC1One2Many);
			}
		}


		virtual public I2 I2WhereC1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC1One2One);
			}
		} 

		virtual public bool ExistI2WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI2sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC1Many2Many);
			}
		}


		virtual public C1 C1WhereC1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1One2One);
			}
		} 

		virtual public bool ExistC1WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1Many2Many);
			}
		}

		virtual public bool ExistC1sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1Many2Many);
			}
		}


		virtual public C1 C1WhereC1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1One2Many);
			}
		} 

		virtual public bool ExistC1WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1Many2One);
			}
		}

		virtual public bool ExistC1sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1Many2One);
			}
		}


		virtual public C2 C2WhereC1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC1One2One);
			}
		} 

		virtual public bool ExistC2WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC1Many2Many);
			}
		}

		virtual public bool ExistC2sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC1Many2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC1Many2One);
			}
		}

		virtual public bool ExistC2sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC1Many2One);
			}
		}


		virtual public C2 C2WhereC1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC1One2Many);
			}
		} 

		virtual public bool ExistC2WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI12sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC1Many2Many);
			}
		}


		virtual public I12 I12WhereC1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC1One2One);
			}
		} 

		virtual public bool ExistI12WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC1One2One);
			}
		}


		virtual public I12 I12WhereC1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC1One2Many);
			}
		} 

		virtual public bool ExistI12WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC1Many2One);
			}
		}

		virtual public bool ExistI12sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC1Many2One);
			}
		}


		virtual public I1 I1WhereC1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC1One2One);
			}
		} 

		virtual public bool ExistI1WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC1One2One);
			}
		}


		virtual public I1 I1WhereC1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC1One2Many);
			}
		} 

		virtual public bool ExistI1WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI1sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC1Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC1Many2One);
			}
		}

		virtual public bool ExistI1sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC1Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI1Many2One);
			}
		}

		virtual public bool ExistI2sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI1Many2Many);
			}
		}


		virtual public I2 I2WhereI1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI1One2One);
			}
		} 

		virtual public bool ExistI2WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI1One2One);
			}
		}


		virtual public I2 I2WhereI1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI1One2Many);
			}
		} 

		virtual public bool ExistI2WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI1One2Many);
			}
		}


		virtual public C1 C1WhereI1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI1One2One);
			}
		} 

		virtual public bool ExistC1WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI1Many2One);
			}
		}

		virtual public bool ExistC1sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI1Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI1Many2Many);
			}
		}


		virtual public C1 C1WhereI1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI1One2Many);
			}
		} 

		virtual public bool ExistC1WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI1Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI1Many2Many);
			}
		}


		virtual public C2 C2WhereI1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI1One2Many);
			}
		} 

		virtual public bool ExistC2WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI1Many2One);
			}
		}

		virtual public bool ExistC2sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI1Many2One);
			}
		}


		virtual public C2 C2WhereI1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI1One2One);
			}
		} 

		virtual public bool ExistC2WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI1Many2One);
			}
		}

		virtual public bool ExistI12sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI1Many2Many);
			}
		}


		virtual public I12 I12WhereI1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI1One2Many);
			}
		} 

		virtual public bool ExistI12WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI1One2Many);
			}
		}


		virtual public I12 I12WhereI1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI1One2One);
			}
		} 

		virtual public bool ExistI12WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1Many2One);
			}
		}

		virtual public bool ExistI1sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1Many2One);
			}
		}


		virtual public I1 I1WhereI1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1One2Many);
			}
		} 

		virtual public bool ExistI1WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1Many2Many);
			}
		}


		virtual public I1 I1WhereI1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1One2One);
			}
		} 

		virtual public bool ExistI1WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}

		virtual public bool ExistI2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}


		virtual public I2 I2WhereI12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		} 

		virtual public bool ExistI2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		}


		virtual public I2 I2WhereI12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2One);
			}
		} 

		virtual public bool ExistI2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}


		virtual public C1 C1WhereI12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		} 

		virtual public bool ExistC1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		}


		virtual public C1 C1WhereI12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2One);
			}
		} 

		virtual public bool ExistC1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}

		virtual public bool ExistC1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}

		virtual public bool ExistC2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}


		virtual public C2 C2WhereI12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2One);
			}
		} 

		virtual public bool ExistC2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}


		virtual public C2 C2WhereI12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		} 

		virtual public bool ExistC2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}


		virtual public I12 I12WhereI12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		} 

		virtual public bool ExistI12WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		}


		virtual public I12 I12WhereI12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2One);
			}
		} 

		virtual public bool ExistI12WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}

		virtual public bool ExistI12sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}

		virtual public bool ExistI1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}


		virtual public I1 I1WhereI12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2One);
			}
		} 

		virtual public bool ExistI1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2One);
			}
		}


		virtual public I1 I1WhereI12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		} 

		virtual public bool ExistI1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		}



		public C1ClassMethod ClassMethod()
		{ 
			return new C1ClassMethod(this);
		}

		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new C1PrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new C1Derive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new C1ApplySecurityOnDerive(this);
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			return new C1OnPostBuild(this);
		}

		public ObjectApplySecurityOnPostBuild ApplySecurityOnPostBuild()
		{ 
			return new C1ApplySecurityOnPostBuild(this);
		}

		public I1InterfaceMethod InterfaceMethod()
		{ 
			return new C1InterfaceMethod(this);
		}

		public S1SuperinterfaceMethod SuperinterfaceMethod()
		{ 
			return new C1SuperinterfaceMethod(this);
		}
	}

	public class C1Meta
	{
		public static readonly C1Meta Instance = new C1Meta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.C1;

		public global::Allors.Meta.RoleType C1I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType C1C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType C1C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType C1C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType C1I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1C2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType AllorsStringMax 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsStringMax;
			}
		} 
		public global::Allors.Meta.RoleType C1C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType C1I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType C1I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C1I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsFloat 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsFloat;
			}
		} 
		public global::Allors.Meta.RoleType C1C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C1AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C1AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType I1I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I1I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1I2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType I1I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I1I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1C2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType I1C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType I1I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType I1I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I1C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I1C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType I1C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsFloat 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsFloat;
			}
		} 
		public global::Allors.Meta.RoleType I1I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I1C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I1I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I1C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I1AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I1AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType I12C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsFloat 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsFloat;
			}
		} 
		public global::Allors.Meta.RoleType I12I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType I12I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType I12I2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12Name;
			}
		} 
		public global::Allors.Meta.RoleType I12C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType I12I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType Dependency 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12Dependency;
			}
		} 
		public global::Allors.Meta.RoleType I12I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType I12I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

		public global::Allors.Meta.AssociationType I2sWhereC1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereC1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereC1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereC1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereC1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereC1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereC1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereC1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereC1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereC1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereC1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereC1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereC1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereC1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereC1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereC1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereC1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereC1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereC1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereC1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI1Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I1Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI1One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I1One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI1Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I1Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI1One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I1One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereDependency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12Dependency;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12One2Many;
			}
		} 

		public global::Allors.Meta.MethodType ClassMethod 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.C1ClassMethod;
			}
		} 
		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 
		public global::Allors.Meta.MethodType OnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectApplySecurityOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType InterfaceMethod 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.I1InterfaceMethod;
			}
		} 
		public global::Allors.Meta.MethodType SuperinterfaceMethod 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.S1SuperinterfaceMethod;
			}
		} 

	}

	public partial class C1Builder : Allors.ObjectBuilder<C1> , DerivableBuilder, I1Builder, global::System.IDisposable
	{		
		public C1Builder(Allors.ISession session) : base(session)
	    {
	    }

				public I1 C1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1One2One(I1 value)
		        {
		            if(this.C1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1One2One = value;
		            return this;
		        }		

				
				public global::System.String C1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsString(global::System.String value)
		        {
				    if(this.C1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsString = value;
		            return this;
		        }	

				public C2 C1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2Many2One(C2 value)
		        {
		            if(this.C1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2Many2One = value;
		            return this;
		        }		

				
				public I2 C1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2One2One(I2 value)
		        {
		            if(this.C1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2One2One = value;
		            return this;
		        }		

				
				public C1 C1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1One2One(C1 value)
		        {
		            if(this.C1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1One2One = value;
		            return this;
		        }		

				
				public I1 C1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1Many2One(I1 value)
		        {
		            if(this.C1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1Many2Many(I1 value)
		        {
					if(this.C1I1Many2Manies == null)
					{
						this.C1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2One2Many(I2 value)
		        {
					if(this.C1I2One2Manies == null)
					{
						this.C1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? C1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> C1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1Many2Many(C1 value)
		        {
					if(this.C1C1Many2Manies == null)
					{
						this.C1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12Many2Many(I12 value)
		        {
					if(this.C1I12Many2Manies == null)
					{
						this.C1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] C1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> C1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12One2Many(I12 value)
		        {
					if(this.C1I12One2Manies == null)
					{
						this.C1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2One2Many(C2 value)
		        {
					if(this.C1C2One2Manies == null)
					{
						this.C1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1One2Many(C1 value)
		        {
					if(this.C1C1One2Manies == null)
					{
						this.C1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String AllorsStringMax {get; set;}

				/// <exclude/>
				public C1Builder WithAllorsStringMax(global::System.String value)
		        {
				    if(this.AllorsStringMax!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsStringMax = value;
		            return this;
		        }	

				public C1 C1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1Many2One(C1 value)
		        {
		            if(this.C1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? C1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBoolean = value;
		            return this;
		        }	

				public I12 C1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12One2One(I12 value)
		        {
		            if(this.C1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12One2One = value;
		            return this;
		        }		

				
				public I12 C1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12Many2One(I12 value)
		        {
		            if(this.C1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2Many2Many(I2 value)
		        {
					if(this.C1I2Many2Manies == null)
					{
						this.C1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? C1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsUnique = value;
		            return this;
		        }	

				public I2 C1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2Many2One(I2 value)
		        {
		            if(this.C1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1One2Many(I1 value)
		        {
					if(this.C1I1One2Manies == null)
					{
						this.C1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2One2One(C2 value)
		        {
		            if(this.C1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? C1AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsFloat(global::System.Double? value)
		        {
				    if(this.C1AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsFloat = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> C1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2Many2Many(C2 value)
		        {
					if(this.C1C2Many2Manies == null)
					{
						this.C1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? C1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsInteger = value;
		            return this;
		        }	

				public I1 I1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1Many2One(I1 value)
		        {
		            if(this.I1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12Many2Many(I12 value)
		        {
					if(this.I1I12Many2Manies == null)
					{
						this.I1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2Many2Many(I2 value)
		        {
					if(this.I1I2Many2Manies == null)
					{
						this.I1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2Many2One(I2 value)
		        {
		            if(this.I1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsString(global::System.String value)
		        {
				    if(this.I1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsString = value;
		            return this;
		        }	

				public I12 I1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12Many2One(I12 value)
		        {
		            if(this.I1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2One2Many(I2 value)
		        {
					if(this.I1I2One2Manies == null)
					{
						this.I1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2One2Many(C2 value)
		        {
					if(this.I1C2One2Manies == null)
					{
						this.I1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1One2One(C1 value)
		        {
		            if(this.I1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? I1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2Many2Many(C2 value)
		        {
					if(this.I1C2Many2Manies == null)
					{
						this.I1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1One2Many(I1 value)
		        {
					if(this.I1I1One2Manies == null)
					{
						this.I1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1Many2Many(I1 value)
		        {
					if(this.I1I1Many2Manies == null)
					{
						this.I1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? I1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Decimal? I1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDecimal = value;
		            return this;
		        }	

				public I12 I1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12One2One(I12 value)
		        {
		            if(this.I1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12One2One = value;
		            return this;
		        }		

				
				public I2 I1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2One2One(I2 value)
		        {
		            if(this.I1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2One2One = value;
		            return this;
		        }		

				
				public C2 I1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2One2One(C2 value)
		        {
		            if(this.I1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1One2Many(C1 value)
		        {
					if(this.I1C1One2Manies == null)
					{
						this.I1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1Many2Many(C1 value)
		        {
					if(this.I1C1Many2Manies == null)
					{
						this.I1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Double? I1AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsFloat(global::System.Double? value)
		        {
				    if(this.I1AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsFloat = value;
		            return this;
		        }	

				public I1 I1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1One2One(I1 value)
		        {
		            if(this.I1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1One2One = value;
		            return this;
		        }		

				
				public C1 I1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1Many2One(C1 value)
		        {
		            if(this.I1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12One2Many(I12 value)
		        {
					if(this.I1I12One2Manies == null)
					{
						this.I1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2Many2One(C2 value)
		        {
		            if(this.I1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsUnique = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsFloat(global::System.Double? value)
		        {
				    if(this.I12AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsFloat = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Manies == null)
					{
						this.I12I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Manies == null)
					{
						this.I12I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Manies == null)
					{
						this.I12C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Manies == null)
					{
						this.I12I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Manies == null)
					{
						this.I12I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C1Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Manies == null)
					{
						this.I12C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Manies == null)
					{
						this.I12I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependencies {get; set;}	

				/// <exclude/>
				public C1Builder WithDependency(I12 value)
		        {
					if(this.Dependencies == null)
					{
						this.Dependencies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Manies == null)
					{
						this.I12I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I12C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Manies == null)
					{
						this.I12C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public C1Builder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public C1Builder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public C1Builder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public C1Builder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class C1s : global::Allors.ObjectsBase<C1>
	{
		public static readonly C1Meta Meta = C1Meta.Instance;

		public C1s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}