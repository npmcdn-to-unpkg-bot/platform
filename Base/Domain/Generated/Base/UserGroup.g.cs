// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class UserGroup : Allors.IObject , UniquelyIdentifiable, Searchable, UserInterfaceable
	{
		public static readonly UserGroupMeta Meta = UserGroupMeta.Instance;

		private readonly IStrategy strategy;

		public UserGroup(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static UserGroup Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (UserGroup) allorsSession.Instantiate(allorsObjectId);		
		}

		public void OnBuild(IObjectBuilder objectBuilder)
		{
			var builder = (UserGroupBuilder)objectBuilder;

			this.Name = builder.Name;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Role = builder.Role;


			if(builder.Members!=null)
			{
				this.Members = builder.Members.ToArray();
			}


			this.Parent = builder.Parent;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Role Role
		{ 
			get
			{
				return (Role) Strategy.GetCompositeRole(Meta.Role);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Role ,value);
			}
		}

		virtual public bool ExistRole
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Role);
			}
		}

		virtual public void RemoveRole()
		{
			Strategy.RemoveCompositeRole(Meta.Role);
		}


		virtual public global::Allors.Extent<User> Members
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Member);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Member, value);
			}
		}

		virtual public void AddMember (User value)
		{
			Strategy.AddCompositeRole(Meta.Member, value);
		}

		virtual public void RemoveMember (User value)
		{
			Strategy.RemoveCompositeRole(Meta.Member,value);
		}

		virtual public bool ExistMembers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Member);
			}
		}

		virtual public void RemoveMembers()
		{
			Strategy.RemoveCompositeRoles(Meta.Member);
		}


		virtual public UserGroup Parent
		{ 
			get
			{
				return (UserGroup) Strategy.GetCompositeRole(Meta.Parent);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Parent ,value);
			}
		}

		virtual public bool ExistParent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Parent);
			}
		}

		virtual public void RemoveParent()
		{
			Strategy.RemoveCompositeRole(Meta.Parent);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}


		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereParent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereParent);
			}
		}

		virtual public bool ExistUserGroupsWhereParent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereParent);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubjectGroup
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubjectGroup);
			}
		}

		virtual public bool ExistAccessControlsWhereSubjectGroup
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubjectGroup);
			}
		}



		public ObjectOnPostBuild OnPostBuild()
		{ 
			return new UserGroupOnPostBuild(this);
		}

		public ObjectApplySecurityOnPostBuild ApplySecurityOnPostBuild()
		{ 
			return new UserGroupApplySecurityOnPostBuild(this);
		}

		public DerivablePrepareDerivation PrepareDerivation()
		{ 
			return new UserGroupPrepareDerivation(this);
		}

		public DerivableDerive Derive()
		{ 
			return new UserGroupDerive(this);
		}

		public DerivableApplySecurityOnDerive ApplySecurityOnDerive()
		{ 
			return new UserGroupApplySecurityOnDerive(this);
		}
	}

	public class UserGroupMeta
	{
		public static readonly UserGroupMeta Instance = new UserGroupMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.UserGroup;

		public global::Allors.Meta.RoleType Role 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserGroupRole;
			}
		} 
		public global::Allors.Meta.RoleType Member 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserGroupMember;
			}
		} 
		public global::Allors.Meta.RoleType Parent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserGroupParent;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserGroupName;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType UserGroupsWhereParent 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.UserGroupParent;
			}
		} 
		public global::Allors.Meta.AssociationType AccessControlsWhereSubjectGroup 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccessControlSubjectGroup;
			}
		} 

		public global::Allors.Meta.MethodType OnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnPostBuild 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.ObjectApplySecurityOnPostBuild;
			}
		} 
		public global::Allors.Meta.MethodType PrepareDerivation 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivablePrepareDerivation;
			}
		} 
		public global::Allors.Meta.MethodType Derive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableDerive;
			}
		} 
		public global::Allors.Meta.MethodType ApplySecurityOnDerive 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.DerivableApplySecurityOnDerive;
			}
		} 

	}

	public partial class UserGroupBuilder : Allors.ObjectBuilder<UserGroup> , UniquelyIdentifiableBuilder, SearchableBuilder, UserInterfaceableBuilder, global::System.IDisposable
	{		
		public UserGroupBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Role Role {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithRole(Role value)
		        {
		            if(this.Role!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Role = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<User> Members {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithMember(User value)
		        {
					if(this.Members == null)
					{
						this.Members = new global::System.Collections.Generic.List<User>(); 
					}
		            this.Members.Add(value);
		            return this;
		        }		

				
				public UserGroup Parent {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithParent(UserGroup value)
		        {
		            if(this.Parent!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Parent = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class UserGroups : global::Allors.ObjectsBase<UserGroup>
	{
		public static readonly UserGroupMeta Meta = UserGroupMeta.Instance;

		public UserGroups(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}