// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class AccessControl : Allors.IObject , Object, Deletable, AccessControlledObject
	{
		public static readonly AccessControlMeta Meta = AccessControlMeta.Instance;

		private readonly IStrategy strategy;

		public AccessControl(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static AccessControl Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AccessControl) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<UserGroup> SubjectGroups
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SubjectGroups);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SubjectGroups, value);
			}
		}

		virtual public void AddSubjectGroup (UserGroup value)
		{
			Strategy.AddCompositeRole(Meta.SubjectGroups, value);
		}

		virtual public void RemoveSubjectGroup (UserGroup value)
		{
			Strategy.RemoveCompositeRole(Meta.SubjectGroups,value);
		}

		virtual public bool ExistSubjectGroups
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SubjectGroups);
			}
		}

		virtual public void RemoveSubjectGroups()
		{
			Strategy.RemoveCompositeRoles(Meta.SubjectGroups);
		}


		virtual public global::Allors.Extent<User> Subjects
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Subjects);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Subjects, value);
			}
		}

		virtual public void AddSubject (User value)
		{
			Strategy.AddCompositeRole(Meta.Subjects, value);
		}

		virtual public void RemoveSubject (User value)
		{
			Strategy.RemoveCompositeRole(Meta.Subjects,value);
		}

		virtual public bool ExistSubjects
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Subjects);
			}
		}

		virtual public void RemoveSubjects()
		{
			Strategy.RemoveCompositeRoles(Meta.Subjects);
		}


		virtual public global::Allors.Extent<SecurityToken> Objects
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Objects);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Objects, value);
			}
		}

		virtual public void AddObject (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.Objects, value);
		}

		virtual public void RemoveObject (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.Objects,value);
		}

		virtual public bool ExistObjects
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Objects);
			}
		}

		virtual public void RemoveObjects()
		{
			Strategy.RemoveCompositeRoles(Meta.Objects);
		}


		virtual public Role Role
		{ 
			get
			{
				return (Role) Strategy.GetCompositeRole(Meta.Role);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Role ,value);
			}
		}

		virtual public bool ExistRole
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Role);
			}
		}

		virtual public void RemoveRole()
		{
			Strategy.RemoveCompositeRole(Meta.Role);
		}


		virtual public global::System.Guid CacheId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.CacheId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CacheId, value);
			}
		}

		virtual public bool ExistCacheId{
			get
			{
				return Strategy.ExistUnitRole(Meta.CacheId);
			}
		}

		virtual public void RemoveCacheId()
		{
			Strategy.RemoveUnitRole(Meta.CacheId);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new AccessControlOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new AccessControlOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new AccessControlOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new AccessControlOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new AccessControlOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new AccessControlOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new AccessControlOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new AccessControlOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new AccessControlOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new AccessControlOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new AccessControlDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new AccessControlDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class AccessControlMeta
	{
		public static readonly AccessControlMeta Instance = new AccessControlMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c4d93d5e-34c3-4731-9d37-47a8e801d9a8"));

		public global::Allors.Meta.RoleType SubjectGroups  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2d9b7157-5409-40d3-bd3e-6911df9aface"));
		public global::Allors.Meta.RoleType Subjects  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e0303a17-bf7a-4a7f-bb4b-0a447c56aaaf"));
		public global::Allors.Meta.RoleType Objects  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ab2b4b9c-87dd-4712-b123-f5f9271c6193"));
		public global::Allors.Meta.RoleType Role  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("370d3d12-3164-4753-8a72-1c604bda1b64"));
		public global::Allors.Meta.RoleType CacheId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4197a6a-9070-4e5e-a8f9-7077574da8db"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class AccessControlBuilder : Allors.ObjectBuilder<AccessControl> , ObjectBuilder, DeletableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public AccessControlBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(AccessControl instance)
		{
			

			if(this.CacheId.HasValue)
			{
				instance.CacheId = this.CacheId.Value;
			}			
		
		
			if(this.SubjectGroups!=null)
			{
				instance.SubjectGroups = this.SubjectGroups.ToArray();
			}
		
			if(this.Subjects!=null)
			{
				instance.Subjects = this.Subjects.ToArray();
			}
		
			if(this.Objects!=null)
			{
				instance.Objects = this.Objects.ToArray();
			}
		

			instance.Role = this.Role;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<UserGroup> SubjectGroups {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSubjectGroup(UserGroup value)
		        {
					if(this.SubjectGroups == null)
					{
						this.SubjectGroups = new global::System.Collections.Generic.List<UserGroup>(); 
					}
		            this.SubjectGroups.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<User> Subjects {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSubject(User value)
		        {
					if(this.Subjects == null)
					{
						this.Subjects = new global::System.Collections.Generic.List<User>(); 
					}
		            this.Subjects.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> Objects {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithObject(SecurityToken value)
		        {
					if(this.Objects == null)
					{
						this.Objects = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.Objects.Add(value);
		            return this;
		        }		

				
				public Role Role {get; set;}

				/// <exclude/>
				public AccessControlBuilder WithRole(Role value)
		        {
		            if(this.Role!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Role = value;
		            return this;
		        }		

				
				public global::System.Guid? CacheId {get; set;}

				/// <exclude/>
				public AccessControlBuilder WithCacheId(global::System.Guid? value)
		        {
				    if(this.CacheId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CacheId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class AccessControls : global::Allors.ObjectsBase<AccessControl>
	{
		public static readonly AccessControlMeta Meta = AccessControlMeta.Instance;

		public AccessControls(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Counter : Allors.IObject , Object, UniquelyIdentifiable
	{
		public static readonly CounterMeta Meta = CounterMeta.Instance;

		private readonly IStrategy strategy;

		public Counter(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Counter Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Counter) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Int32 Value 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Value);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Value, value);
			}
		}

		virtual public bool ExistValue{
			get
			{
				return Strategy.ExistUnitRole(Meta.Value);
			}
		}

		virtual public void RemoveValue()
		{
			Strategy.RemoveUnitRole(Meta.Value);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CounterOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CounterOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CounterOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CounterOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CounterOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CounterOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CounterOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CounterOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CounterOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CounterOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class CounterMeta
	{
		public static readonly CounterMeta Instance = new CounterMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0568354f-e3d9-439e-baac-b7dce31b956a"));

		public global::Allors.Meta.RoleType Value  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ab60f6a7-d913-4377-ab47-97f0fb9d8f3b"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class CounterBuilder : Allors.ObjectBuilder<Counter> , ObjectBuilder, UniquelyIdentifiableBuilder, global::System.IDisposable
	{		
		public CounterBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Counter instance)
		{
			

			if(this.Value.HasValue)
			{
				instance.Value = this.Value.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
		}


				public global::System.Int32? Value {get; set;}

				/// <exclude/>
				public CounterBuilder WithValue(global::System.Int32? value)
		        {
				    if(this.Value!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Value = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CounterBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Counters : global::Allors.ObjectsBase<Counter>
	{
		public static readonly CounterMeta Meta = CounterMeta.Instance;

		public Counters(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Country : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly CountryMeta Meta = CountryMeta.Instance;

		private readonly IStrategy strategy;

		public Country(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Country Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Country) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Currency Currency
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeRole(Meta.Currency);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Currency ,value);
			}
		}

		virtual public bool ExistCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Currency);
			}
		}

		virtual public void RemoveCurrency()
		{
			Strategy.RemoveCompositeRole(Meta.Currency);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames);
		}


		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IsoCode);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsoCode, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsoCode);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(Meta.IsoCode);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Locale> LocalesWhereCountry
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LocalesWhereCountry);
			}
		}

		virtual public bool ExistLocalesWhereCountry
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LocalesWhereCountry);
			}
		}


		virtual public global::Allors.Extent<Place> PlacesWhereCountry
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PlacesWhereCountry);
			}
		}

		virtual public bool ExistPlacesWhereCountry
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PlacesWhereCountry);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CountryOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CountryOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CountryOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CountryOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CountryOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CountryOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CountryOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CountryOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CountryOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CountryOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class CountryMeta
	{
		public static readonly CountryMeta Instance = new CountryMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c22bf60e-6428-4d10-8194-94f7be396f28"));

		public global::Allors.Meta.RoleType Currency  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4ca5a640-5d9e-4910-95ed-6872c7ea13d2"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("60f1f9a3-13d1-485f-bc77-fda1f9ef1815"));
		public global::Allors.Meta.RoleType LocalisedNames  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("99c52c13-ef50-4f68-a32f-fef660aa3044"));
		public global::Allors.Meta.RoleType IsoCode  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4fe997d6-d221-432b-9f09-4f77735c109b"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType LocalesWhereCountry  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bb5904f5-feb0-47eb-903a-0351d55f0d8c"));
		public global::Allors.Meta.AssociationType PlacesWhereCountry  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("dce03fde-fbb1-45e7-b78d-9484fa6487ff"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class CountryBuilder : Allors.ObjectBuilder<Country> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public CountryBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Country instance)
		{

			instance.Name = this.Name;
		
		

			instance.IsoCode = this.IsoCode;
		
		

			instance.Currency = this.Currency;

		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Currency Currency {get; set;}

				/// <exclude/>
				public CountryBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public CountryBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public CountryBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.String IsoCode {get; set;}

				/// <exclude/>
				public CountryBuilder WithIsoCode(global::System.String value)
		        {
				    if(this.IsoCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsoCode = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CountryBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CountryBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Countries : global::Allors.ObjectsBase<Country>
	{
		public static readonly CountryMeta Meta = CountryMeta.Instance;

		public Countries(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Currency : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly CurrencyMeta Meta = CurrencyMeta.Instance;

		private readonly IStrategy strategy;

		public Currency(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Currency Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Currency) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IsoCode);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsoCode, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsoCode);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(Meta.IsoCode);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.String Symbol 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Symbol);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Symbol, value);
			}
		}

		virtual public bool ExistSymbol{
			get
			{
				return Strategy.ExistUnitRole(Meta.Symbol);
			}
		}

		virtual public void RemoveSymbol()
		{
			Strategy.RemoveUnitRole(Meta.Symbol);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Country> CountriesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CountriesWhereCurrency);
			}
		}

		virtual public bool ExistCountriesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CountriesWhereCurrency);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new CurrencyOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new CurrencyOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new CurrencyOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new CurrencyOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new CurrencyOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new CurrencyOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new CurrencyOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new CurrencyOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new CurrencyOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new CurrencyOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class CurrencyMeta
	{
		public static readonly CurrencyMeta Instance = new CurrencyMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fd397adf-40b4-4ef8-b449-dd5a24273df3"));

		public global::Allors.Meta.RoleType IsoCode  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("09d74027-4457-4788-803c-24b857245565"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e7c93764-d634-4187-97ed-9248ea56bab2"));
		public global::Allors.Meta.RoleType Symbol  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("43e13383-ea7f-4aa1-872c-eec0b53a998e"));
		public global::Allors.Meta.RoleType LocalisedNames  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e1301b8f-25cc-4ace-884e-79af1d303f53"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType CountriesWhereCurrency  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("323173ee-385c-4f74-8b78-ff05735460f8"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class CurrencyBuilder : Allors.ObjectBuilder<Currency> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public CurrencyBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Currency instance)
		{

			instance.IsoCode = this.IsoCode;
		
		

			instance.Name = this.Name;
		
		

			instance.Symbol = this.Symbol;
		
		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String IsoCode {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithIsoCode(global::System.String value)
		        {
				    if(this.IsoCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsoCode = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Symbol {get; set;}

				/// <exclude/>
				public CurrencyBuilder WithSymbol(global::System.String value)
		        {
				    if(this.Symbol!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Symbol = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CurrencyBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Currencies : global::Allors.ObjectsBase<Currency>
	{
		public static readonly CurrencyMeta Meta = CurrencyMeta.Instance;

		public Currencies(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Image : Allors.IObject , Object, Deletable
	{
		public static readonly ImageMeta Meta = ImageMeta.Instance;

		private readonly IStrategy strategy;

		public Image(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Image Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Image) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Media Original
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Original);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Original ,value);
			}
		}

		virtual public bool ExistOriginal
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Original);
			}
		}

		virtual public void RemoveOriginal()
		{
			Strategy.RemoveCompositeRole(Meta.Original);
		}


		virtual public Media Responsive
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Responsive);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Responsive ,value);
			}
		}

		virtual public bool ExistResponsive
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Responsive);
			}
		}

		virtual public void RemoveResponsive()
		{
			Strategy.RemoveCompositeRole(Meta.Responsive);
		}


		virtual public global::System.String OriginalFilename 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.OriginalFilename);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OriginalFilename, value);
			}
		}

		virtual public bool ExistOriginalFilename{
			get
			{
				return Strategy.ExistUnitRole(Meta.OriginalFilename);
			}
		}

		virtual public void RemoveOriginalFilename()
		{
			Strategy.RemoveUnitRole(Meta.OriginalFilename);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ImageOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ImageOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ImageOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ImageOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ImageOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ImageOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ImageOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ImageOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ImageOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ImageOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new ImageDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new ImageDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ImageMeta
	{
		public static readonly ImageMeta Instance = new ImageMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("caa2a2de-9454-4812-a69f-9d3728706345"));

		public global::Allors.Meta.RoleType Original  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9ed94fa8-e01e-4f63-9932-d56134616474"));
		public global::Allors.Meta.RoleType Responsive  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ce4c0fbb-5bdb-4c7f-a70a-b930c1020624"));
		public global::Allors.Meta.RoleType OriginalFilename  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2f1c8149-f94a-448b-a832-4994f635c48f"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class ImageBuilder : Allors.ObjectBuilder<Image> , ObjectBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public ImageBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Image instance)
		{

			instance.OriginalFilename = this.OriginalFilename;
		
		

			instance.Original = this.Original;

		

			instance.Responsive = this.Responsive;

		
		}


				public Media Original {get; set;}

				/// <exclude/>
				public ImageBuilder WithOriginal(Media value)
		        {
		            if(this.Original!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Original = value;
		            return this;
		        }		

				
				public Media Responsive {get; set;}

				/// <exclude/>
				public ImageBuilder WithResponsive(Media value)
		        {
		            if(this.Responsive!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Responsive = value;
		            return this;
		        }		

				
				public global::System.String OriginalFilename {get; set;}

				/// <exclude/>
				public ImageBuilder WithOriginalFilename(global::System.String value)
		        {
				    if(this.OriginalFilename!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OriginalFilename = value;
		            return this;
		        }	


	}

	public partial class Images : global::Allors.ObjectsBase<Image>
	{
		public static readonly ImageMeta Meta = ImageMeta.Instance;

		public Images(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Language : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly LanguageMeta Meta = LanguageMeta.Instance;

		private readonly IStrategy strategy;

		public Language(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Language Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Language) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.IsoCode);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsoCode, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsoCode);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(Meta.IsoCode);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Locale> LocalesWhereLanguage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LocalesWhereLanguage);
			}
		}

		virtual public bool ExistLocalesWhereLanguage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LocalesWhereLanguage);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new LanguageOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new LanguageOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new LanguageOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new LanguageOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new LanguageOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new LanguageOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new LanguageOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new LanguageOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new LanguageOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new LanguageOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class LanguageMeta
	{
		public static readonly LanguageMeta Instance = new LanguageMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4a0eca4b-281f-488d-9c7e-497de882c044"));

		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("308d73b0-1b65-40a9-88f1-288848849c51"));
		public global::Allors.Meta.RoleType IsoCode  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("84f904a6-8dcc-4089-bda6-34325ade6367"));
		public global::Allors.Meta.RoleType LocalisedNames  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5e9fcced-727d-42a2-95e6-a0f9d8be4ec7"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType LocalesWhereLanguage  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("af501892-3c83-41d1-826b-f5c4cb1de7fe"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class LanguageBuilder : Allors.ObjectBuilder<Language> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public LanguageBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Language instance)
		{

			instance.Name = this.Name;
		
		

			instance.IsoCode = this.IsoCode;
		
		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Name {get; set;}

				/// <exclude/>
				public LanguageBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String IsoCode {get; set;}

				/// <exclude/>
				public LanguageBuilder WithIsoCode(global::System.String value)
		        {
				    if(this.IsoCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsoCode = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public LanguageBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public LanguageBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public LanguageBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Languages : global::Allors.ObjectsBase<Language>
	{
		public static readonly LanguageMeta Meta = LanguageMeta.Instance;

		public Languages(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Locale : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly LocaleMeta Meta = LocaleMeta.Instance;

		private readonly IStrategy strategy;

		public Locale(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Locale Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Locale) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public Language Language
		{ 
			get
			{
				return (Language) Strategy.GetCompositeRole(Meta.Language);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Language ,value);
			}
		}

		virtual public bool ExistLanguage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Language);
			}
		}

		virtual public void RemoveLanguage()
		{
			Strategy.RemoveCompositeRole(Meta.Language);
		}


		virtual public Country Country
		{ 
			get
			{
				return (Country) Strategy.GetCompositeRole(Meta.Country);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Country ,value);
			}
		}

		virtual public bool ExistCountry
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Country);
			}
		}

		virtual public void RemoveCountry()
		{
			Strategy.RemoveCompositeRole(Meta.Country);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Localised> LocalisedsWhereLocale
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LocalisedsWhereLocale);
			}
		}

		virtual public bool ExistLocalisedsWhereLocale
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LocalisedsWhereLocale);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWhereDefaultLocale
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereDefaultLocale);
			}
		}

		virtual public bool ExistSingletonsWhereDefaultLocale
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereDefaultLocale);
			}
		}


		virtual public Singleton SingletonWhereLocale
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereLocale);
			}
		} 

		virtual public bool ExistSingletonWhereLocale
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereLocale);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new LocaleOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new LocaleOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new LocaleOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new LocaleOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new LocaleOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new LocaleOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new LocaleOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new LocaleOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new LocaleOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new LocaleOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class LocaleMeta
	{
		public static readonly LocaleMeta Instance = new LocaleMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("45033ae6-85b5-4ced-87ce-02518e6c27fd"));

		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("647db2b3-997b-4c3a-9ae2-d49b410933c1"));
		public global::Allors.Meta.RoleType Language  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ed32b12a-00ad-420b-9dfa-f1c6ce773fcd"));
		public global::Allors.Meta.RoleType Country  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b2fc6e06-3881-427e-b4cc-8457a65f8076"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType LocalisedsWhereLocale  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6684d98b-cd43-4612-bf9d-afefe02a0d43"));
		public global::Allors.Meta.AssociationType SingletonsWhereDefaultLocale  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("45a4205d-7c02-40d4-8d97-6d7d59e05def"));
		public global::Allors.Meta.AssociationType SingletonWhereLocale  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("33d5d8b9-3472-48d8-ab1a-83d00d9cb691"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class LocaleBuilder : Allors.ObjectBuilder<Locale> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public LocaleBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Locale instance)
		{

			instance.Name = this.Name;
		
		

			instance.Language = this.Language;

		

			instance.Country = this.Country;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Name {get; set;}

				/// <exclude/>
				public LocaleBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public Language Language {get; set;}

				/// <exclude/>
				public LocaleBuilder WithLanguage(Language value)
		        {
		            if(this.Language!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Language = value;
		            return this;
		        }		

				
				public Country Country {get; set;}

				/// <exclude/>
				public LocaleBuilder WithCountry(Country value)
		        {
		            if(this.Country!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Country = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public LocaleBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public LocaleBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Locales : global::Allors.ObjectsBase<Locale>
	{
		public static readonly LocaleMeta Meta = LocaleMeta.Instance;

		public Locales(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class LocalisedText : Allors.IObject , Object, AccessControlledObject, Localised
	{
		public static readonly LocalisedTextMeta Meta = LocalisedTextMeta.Instance;

		private readonly IStrategy strategy;

		public LocalisedText(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static LocalisedText Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (LocalisedText) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Text 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Text);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Text, value);
			}
		}

		virtual public bool ExistText{
			get
			{
				return Strategy.ExistUnitRole(Meta.Text);
			}
		}

		virtual public void RemoveText()
		{
			Strategy.RemoveUnitRole(Meta.Text);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale ,value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale);
		}



		virtual public Enumeration EnumerationWhereLocalisedName
		{ 
			get
			{
				return (Enumeration) Strategy.GetCompositeAssociation(Meta.EnumerationWhereLocalisedName);
			}
		} 

		virtual public bool ExistEnumerationWhereLocalisedName
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.EnumerationWhereLocalisedName);
			}
		}


		virtual public Country CountryWhereLocalisedName
		{ 
			get
			{
				return (Country) Strategy.GetCompositeAssociation(Meta.CountryWhereLocalisedName);
			}
		} 

		virtual public bool ExistCountryWhereLocalisedName
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CountryWhereLocalisedName);
			}
		}


		virtual public Currency CurrencyWhereLocalisedName
		{ 
			get
			{
				return (Currency) Strategy.GetCompositeAssociation(Meta.CurrencyWhereLocalisedName);
			}
		} 

		virtual public bool ExistCurrencyWhereLocalisedName
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CurrencyWhereLocalisedName);
			}
		}


		virtual public Language LanguageWhereLocalisedName
		{ 
			get
			{
				return (Language) Strategy.GetCompositeAssociation(Meta.LanguageWhereLocalisedName);
			}
		} 

		virtual public bool ExistLanguageWhereLocalisedName
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.LanguageWhereLocalisedName);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new LocalisedTextOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new LocalisedTextOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new LocalisedTextOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new LocalisedTextOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new LocalisedTextOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new LocalisedTextOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new LocalisedTextOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new LocalisedTextOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new LocalisedTextOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new LocalisedTextOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class LocalisedTextMeta
	{
		public static readonly LocalisedTextMeta Instance = new LocalisedTextMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("020f5d4d-4a59-4d7b-865a-d72fc70e4d97"));

		public global::Allors.Meta.RoleType Text  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8d3f68e1-fa6e-414f-aa4d-25fcc2c975d6"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));
		public global::Allors.Meta.RoleType Locale  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d43b92ac-9e6f-4238-9625-1e889be054cf"));

		public global::Allors.Meta.AssociationType EnumerationWhereLocalisedName  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bcf428fd-0263-488c-b9ac-963ceca1c972"));
		public global::Allors.Meta.AssociationType CountryWhereLocalisedName  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9b682612-50f9-43f3-abde-4d0cb5156f0d"));
		public global::Allors.Meta.AssociationType CurrencyWhereLocalisedName  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("06b8f2b2-91f0-4b89-ae19-b47de4524556"));
		public global::Allors.Meta.AssociationType LanguageWhereLocalisedName  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6650af3b-f537-4c2f-afff-6773552315cd"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class LocalisedTextBuilder : Allors.ObjectBuilder<LocalisedText> , ObjectBuilder, AccessControlledObjectBuilder, LocalisedBuilder, global::System.IDisposable
	{		
		public LocalisedTextBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(LocalisedText instance)
		{

			instance.Text = this.Text;
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		

			instance.Locale = this.Locale;

		
		}


				public global::System.String Text {get; set;}

				/// <exclude/>
				public LocalisedTextBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public LocalisedTextBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public LocalisedTextBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public LocalisedTextBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				

	}

	public partial class LocalisedTexts : global::Allors.ObjectsBase<LocalisedText>
	{
		public static readonly LocalisedTextMeta Meta = LocalisedTextMeta.Instance;

		public LocalisedTexts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Login : Allors.IObject , Object, Deletable
	{
		public static readonly LoginMeta Meta = LoginMeta.Instance;

		private readonly IStrategy strategy;

		public Login(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Login Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Login) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Key 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Key);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Key, value);
			}
		}

		virtual public bool ExistKey{
			get
			{
				return Strategy.ExistUnitRole(Meta.Key);
			}
		}

		virtual public void RemoveKey()
		{
			Strategy.RemoveUnitRole(Meta.Key);
		}


		virtual public global::System.String Provider 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Provider);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Provider, value);
			}
		}

		virtual public bool ExistProvider{
			get
			{
				return Strategy.ExistUnitRole(Meta.Provider);
			}
		}

		virtual public void RemoveProvider()
		{
			Strategy.RemoveUnitRole(Meta.Provider);
		}


		virtual public User User
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.User);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.User ,value);
			}
		}

		virtual public bool ExistUser
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.User);
			}
		}

		virtual public void RemoveUser()
		{
			Strategy.RemoveCompositeRole(Meta.User);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new LoginOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new LoginOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new LoginOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new LoginOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new LoginOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new LoginOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new LoginOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new LoginOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new LoginOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new LoginOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new LoginDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new LoginDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class LoginMeta
	{
		public static readonly LoginMeta Instance = new LoginMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ad7277a8-eda4-4128-a990-b47fe43d120a"));

		public global::Allors.Meta.RoleType Key  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e5393717-f46c-4a4c-a87f-3e4684428860"));
		public global::Allors.Meta.RoleType Provider  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c8e3851a-bc57-4acb-934a-4adfc37b1da7"));
		public global::Allors.Meta.RoleType User  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("150daf84-13ce-4b5f-83e6-64c7ef4f81c6"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class LoginBuilder : Allors.ObjectBuilder<Login> , ObjectBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public LoginBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Login instance)
		{

			instance.Key = this.Key;
		
		

			instance.Provider = this.Provider;
		
		

			instance.User = this.User;

		
		}


				public global::System.String Key {get; set;}

				/// <exclude/>
				public LoginBuilder WithKey(global::System.String value)
		        {
				    if(this.Key!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Key = value;
		            return this;
		        }	

				public global::System.String Provider {get; set;}

				/// <exclude/>
				public LoginBuilder WithProvider(global::System.String value)
		        {
				    if(this.Provider!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Provider = value;
		            return this;
		        }	

				public User User {get; set;}

				/// <exclude/>
				public LoginBuilder WithUser(User value)
		        {
		            if(this.User!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.User = value;
		            return this;
		        }		

				

	}

	public partial class Logins : global::Allors.ObjectsBase<Login>
	{
		public static readonly LoginMeta Meta = LoginMeta.Instance;

		public Logins(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Media : Allors.IObject , Object, UniquelyIdentifiable, AccessControlledObject, Deletable
	{
		public static readonly MediaMeta Meta = MediaMeta.Instance;

		private readonly IStrategy strategy;

		public Media(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Media Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Media) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public MediaType MediaType
		{ 
			get
			{
				return (MediaType) Strategy.GetCompositeRole(Meta.MediaType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MediaType ,value);
			}
		}

		virtual public bool ExistMediaType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MediaType);
			}
		}

		virtual public void RemoveMediaType()
		{
			Strategy.RemoveCompositeRole(Meta.MediaType);
		}


		virtual public MediaContent MediaContent
		{ 
			get
			{
				return (MediaContent) Strategy.GetCompositeRole(Meta.MediaContent);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MediaContent ,value);
			}
		}

		virtual public bool ExistMediaContent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MediaContent);
			}
		}

		virtual public void RemoveMediaContent()
		{
			Strategy.RemoveCompositeRole(Meta.MediaContent);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Image> ImagesWhereOriginal
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ImagesWhereOriginal);
			}
		}

		virtual public bool ExistImagesWhereOriginal
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ImagesWhereOriginal);
			}
		}


		virtual public Image ImageWhereResponsive
		{ 
			get
			{
				return (Image) Strategy.GetCompositeAssociation(Meta.ImageWhereResponsive);
			}
		} 

		virtual public bool ExistImageWhereResponsive
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ImageWhereResponsive);
			}
		}


		virtual public global::Allors.Extent<Person> PersonsWherePhoto
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWherePhoto);
			}
		}

		virtual public bool ExistPersonsWherePhoto
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWherePhoto);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereLogo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereLogo);
			}
		}

		virtual public bool ExistOrganisationsWhereLogo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereLogo);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new MediaOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new MediaOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new MediaOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new MediaOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new MediaOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new MediaOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new MediaOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new MediaOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new MediaOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new MediaOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new MediaDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new MediaDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class MediaMeta
	{
		public static readonly MediaMeta Instance = new MediaMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("da5b86a3-4f33-4c0d-965d-f4fbc1179374"));

		public global::Allors.Meta.RoleType MediaType  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f1008c56-b375-4aa8-ac7e-c1f7ef9b2080"));
		public global::Allors.Meta.RoleType MediaContent  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("02fe1ce8-c019-4a40-bd6f-b38d2f47a288"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType ImagesWhereOriginal  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9d45e17e-962b-4f9b-a029-c1c1562e5260"));
		public global::Allors.Meta.AssociationType ImageWhereResponsive  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("386c7cfc-4bec-4564-a7c4-b2c1bccf6ebe"));
		public global::Allors.Meta.AssociationType PersonsWherePhoto  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("912b48f5-215e-4cc0-a83b-56b74d986608"));
		public global::Allors.Meta.AssociationType OrganisationsWhereLogo  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e332003a-0287-4aab-9d95-257146ee4f1c"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class MediaBuilder : Allors.ObjectBuilder<Media> , ObjectBuilder, UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public MediaBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Media instance)
		{
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.MediaType = this.MediaType;

				
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public MediaType MediaType {get; set;}

				/// <exclude/>
				public MediaBuilder WithMediaType(MediaType value)
		        {
		            if(this.MediaType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MediaType = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public MediaBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public MediaBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public MediaBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Medias : global::Allors.ObjectsBase<Media>
	{
		public static readonly MediaMeta Meta = MediaMeta.Instance;

		public Medias(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class MediaContent : Allors.IObject , Object
	{
		public static readonly MediaContentMeta Meta = MediaContentMeta.Instance;

		private readonly IStrategy strategy;

		public MediaContent(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static MediaContent Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (MediaContent) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Byte[] Value 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.Value);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Value, value);
			}
		}

		virtual public bool ExistValue{
			get
			{
				return Strategy.ExistUnitRole(Meta.Value);
			}
		}

		virtual public void RemoveValue()
		{
			Strategy.RemoveUnitRole(Meta.Value);
		}


		virtual public global::System.String Hash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Hash);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Hash, value);
			}
		}

		virtual public bool ExistHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.Hash);
			}
		}

		virtual public void RemoveHash()
		{
			Strategy.RemoveUnitRole(Meta.Hash);
		}



		virtual public global::Allors.Extent<Media> MediasWhereMediaContent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.MediasWhereMediaContent);
			}
		}

		virtual public bool ExistMediasWhereMediaContent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.MediasWhereMediaContent);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new MediaContentOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new MediaContentOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new MediaContentOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new MediaContentOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new MediaContentOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new MediaContentOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new MediaContentOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new MediaContentOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new MediaContentOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new MediaContentOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class MediaContentMeta
	{
		public static readonly MediaContentMeta Instance = new MediaContentMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6c20422e-cb3e-4402-bb40-dacaf584405e"));

		public global::Allors.Meta.RoleType Value  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("85170945-b020-485b-bb6f-c4122992ebfd"));
		public global::Allors.Meta.RoleType Hash  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("70823e7d-5829-4db7-99e0-f6c5f2b0e87b"));

		public global::Allors.Meta.AssociationType MediasWhereMediaContent  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e8537dcf-1bd7-46c4-a37c-077bee6a78a1"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class MediaContentBuilder : Allors.ObjectBuilder<MediaContent> , ObjectBuilder, global::System.IDisposable
	{		
		public MediaContentBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(MediaContent instance)
		{

			instance.Value = this.Value;
		
				
		}


				public global::System.Byte[] Value {get; set;}

				/// <exclude/>
				public MediaContentBuilder WithValue(global::System.Byte[] value)
		        {
				    if(this.Value!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Value = value;
		            return this;
		        }	


	}

	public partial class MediaContents : global::Allors.ObjectsBase<MediaContent>
	{
		public static readonly MediaContentMeta Meta = MediaContentMeta.Instance;

		public MediaContents(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class MediaType : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly MediaTypeMeta Meta = MediaTypeMeta.Instance;

		private readonly IStrategy strategy;

		public MediaType(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static MediaType Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (MediaType) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String DefaultFileExtension 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DefaultFileExtension);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DefaultFileExtension, value);
			}
		}

		virtual public bool ExistDefaultFileExtension{
			get
			{
				return Strategy.ExistUnitRole(Meta.DefaultFileExtension);
			}
		}

		virtual public void RemoveDefaultFileExtension()
		{
			Strategy.RemoveUnitRole(Meta.DefaultFileExtension);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<Media> MediasWhereMediaType
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.MediasWhereMediaType);
			}
		}

		virtual public bool ExistMediasWhereMediaType
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.MediasWhereMediaType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new MediaTypeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new MediaTypeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new MediaTypeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new MediaTypeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new MediaTypeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new MediaTypeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new MediaTypeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new MediaTypeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new MediaTypeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new MediaTypeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class MediaTypeMeta
	{
		public static readonly MediaTypeMeta Instance = new MediaTypeMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("aa7d61f8-6618-47a0-9cf2-e75dd81dbd5b"));

		public global::Allors.Meta.RoleType DefaultFileExtension  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7223c1e2-d722-440b-8345-ab4cfe56d0e9"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("437caa53-1838-4cc4-a403-d65cf3b64358"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType MediasWhereMediaType  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7ca17a9e-0b68-445f-8080-84b08ca0eb2d"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class MediaTypeBuilder : Allors.ObjectBuilder<MediaType> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public MediaTypeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(MediaType instance)
		{

			instance.DefaultFileExtension = this.DefaultFileExtension;
		
		

			instance.Name = this.Name;
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String DefaultFileExtension {get; set;}

				/// <exclude/>
				public MediaTypeBuilder WithDefaultFileExtension(global::System.String value)
		        {
				    if(this.DefaultFileExtension!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DefaultFileExtension = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public MediaTypeBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public MediaTypeBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public MediaTypeBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class MediaTypes : global::Allors.ObjectsBase<MediaType>
	{
		public static readonly MediaTypeMeta Meta = MediaTypeMeta.Instance;

		public MediaTypes(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Permission : Allors.IObject , Object, Deletable, AccessControlledObject
	{
		public static readonly PermissionMeta Meta = PermissionMeta.Instance;

		private readonly IStrategy strategy;

		public Permission(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Permission Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Permission) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Guid OperandTypePointer 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.OperandTypePointer);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OperandTypePointer, value);
			}
		}

		virtual public bool ExistOperandTypePointer{
			get
			{
				return Strategy.ExistUnitRole(Meta.OperandTypePointer);
			}
		}

		virtual public void RemoveOperandTypePointer()
		{
			Strategy.RemoveUnitRole(Meta.OperandTypePointer);
		}


		virtual public global::System.Guid ConcreteClassPointer 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.ConcreteClassPointer);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ConcreteClassPointer, value);
			}
		}

		virtual public bool ExistConcreteClassPointer{
			get
			{
				return Strategy.ExistUnitRole(Meta.ConcreteClassPointer);
			}
		}

		virtual public void RemoveConcreteClassPointer()
		{
			Strategy.RemoveUnitRole(Meta.ConcreteClassPointer);
		}


		virtual public global::System.Int32 OperationEnum 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.OperationEnum);
			}
			set
			{
				Strategy.SetUnitRole(Meta.OperationEnum, value);
			}
		}

		virtual public bool ExistOperationEnum{
			get
			{
				return Strategy.ExistUnitRole(Meta.OperationEnum);
			}
		}

		virtual public void RemoveOperationEnum()
		{
			Strategy.RemoveUnitRole(Meta.OperationEnum);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<AccessControlledObject> AccessControlledObjectsWhereDeniedPermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlledObjectsWhereDeniedPermission);
			}
		}

		virtual public bool ExistAccessControlledObjectsWhereDeniedPermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlledObjectsWhereDeniedPermission);
			}
		}


		virtual public global::Allors.Extent<ObjectState> ObjectStatesWhereDeniedPermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ObjectStatesWhereDeniedPermission);
			}
		}

		virtual public bool ExistObjectStatesWhereDeniedPermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ObjectStatesWhereDeniedPermission);
			}
		}


		virtual public global::Allors.Extent<Role> RolesWherePermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RolesWherePermission);
			}
		}

		virtual public bool ExistRolesWherePermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RolesWherePermission);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PermissionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PermissionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PermissionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PermissionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PermissionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PermissionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PermissionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PermissionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PermissionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PermissionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PermissionDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PermissionDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class PermissionMeta
	{
		public static readonly PermissionMeta Instance = new PermissionMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7fded183-3337-4196-afb0-3266377944bc"));

		public global::Allors.Meta.RoleType OperandTypePointer  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3fd81194-2f6f-43e7-9c6b-91f5e3e118ac"));
		public global::Allors.Meta.RoleType ConcreteClassPointer  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cadaca05-55ba-4a13-8758-786ff29c8e46"));
		public global::Allors.Meta.RoleType OperationEnum  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d29ce0ed-fba8-409d-8675-dc95e1566cfb"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType AccessControlledObjectsWhereDeniedPermission  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("267053f0-43b4-4cc7-a0e2-103992b2d0c5"));
		public global::Allors.Meta.AssociationType ObjectStatesWhereDeniedPermission  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fca0f3f6-bdd6-4405-93b3-35dd769bff0e"));
		public global::Allors.Meta.AssociationType RolesWherePermission  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("47af1a0f-497d-4a19-887b-79e5fb77c8bd"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class PermissionBuilder : Allors.ObjectBuilder<Permission> , ObjectBuilder, DeletableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public PermissionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Permission instance)
		{
			

			if(this.OperandTypePointer.HasValue)
			{
				instance.OperandTypePointer = this.OperandTypePointer.Value;
			}			
		
		
			

			if(this.ConcreteClassPointer.HasValue)
			{
				instance.ConcreteClassPointer = this.ConcreteClassPointer.Value;
			}			
		
		
			

			if(this.OperationEnum.HasValue)
			{
				instance.OperationEnum = this.OperationEnum.Value;
			}			
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Guid? OperandTypePointer {get; set;}

				/// <exclude/>
				public PermissionBuilder WithOperandTypePointer(global::System.Guid? value)
		        {
				    if(this.OperandTypePointer!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OperandTypePointer = value;
		            return this;
		        }	

				public global::System.Guid? ConcreteClassPointer {get; set;}

				/// <exclude/>
				public PermissionBuilder WithConcreteClassPointer(global::System.Guid? value)
		        {
				    if(this.ConcreteClassPointer!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ConcreteClassPointer = value;
		            return this;
		        }	

				public global::System.Int32? OperationEnum {get; set;}

				/// <exclude/>
				public PermissionBuilder WithOperationEnum(global::System.Int32? value)
		        {
				    if(this.OperationEnum!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OperationEnum = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PermissionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PermissionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Permissions : global::Allors.ObjectsBase<Permission>
	{
		public static readonly PermissionMeta Meta = PermissionMeta.Instance;

		public Permissions(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Person : Allors.IObject , Object, User, AccessControlledObject, UniquelyIdentifiable, Printable, Deletable
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		private readonly IStrategy strategy;

		public Person(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Person Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Person) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String LastName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.LastName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastName, value);
			}
		}

		virtual public bool ExistLastName{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastName);
			}
		}

		virtual public void RemoveLastName()
		{
			Strategy.RemoveUnitRole(Meta.LastName);
		}


		virtual public global::System.String MiddleName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.MiddleName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MiddleName, value);
			}
		}

		virtual public bool ExistMiddleName{
			get
			{
				return Strategy.ExistUnitRole(Meta.MiddleName);
			}
		}

		virtual public void RemoveMiddleName()
		{
			Strategy.RemoveUnitRole(Meta.MiddleName);
		}


		virtual public global::System.String FirstName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FirstName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FirstName, value);
			}
		}

		virtual public bool ExistFirstName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FirstName);
			}
		}

		virtual public void RemoveFirstName()
		{
			Strategy.RemoveUnitRole(Meta.FirstName);
		}


		virtual public Address MainAddress
		{ 
			get
			{
				return (Address) Strategy.GetCompositeRole(Meta.MainAddress);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MainAddress ,value);
			}
		}

		virtual public bool ExistMainAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MainAddress);
			}
		}

		virtual public void RemoveMainAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MainAddress);
		}


		virtual public global::System.String TinyMCEText 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.TinyMCEText);
			}
			set
			{
				Strategy.SetUnitRole(Meta.TinyMCEText, value);
			}
		}

		virtual public bool ExistTinyMCEText{
			get
			{
				return Strategy.ExistUnitRole(Meta.TinyMCEText);
			}
		}

		virtual public void RemoveTinyMCEText()
		{
			Strategy.RemoveUnitRole(Meta.TinyMCEText);
		}


		virtual public global::System.String Text 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Text);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Text, value);
			}
		}

		virtual public bool ExistText{
			get
			{
				return Strategy.ExistUnitRole(Meta.Text);
			}
		}

		virtual public void RemoveText()
		{
			Strategy.RemoveUnitRole(Meta.Text);
		}


		virtual public global::System.Int32? Age 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Age);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Age, value);
			}
		}

		virtual public bool ExistAge{
			get
			{
				return Strategy.ExistUnitRole(Meta.Age);
			}
		}

		virtual public void RemoveAge()
		{
			Strategy.RemoveUnitRole(Meta.Age);
		}


		virtual public global::System.Boolean? IsStudent 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsStudent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsStudent, value);
			}
		}

		virtual public bool ExistIsStudent{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsStudent);
			}
		}

		virtual public void RemoveIsStudent()
		{
			Strategy.RemoveUnitRole(Meta.IsStudent);
		}


		virtual public MailboxAddress MailboxAddress
		{ 
			get
			{
				return (MailboxAddress) Strategy.GetCompositeRole(Meta.MailboxAddress);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MailboxAddress ,value);
			}
		}

		virtual public bool ExistMailboxAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MailboxAddress);
			}
		}

		virtual public void RemoveMailboxAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MailboxAddress);
		}


		virtual public Gender Gender
		{ 
			get
			{
				return (Gender) Strategy.GetCompositeRole(Meta.Gender);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Gender ,value);
			}
		}

		virtual public bool ExistGender
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Gender);
			}
		}

		virtual public void RemoveGender()
		{
			Strategy.RemoveCompositeRole(Meta.Gender);
		}


		virtual public global::System.String FullName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.FullName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FullName, value);
			}
		}

		virtual public bool ExistFullName{
			get
			{
				return Strategy.ExistUnitRole(Meta.FullName);
			}
		}

		virtual public void RemoveFullName()
		{
			Strategy.RemoveUnitRole(Meta.FullName);
		}


		virtual public global::System.Int32? ShirtSize 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.ShirtSize);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ShirtSize, value);
			}
		}

		virtual public bool ExistShirtSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.ShirtSize);
			}
		}

		virtual public void RemoveShirtSize()
		{
			Strategy.RemoveUnitRole(Meta.ShirtSize);
		}


		virtual public global::System.String CKEditorText 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.CKEditorText);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CKEditorText, value);
			}
		}

		virtual public bool ExistCKEditorText{
			get
			{
				return Strategy.ExistUnitRole(Meta.CKEditorText);
			}
		}

		virtual public void RemoveCKEditorText()
		{
			Strategy.RemoveUnitRole(Meta.CKEditorText);
		}


		virtual public global::System.Boolean? IsMarried 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsMarried);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsMarried, value);
			}
		}

		virtual public bool ExistIsMarried{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsMarried);
			}
		}

		virtual public void RemoveIsMarried()
		{
			Strategy.RemoveUnitRole(Meta.IsMarried);
		}


		virtual public global::System.DateTime? BirthDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.BirthDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BirthDate, value);
			}
		}

		virtual public bool ExistBirthDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.BirthDate);
			}
		}

		virtual public void RemoveBirthDate()
		{
			Strategy.RemoveUnitRole(Meta.BirthDate);
		}


		virtual public global::System.Decimal? Weight 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Weight);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Weight, value);
			}
		}

		virtual public bool ExistWeight{
			get
			{
				return Strategy.ExistUnitRole(Meta.Weight);
			}
		}

		virtual public void RemoveWeight()
		{
			Strategy.RemoveUnitRole(Meta.Weight);
		}


		virtual public Media Photo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Photo);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Photo ,value);
			}
		}

		virtual public bool ExistPhoto
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Photo);
			}
		}

		virtual public void RemovePhoto()
		{
			Strategy.RemoveCompositeRole(Meta.Photo);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Addresses);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Addresses, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Addresses, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Addresses,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Addresses);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Addresses);
		}


		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UserEmailConfirmed);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmailConfirmed, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmailConfirmed);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			Strategy.RemoveUnitRole(Meta.UserEmailConfirmed);
		}


		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserName, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserName);
			}
		}

		virtual public void RemoveUserName()
		{
			Strategy.RemoveUnitRole(Meta.UserName);
		}


		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserEmail);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmail, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmail);
			}
		}

		virtual public void RemoveUserEmail()
		{
			Strategy.RemoveUnitRole(Meta.UserEmail);
		}


		virtual public global::System.String UserPasswordHash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserPasswordHash);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserPasswordHash, value);
			}
		}

		virtual public bool ExistUserPasswordHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserPasswordHash);
			}
		}

		virtual public void RemoveUserPasswordHash()
		{
			Strategy.RemoveUnitRole(Meta.UserPasswordHash);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken ,value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale ,value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public global::System.String PrintContent 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PrintContent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PrintContent, value);
			}
		}

		virtual public bool ExistPrintContent{
			get
			{
				return Strategy.ExistUnitRole(Meta.PrintContent);
			}
		}

		virtual public void RemovePrintContent()
		{
			Strategy.RemoveUnitRole(Meta.PrintContent);
		}



		virtual public global::Allors.Extent<Organisation> OrganisationsWhereShareholder
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereShareholder);
			}
		}

		virtual public bool ExistOrganisationsWhereShareholder
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereShareholder);
			}
		}


		virtual public Organisation OrganisationWhereEmployee
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereEmployee);
			}
		} 

		virtual public bool ExistOrganisationWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereEmployee);
			}
		}


		virtual public Organisation OrganisationWhereOwner
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereOwner);
			}
		} 

		virtual public bool ExistOrganisationWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereOwner);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereEmployee
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereEmployee);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereEmployee);
			}
		}


		virtual public global::Allors.Extent<StatefulCompany> StatefulCompaniesWhereManager
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StatefulCompaniesWhereManager);
			}
		}

		virtual public bool ExistStatefulCompaniesWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StatefulCompaniesWhereManager);
			}
		}


		virtual public BadUI BadUIWherePersonMany
		{ 
			get
			{
				return (BadUI) Strategy.GetCompositeAssociation(Meta.BadUIWherePersonMany);
			}
		} 

		virtual public bool ExistBadUIWherePersonMany
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.BadUIWherePersonMany);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWherePersonOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWherePersonOne);
			}
		}

		virtual public bool ExistBadUIsWherePersonOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWherePersonOne);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubject);
			}
		}

		virtual public bool ExistAccessControlsWhereSubject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubject);
			}
		}


		virtual public global::Allors.Extent<Login> LoginsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LoginsWhereUser);
			}
		}

		virtual public bool ExistLoginsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LoginsWhereUser);
			}
		}


		virtual public Singleton SingletonWhereGuest
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereGuest);
			}
		} 

		virtual public bool ExistSingletonWhereGuest
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereGuest);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereMember
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereMember);
			}
		}

		virtual public bool ExistUserGroupsWhereMember
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereMember);
			}
		}


		virtual public global::Allors.Extent<PrintQueue> PrintQueuesWherePrintable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PrintQueuesWherePrintable);
			}
		}

		virtual public bool ExistPrintQueuesWherePrintable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PrintQueuesWherePrintable);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PersonOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PersonOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PersonOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PersonOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PersonOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PersonOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PersonOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PersonOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PersonOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PersonOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new PersonDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new PersonDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class PersonMeta
	{
		public static readonly PersonMeta Instance = new PersonMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c799ca62-a554-467d-9aa2-1663293bb37f"));

		public global::Allors.Meta.RoleType LastName  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ace04ad8-bf64-4fc3-8216-14a720d3105d"));
		public global::Allors.Meta.RoleType MiddleName  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a86fc7a6-dedd-4da9-a250-75c9ec730d22"));
		public global::Allors.Meta.RoleType FirstName  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f10ea049-6d24-4ca2-8efa-032fcf3000b3"));
		public global::Allors.Meta.RoleType MainAddress  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("86685c44-5196-46dd-9260-e40a434e9a52"));
		public global::Allors.Meta.RoleType TinyMCEText  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ad249eb0-6cf2-4bcb-b3d1-3ff1282cd2f9"));
		public global::Allors.Meta.RoleType Text  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("93d01c4a-0aa3-4d7c-a6d8-139b8ed1ffcc"));
		public global::Allors.Meta.RoleType Age  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fb6dcca2-14a6-4b00-bd3e-81acf59fbbe2"));
		public global::Allors.Meta.RoleType IsStudent  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("abd2a4b3-4b17-48d4-b465-0ffcb5a2664d"));
		public global::Allors.Meta.RoleType MailboxAddress  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5a472c98-481f-407c-b53e-eaaa7e7a5340"));
		public global::Allors.Meta.RoleType Gender  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("34704a90-d513-4fe2-a1ed-ad6d89399c73"));
		public global::Allors.Meta.RoleType FullName  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e431d53c-37ed-4fde-86a9-755f354c1d75"));
		public global::Allors.Meta.RoleType ShirtSize  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("66e20063-ab51-417a-8ce4-135bb6e115c1"));
		public global::Allors.Meta.RoleType CKEditorText  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cc14daec-604d-4ca6-9908-a57c10ba1403"));
		public global::Allors.Meta.RoleType IsMarried  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("656f11e4-7652-4b4d-9dda-28cfe16333ec"));
		public global::Allors.Meta.RoleType BirthDate  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0ffd9c62-efc6-4438-aaa3-755e4c637c21"));
		public global::Allors.Meta.RoleType Weight  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0aab73c3-f997-4dd9-885a-2c1c892adb0e"));
		public global::Allors.Meta.RoleType Photo  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f6624fac-db8e-4fb2-9e86-18021b59d31d"));
		public global::Allors.Meta.RoleType Addresses  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c922b44f-6c6f-4e8b-901d-6558e79bb558"));
		public global::Allors.Meta.RoleType UserEmailConfirmed  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1b1409b8-add7-494c-a895-002fc969ac7b"));
		public global::Allors.Meta.RoleType UserName  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3b7d40a0-18ea-4018-b797-6417723e1890"));
		public global::Allors.Meta.RoleType UserEmail  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("58e35754-91a9-4956-aa66-ca48d05c7042"));
		public global::Allors.Meta.RoleType UserPasswordHash  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("75ee3ec2-02bb-4666-a6f0-bac84c844dfa"));
		public global::Allors.Meta.RoleType OwnerSecurityToken  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2acda9b3-89e8-475f-9d70-b9cde334409c"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));
		public global::Allors.Meta.RoleType Locale  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d43b92ac-9e6f-4238-9625-1e889be054cf"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));
		public global::Allors.Meta.RoleType PrintContent  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8d530dcd-2c3b-4d1d-8acc-9963338968ed"));

		public global::Allors.Meta.AssociationType OrganisationsWhereShareholder  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4fdd9abb-f2e7-4f07-860e-27b4207224bd"));
		public global::Allors.Meta.AssociationType OrganisationWhereEmployee  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b031ef1a-0102-4b19-b85d-aa9c404596c3"));
		public global::Allors.Meta.AssociationType OrganisationWhereOwner  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3820f65f-0e79-4f30-a973-5d17dca6ad33"));
		public global::Allors.Meta.AssociationType StatefulCompaniesWhereEmployee  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("be566287-a26d-46fb-a4f2-1fc8bf1c1de4"));
		public global::Allors.Meta.AssociationType StatefulCompaniesWhereManager  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("de4a92c8-4e08-4f37-9d6c-321dcce89e1c"));
		public global::Allors.Meta.AssociationType BadUIWherePersonMany  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0ce20e7c-7be0-4c07-a179-e8d0e77f3de1"));
		public global::Allors.Meta.AssociationType BadUIsWherePersonOne  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5ed577d8-f048-42b8-9fb4-38b88ebf35f1"));
		public global::Allors.Meta.AssociationType AccessControlsWhereSubject  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3d74101d-97bc-46fb-9548-96cb7aa01b39"));
		public global::Allors.Meta.AssociationType LoginsWhereUser  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e8091111-9f92-41a9-b4b1-4e8f277ea575"));
		public global::Allors.Meta.AssociationType SingletonWhereGuest  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c92466b5-55ba-496a-8880-2821f32f8f8e"));
		public global::Allors.Meta.AssociationType UserGroupsWhereMember  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1e2d1e31-ed80-4435-8850-7663d9c5f41d"));
		public global::Allors.Meta.AssociationType PrintQueuesWherePrintable  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9124aa32-3ed5-4a1a-8988-961eea280b86"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , ObjectBuilder, UserBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, PrintableBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Person instance)
		{

			instance.LastName = this.LastName;
		
		

			instance.MiddleName = this.MiddleName;
		
		

			instance.FirstName = this.FirstName;
		
		

			instance.TinyMCEText = this.TinyMCEText;
		
		

			instance.Text = this.Text;
		
		
			

			if(this.Age.HasValue)
			{
				instance.Age = this.Age.Value;
			}			
		
		
			

			if(this.IsStudent.HasValue)
			{
				instance.IsStudent = this.IsStudent.Value;
			}			
		
				
			

			if(this.ShirtSize.HasValue)
			{
				instance.ShirtSize = this.ShirtSize.Value;
			}			
		
		

			instance.CKEditorText = this.CKEditorText;
		
		
			

			if(this.IsMarried.HasValue)
			{
				instance.IsMarried = this.IsMarried.Value;
			}			
		
		
			

			if(this.BirthDate.HasValue)
			{
				instance.BirthDate = this.BirthDate.Value;
			}			
		
		
			

			if(this.Weight.HasValue)
			{
				instance.Weight = this.Weight.Value;
			}			
		
		
			

			if(this.UserEmailConfirmed.HasValue)
			{
				instance.UserEmailConfirmed = this.UserEmailConfirmed.Value;
			}			
		
		

			instance.UserName = this.UserName;
		
		

			instance.UserEmail = this.UserEmail;
		
		

			instance.UserPasswordHash = this.UserPasswordHash;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
				

			instance.MainAddress = this.MainAddress;

		

			instance.MailboxAddress = this.MailboxAddress;

		

			instance.Gender = this.Gender;

		

			instance.Photo = this.Photo;

		
			if(this.Addresses!=null)
			{
				instance.Addresses = this.Addresses.ToArray();
			}
				
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		

			instance.Locale = this.Locale;

		
		}


				public global::System.String LastName {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public Address MainAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMainAddress(Address value)
		        {
		            if(this.MainAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MainAddress = value;
		            return this;
		        }		

				
				public global::System.String TinyMCEText {get; set;}

				/// <exclude/>
				public PersonBuilder WithTinyMCEText(global::System.String value)
		        {
				    if(this.TinyMCEText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TinyMCEText = value;
		            return this;
		        }	

				public global::System.String Text {get; set;}

				/// <exclude/>
				public PersonBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.Int32? Age {get; set;}

				/// <exclude/>
				public PersonBuilder WithAge(global::System.Int32? value)
		        {
				    if(this.Age!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Age = value;
		            return this;
		        }	

				public global::System.Boolean? IsStudent {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsStudent(global::System.Boolean? value)
		        {
				    if(this.IsStudent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsStudent = value;
		            return this;
		        }	

				public MailboxAddress MailboxAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithMailboxAddress(MailboxAddress value)
		        {
		            if(this.MailboxAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MailboxAddress = value;
		            return this;
		        }		

				
				public Gender Gender {get; set;}

				/// <exclude/>
				public PersonBuilder WithGender(Gender value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.Int32? ShirtSize {get; set;}

				/// <exclude/>
				public PersonBuilder WithShirtSize(global::System.Int32? value)
		        {
				    if(this.ShirtSize!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShirtSize = value;
		            return this;
		        }	

				public global::System.String CKEditorText {get; set;}

				/// <exclude/>
				public PersonBuilder WithCKEditorText(global::System.String value)
		        {
				    if(this.CKEditorText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CKEditorText = value;
		            return this;
		        }	

				public global::System.Boolean? IsMarried {get; set;}

				/// <exclude/>
				public PersonBuilder WithIsMarried(global::System.Boolean? value)
		        {
				    if(this.IsMarried!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsMarried = value;
		            return this;
		        }	

				public global::System.DateTime? BirthDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithBirthDate(global::System.DateTime? value)
		        {
				    if(this.BirthDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BirthDate = value;
		            return this;
		        }	

				public global::System.Decimal? Weight {get; set;}

				/// <exclude/>
				public PersonBuilder WithWeight(global::System.Decimal? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public Media Photo {get; set;}

				/// <exclude/>
				public PersonBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public PersonBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PersonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public PersonBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PersonBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Persons : global::Allors.ObjectsBase<Person>
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		public Persons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class PrintQueue : Allors.IObject , Object, AccessControlledObject, UniquelyIdentifiable
	{
		public static readonly PrintQueueMeta Meta = PrintQueueMeta.Instance;

		private readonly IStrategy strategy;

		public PrintQueue(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static PrintQueue Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PrintQueue) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Printable> Printables
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Printables);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Printables, value);
			}
		}

		virtual public void AddPrintable (Printable value)
		{
			Strategy.AddCompositeRole(Meta.Printables, value);
		}

		virtual public void RemovePrintable (Printable value)
		{
			Strategy.RemoveCompositeRole(Meta.Printables,value);
		}

		virtual public bool ExistPrintables
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Printables);
			}
		}

		virtual public void RemovePrintables()
		{
			Strategy.RemoveCompositeRoles(Meta.Printables);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public Singleton SingletonWhereDefaultPrintQueue
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereDefaultPrintQueue);
			}
		} 

		virtual public bool ExistSingletonWhereDefaultPrintQueue
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereDefaultPrintQueue);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PrintQueueOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PrintQueueOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PrintQueueOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PrintQueueOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PrintQueueOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PrintQueueOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PrintQueueOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PrintQueueOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PrintQueueOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PrintQueueOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class PrintQueueMeta
	{
		public static readonly PrintQueueMeta Instance = new PrintQueueMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b45705e3-0dc6-4296-824a-76bb6af223d3"));

		public global::Allors.Meta.RoleType Printables  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("432f8b01-0bb8-4bd2-8a41-107b6d043a40"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("285adf08-7f1b-4dfe-8db5-cbf4a9d0cb59"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));

		public global::Allors.Meta.AssociationType SingletonWhereDefaultPrintQueue  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2f79ecfe-5fd4-44d1-9c39-457bb3dc6815"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class PrintQueueBuilder : Allors.ObjectBuilder<PrintQueue> , ObjectBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, global::System.IDisposable
	{		
		public PrintQueueBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(PrintQueue instance)
		{

			instance.Name = this.Name;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.Printables!=null)
			{
				instance.Printables = this.Printables.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<Printable> Printables {get; set;}	

				/// <exclude/>
				public PrintQueueBuilder WithPrintable(Printable value)
		        {
					if(this.Printables == null)
					{
						this.Printables = new global::System.Collections.Generic.List<Printable>(); 
					}
		            this.Printables.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public PrintQueueBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PrintQueueBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PrintQueueBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PrintQueueBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class PrintQueues : global::Allors.ObjectsBase<PrintQueue>
	{
		public static readonly PrintQueueMeta Meta = PrintQueueMeta.Instance;

		public PrintQueues(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Role : Allors.IObject , Object, AccessControlledObject, UniquelyIdentifiable
	{
		public static readonly RoleMeta Meta = RoleMeta.Instance;

		private readonly IStrategy strategy;

		public Role(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Role Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Role) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Permission> Permissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Permissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Permissions, value);
			}
		}

		virtual public void AddPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.Permissions, value);
		}

		virtual public void RemovePermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.Permissions,value);
		}

		virtual public bool ExistPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Permissions);
			}
		}

		virtual public void RemovePermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.Permissions);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereRole
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereRole);
			}
		}

		virtual public bool ExistAccessControlsWhereRole
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereRole);
			}
		}


		virtual public UserGroup UserGroupWhereRole
		{ 
			get
			{
				return (UserGroup) Strategy.GetCompositeAssociation(Meta.UserGroupWhereRole);
			}
		} 

		virtual public bool ExistUserGroupWhereRole
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.UserGroupWhereRole);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new RoleOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new RoleOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new RoleOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new RoleOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new RoleOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new RoleOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new RoleOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new RoleOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new RoleOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new RoleOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class RoleMeta
	{
		public static readonly RoleMeta Instance = new RoleMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("af6fe5f4-e5bc-4099-bcd1-97528af6505d"));

		public global::Allors.Meta.RoleType Permissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7e6a71b0-2194-47f8-b562-cb4a15e335b6"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8d87c74f-53ed-4e1d-a2ea-12190ac233d2"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));

		public global::Allors.Meta.AssociationType AccessControlsWhereRole  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ec79e57d-be81-430a-b12f-08ffd1e94af3"));
		public global::Allors.Meta.AssociationType UserGroupWhereRole  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("46f531f2-b211-4f2a-902d-7198cda9c50d"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class RoleBuilder : Allors.ObjectBuilder<Role> , ObjectBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, global::System.IDisposable
	{		
		public RoleBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Role instance)
		{

			instance.Name = this.Name;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.Permissions!=null)
			{
				instance.Permissions = this.Permissions.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<Permission> Permissions {get; set;}	

				/// <exclude/>
				public RoleBuilder WithPermission(Permission value)
		        {
					if(this.Permissions == null)
					{
						this.Permissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.Permissions.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public RoleBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public RoleBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public RoleBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public RoleBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Roles : global::Allors.ObjectsBase<Role>
	{
		public static readonly RoleMeta Meta = RoleMeta.Instance;

		public Roles(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SecurityToken : Allors.IObject , Object, Deletable
	{
		public static readonly SecurityTokenMeta Meta = SecurityTokenMeta.Instance;

		private readonly IStrategy strategy;

		public SecurityToken(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SecurityToken Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SecurityToken) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<AccessControlledObject> AccessControlledObjectsWhereSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlledObjectsWhereSecurityToken);
			}
		}

		virtual public bool ExistAccessControlledObjectsWhereSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlledObjectsWhereSecurityToken);
			}
		}


		virtual public SecurityTokenOwner SecurityTokenOwnerWhereOwnerSecurityToken
		{ 
			get
			{
				return (SecurityTokenOwner) Strategy.GetCompositeAssociation(Meta.SecurityTokenOwnerWhereOwnerSecurityToken);
			}
		} 

		virtual public bool ExistSecurityTokenOwnerWhereOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SecurityTokenOwnerWhereOwnerSecurityToken);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereObject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereObject);
			}
		}

		virtual public bool ExistAccessControlsWhereObject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereObject);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWhereAdministratorSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereAdministratorSecurityToken);
			}
		}

		virtual public bool ExistSingletonsWhereAdministratorSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereAdministratorSecurityToken);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWhereDefaultSecurityToken
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereDefaultSecurityToken);
			}
		}

		virtual public bool ExistSingletonsWhereDefaultSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereDefaultSecurityToken);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SecurityTokenOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SecurityTokenOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SecurityTokenOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SecurityTokenOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SecurityTokenOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SecurityTokenOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SecurityTokenOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SecurityTokenOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SecurityTokenOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SecurityTokenOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new SecurityTokenDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new SecurityTokenDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class SecurityTokenMeta
	{
		public static readonly SecurityTokenMeta Instance = new SecurityTokenMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a53f1aed-0e3f-4c3c-9600-dc579cccf893"));

		public global::Allors.Meta.AssociationType AccessControlledObjectsWhereSecurityToken  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1739db0d-fe6b-42e1-a6a5-286536ff4f56"));
		public global::Allors.Meta.AssociationType SecurityTokenOwnerWhereOwnerSecurityToken  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cdc21c1c-918e-4622-a01f-a3de06a8c802"));
		public global::Allors.Meta.AssociationType AccessControlsWhereObject  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cae9e5c2-afa1-46f4-b930-69d4e810038f"));
		public global::Allors.Meta.AssociationType SingletonsWhereAdministratorSecurityToken  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6247e69d-4789-4ee0-a75b-c2de44a5fcce"));
		public global::Allors.Meta.AssociationType SingletonsWhereDefaultSecurityToken  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("33f17e75-99cc-417e-99f3-c29080f08f0a"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class SecurityTokenBuilder : Allors.ObjectBuilder<SecurityToken> , ObjectBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public SecurityTokenBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SecurityToken instance)
		{
		}


	}

	public partial class SecurityTokens : global::Allors.ObjectsBase<SecurityToken>
	{
		public static readonly SecurityTokenMeta Meta = SecurityTokenMeta.Instance;

		public SecurityTokens(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Singleton : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly SingletonMeta Meta = SingletonMeta.Instance;

		private readonly IStrategy strategy;

		public Singleton(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Singleton Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Singleton) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public PrintQueue DefaultPrintQueue
		{ 
			get
			{
				return (PrintQueue) Strategy.GetCompositeRole(Meta.DefaultPrintQueue);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultPrintQueue ,value);
			}
		}

		virtual public bool ExistDefaultPrintQueue
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultPrintQueue);
			}
		}

		virtual public void RemoveDefaultPrintQueue()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultPrintQueue);
		}


		virtual public Locale DefaultLocale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.DefaultLocale);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultLocale ,value);
			}
		}

		virtual public bool ExistDefaultLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultLocale);
			}
		}

		virtual public void RemoveDefaultLocale()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultLocale);
		}


		virtual public global::Allors.Extent<Locale> Locales
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Locales);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Locales, value);
			}
		}

		virtual public void AddLocale (Locale value)
		{
			Strategy.AddCompositeRole(Meta.Locales, value);
		}

		virtual public void RemoveLocale (Locale value)
		{
			Strategy.RemoveCompositeRole(Meta.Locales,value);
		}

		virtual public bool ExistLocales
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Locales);
			}
		}

		virtual public void RemoveLocales()
		{
			Strategy.RemoveCompositeRoles(Meta.Locales);
		}


		virtual public SecurityToken AdministratorSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.AdministratorSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AdministratorSecurityToken ,value);
			}
		}

		virtual public bool ExistAdministratorSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AdministratorSecurityToken);
			}
		}

		virtual public void RemoveAdministratorSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.AdministratorSecurityToken);
		}


		virtual public User Guest
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.Guest);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Guest ,value);
			}
		}

		virtual public bool ExistGuest
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Guest);
			}
		}

		virtual public void RemoveGuest()
		{
			Strategy.RemoveCompositeRole(Meta.Guest);
		}


		virtual public SecurityToken DefaultSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.DefaultSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DefaultSecurityToken ,value);
			}
		}

		virtual public bool ExistDefaultSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DefaultSecurityToken);
			}
		}

		virtual public void RemoveDefaultSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.DefaultSecurityToken);
		}


		virtual public StringTemplate PersonTemplate
		{ 
			get
			{
				return (StringTemplate) Strategy.GetCompositeRole(Meta.PersonTemplate);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonTemplate ,value);
			}
		}

		virtual public bool ExistPersonTemplate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonTemplate);
			}
		}

		virtual public void RemovePersonTemplate()
		{
			Strategy.RemoveCompositeRole(Meta.PersonTemplate);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SingletonOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SingletonOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SingletonOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SingletonOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SingletonOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SingletonOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SingletonOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SingletonOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SingletonOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SingletonOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class SingletonMeta
	{
		public static readonly SingletonMeta Instance = new SingletonMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("313b97a5-328c-4600-9dd2-b5bc146fb13b"));

		public global::Allors.Meta.RoleType DefaultPrintQueue  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d861c8f8-7362-4805-9941-661a99ab11ac"));
		public global::Allors.Meta.RoleType DefaultLocale  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1e051b37-cf30-43ed-a623-dd2928d6d0a3"));
		public global::Allors.Meta.RoleType Locales  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e75a8956-4d02-49ba-b0cf-747b7a9f350d"));
		public global::Allors.Meta.RoleType AdministratorSecurityToken  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c11f31e1-75a7-4b23-9d58-7dfec256b658"));
		public global::Allors.Meta.RoleType Guest  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3a12d798-40c3-40e0-ba9f-9d01b1e39e89"));
		public global::Allors.Meta.RoleType DefaultSecurityToken  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ca9e3469-583c-4950-ba2c-1bc3a0fc3e96"));
		public global::Allors.Meta.RoleType PersonTemplate  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7ab62a77-c098-4ad6-836d-53ae820df951"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class SingletonBuilder : Allors.ObjectBuilder<Singleton> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public SingletonBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Singleton instance)
		{

			instance.DefaultPrintQueue = this.DefaultPrintQueue;

		

			instance.DefaultLocale = this.DefaultLocale;

		
			if(this.Locales!=null)
			{
				instance.Locales = this.Locales.ToArray();
			}
		

			instance.AdministratorSecurityToken = this.AdministratorSecurityToken;

		

			instance.Guest = this.Guest;

		

			instance.DefaultSecurityToken = this.DefaultSecurityToken;

		

			instance.PersonTemplate = this.PersonTemplate;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public PrintQueue DefaultPrintQueue {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultPrintQueue(PrintQueue value)
		        {
		            if(this.DefaultPrintQueue!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPrintQueue = value;
		            return this;
		        }		

				
				public Locale DefaultLocale {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultLocale(Locale value)
		        {
		            if(this.DefaultLocale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultLocale = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Locale> Locales {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithLocale(Locale value)
		        {
					if(this.Locales == null)
					{
						this.Locales = new global::System.Collections.Generic.List<Locale>(); 
					}
		            this.Locales.Add(value);
		            return this;
		        }		

				
				public SecurityToken AdministratorSecurityToken {get; set;}

				/// <exclude/>
				public SingletonBuilder WithAdministratorSecurityToken(SecurityToken value)
		        {
		            if(this.AdministratorSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AdministratorSecurityToken = value;
		            return this;
		        }		

				
				public User Guest {get; set;}

				/// <exclude/>
				public SingletonBuilder WithGuest(User value)
		        {
		            if(this.Guest!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Guest = value;
		            return this;
		        }		

				
				public SecurityToken DefaultSecurityToken {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultSecurityToken(SecurityToken value)
		        {
		            if(this.DefaultSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultSecurityToken = value;
		            return this;
		        }		

				
				public StringTemplate PersonTemplate {get; set;}

				/// <exclude/>
				public SingletonBuilder WithPersonTemplate(StringTemplate value)
		        {
		            if(this.PersonTemplate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonTemplate = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Singletons : global::Allors.ObjectsBase<Singleton>
	{
		public static readonly SingletonMeta Meta = SingletonMeta.Instance;

		public Singletons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class StringTemplate : Allors.IObject , Object, UniquelyIdentifiable, Localised
	{
		public static readonly StringTemplateMeta Meta = StringTemplateMeta.Instance;

		private readonly IStrategy strategy;

		public StringTemplate(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static StringTemplate Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (StringTemplate) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Body 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Body);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Body, value);
			}
		}

		virtual public bool ExistBody{
			get
			{
				return Strategy.ExistUnitRole(Meta.Body);
			}
		}

		virtual public void RemoveBody()
		{
			Strategy.RemoveUnitRole(Meta.Body);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public Locale Locale
		{ 
			get
			{
				return (Locale) Strategy.GetCompositeRole(Meta.Locale);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Locale ,value);
			}
		}

		virtual public bool ExistLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Locale);
			}
		}

		virtual public void RemoveLocale()
		{
			Strategy.RemoveCompositeRole(Meta.Locale);
		}



		virtual public global::Allors.Extent<Singleton> SingletonsWherePersonTemplate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWherePersonTemplate);
			}
		}

		virtual public bool ExistSingletonsWherePersonTemplate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWherePersonTemplate);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new StringTemplateOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new StringTemplateOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new StringTemplateOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new StringTemplateOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new StringTemplateOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new StringTemplateOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new StringTemplateOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new StringTemplateOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new StringTemplateOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new StringTemplateOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class StringTemplateMeta
	{
		public static readonly StringTemplateMeta Instance = new StringTemplateMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0c50c02a-cc9c-4617-8530-15a24d4ac969"));

		public global::Allors.Meta.RoleType Body  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3fcb83d0-11c5-48ba-ba9c-5126f0b4e9f4"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("37bd5d22-89f1-47a4-b6bd-8841e194b213"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));
		public global::Allors.Meta.RoleType Locale  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d43b92ac-9e6f-4238-9625-1e889be054cf"));

		public global::Allors.Meta.AssociationType SingletonsWherePersonTemplate  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("04bc6904-bd6e-4401-9720-088ebf1fb392"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class StringTemplateBuilder : Allors.ObjectBuilder<StringTemplate> , ObjectBuilder, UniquelyIdentifiableBuilder, LocalisedBuilder, global::System.IDisposable
	{		
		public StringTemplateBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(StringTemplate instance)
		{

			instance.Body = this.Body;
		
		

			instance.Name = this.Name;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Locale = this.Locale;

		
		}


				public global::System.String Body {get; set;}

				/// <exclude/>
				public StringTemplateBuilder WithBody(global::System.String value)
		        {
				    if(this.Body!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Body = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public StringTemplateBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public StringTemplateBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public Locale Locale {get; set;}

				/// <exclude/>
				public StringTemplateBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				

	}

	public partial class StringTemplates : global::Allors.ObjectsBase<StringTemplate>
	{
		public static readonly StringTemplateMeta Meta = StringTemplateMeta.Instance;

		public StringTemplates(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Transition : Allors.IObject , Object
	{
		public static readonly TransitionMeta Meta = TransitionMeta.Instance;

		private readonly IStrategy strategy;

		public Transition(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Transition Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Transition) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<ObjectState> FromStates
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.FromStates);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.FromStates, value);
			}
		}

		virtual public void AddFromState (ObjectState value)
		{
			Strategy.AddCompositeRole(Meta.FromStates, value);
		}

		virtual public void RemoveFromState (ObjectState value)
		{
			Strategy.RemoveCompositeRole(Meta.FromStates,value);
		}

		virtual public bool ExistFromStates
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.FromStates);
			}
		}

		virtual public void RemoveFromStates()
		{
			Strategy.RemoveCompositeRoles(Meta.FromStates);
		}


		virtual public ObjectState ToState
		{ 
			get
			{
				return (ObjectState) Strategy.GetCompositeRole(Meta.ToState);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ToState ,value);
			}
		}

		virtual public bool ExistToState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ToState);
			}
		}

		virtual public void RemoveToState()
		{
			Strategy.RemoveCompositeRole(Meta.ToState);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new TransitionOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TransitionOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TransitionOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TransitionOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TransitionOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TransitionOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TransitionOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TransitionOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TransitionOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TransitionOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class TransitionMeta
	{
		public static readonly TransitionMeta Instance = new TransitionMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a7e490c0-ce29-4298-97c4-519904bb755a"));

		public global::Allors.Meta.RoleType FromStates  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e79fa7b8-870a-4a6e-8522-bb39437e0650"));
		public global::Allors.Meta.RoleType ToState  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c68eb959-1b2c-48a7-b15a-944a576944ef"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class TransitionBuilder : Allors.ObjectBuilder<Transition> , ObjectBuilder, global::System.IDisposable
	{		
		public TransitionBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Transition instance)
		{
			if(this.FromStates!=null)
			{
				instance.FromStates = this.FromStates.ToArray();
			}
		

			instance.ToState = this.ToState;

		
		}


				public global::System.Collections.Generic.List<ObjectState> FromStates {get; set;}	

				/// <exclude/>
				public TransitionBuilder WithFromState(ObjectState value)
		        {
					if(this.FromStates == null)
					{
						this.FromStates = new global::System.Collections.Generic.List<ObjectState>(); 
					}
		            this.FromStates.Add(value);
		            return this;
		        }		

				
				public ObjectState ToState {get; set;}

				/// <exclude/>
				public TransitionBuilder WithToState(ObjectState value)
		        {
		            if(this.ToState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ToState = value;
		            return this;
		        }		

				

	}

	public partial class Transitions : global::Allors.ObjectsBase<Transition>
	{
		public static readonly TransitionMeta Meta = TransitionMeta.Instance;

		public Transitions(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class UserGroup : Allors.IObject , Object, UniquelyIdentifiable, AccessControlledObject
	{
		public static readonly UserGroupMeta Meta = UserGroupMeta.Instance;

		private readonly IStrategy strategy;

		public UserGroup(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static UserGroup Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (UserGroup) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Role Role
		{ 
			get
			{
				return (Role) Strategy.GetCompositeRole(Meta.Role);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Role ,value);
			}
		}

		virtual public bool ExistRole
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Role);
			}
		}

		virtual public void RemoveRole()
		{
			Strategy.RemoveCompositeRole(Meta.Role);
		}


		virtual public global::Allors.Extent<User> Members
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Members);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Members, value);
			}
		}

		virtual public void AddMember (User value)
		{
			Strategy.AddCompositeRole(Meta.Members, value);
		}

		virtual public void RemoveMember (User value)
		{
			Strategy.RemoveCompositeRole(Meta.Members,value);
		}

		virtual public bool ExistMembers
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Members);
			}
		}

		virtual public void RemoveMembers()
		{
			Strategy.RemoveCompositeRoles(Meta.Members);
		}


		virtual public UserGroup Parent
		{ 
			get
			{
				return (UserGroup) Strategy.GetCompositeRole(Meta.Parent);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Parent ,value);
			}
		}

		virtual public bool ExistParent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Parent);
			}
		}

		virtual public void RemoveParent()
		{
			Strategy.RemoveCompositeRole(Meta.Parent);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubjectGroup
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubjectGroup);
			}
		}

		virtual public bool ExistAccessControlsWhereSubjectGroup
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubjectGroup);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereParent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereParent);
			}
		}

		virtual public bool ExistUserGroupsWhereParent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereParent);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new UserGroupOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new UserGroupOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new UserGroupOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new UserGroupOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new UserGroupOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new UserGroupOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new UserGroupOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new UserGroupOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new UserGroupOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new UserGroupOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class UserGroupMeta
	{
		public static readonly UserGroupMeta Instance = new UserGroupMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("60065f5d-a3c2-4418-880d-1026ab607319"));

		public global::Allors.Meta.RoleType Role  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a1b92c88-79d9-4a4f-bb99-0fde4e251a28"));
		public global::Allors.Meta.RoleType Members  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c552f0b7-95ce-4d45-aaea-56bc8365eee4"));
		public global::Allors.Meta.RoleType Parent  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6ec327af-86bc-4c79-8f00-bcb399686bf3"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9d3c1eec-bf10-4a79-a37f-bc6a20ff2a79"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType AccessControlsWhereSubjectGroup  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("92e8d639-9205-422b-b4ff-c7e8c2980abf"));
		public global::Allors.Meta.AssociationType UserGroupsWhereParent  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d8d8fdf7-f261-449b-b611-7c58dc43f6d3"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class UserGroupBuilder : Allors.ObjectBuilder<UserGroup> , ObjectBuilder, UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public UserGroupBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(UserGroup instance)
		{

			instance.Name = this.Name;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		

			instance.Role = this.Role;

		
			if(this.Members!=null)
			{
				instance.Members = this.Members.ToArray();
			}
		

			instance.Parent = this.Parent;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public Role Role {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithRole(Role value)
		        {
		            if(this.Role!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Role = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<User> Members {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithMember(User value)
		        {
					if(this.Members == null)
					{
						this.Members = new global::System.Collections.Generic.List<User>(); 
					}
		            this.Members.Add(value);
		            return this;
		        }		

				
				public UserGroup Parent {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithParent(UserGroup value)
		        {
		            if(this.Parent!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Parent = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public UserGroupBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public UserGroupBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class UserGroups : global::Allors.ObjectsBase<UserGroup>
	{
		public static readonly UserGroupMeta Meta = UserGroupMeta.Instance;

		public UserGroups(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Dependent : Allors.IObject , Object, Deletable
	{
		public static readonly DependentMeta Meta = DependentMeta.Instance;

		private readonly IStrategy strategy;

		public Dependent(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Dependent Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Dependent) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Dependee Dependee
		{ 
			get
			{
				return (Dependee) Strategy.GetCompositeRole(Meta.Dependee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Dependee ,value);
			}
		}

		virtual public bool ExistDependee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Dependee);
			}
		}

		virtual public void RemoveDependee()
		{
			Strategy.RemoveCompositeRole(Meta.Dependee);
		}


		virtual public global::System.Int32? Counter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Counter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Counter, value);
			}
		}

		virtual public bool ExistCounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Counter);
			}
		}

		virtual public void RemoveCounter()
		{
			Strategy.RemoveUnitRole(Meta.Counter);
		}


		virtual public global::System.Int32? Subcounter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Subcounter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new DependentOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new DependentOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new DependentOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new DependentOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new DependentOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new DependentOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new DependentOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new DependentOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new DependentOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new DependentOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete()
		{ 
			var method = new DependentDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new DependentDelete(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class DependentMeta
	{
		public static readonly DependentMeta Instance = new DependentMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0cb8d2a7-4566-432f-9882-893b05a77f44"));

		public global::Allors.Meta.RoleType Dependee  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d6b1d6b6-539b-4b12-9363-18e7e9ab632c"));
		public global::Allors.Meta.RoleType Counter  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d067129b-8440-4fc7-80d3-832ce569fe54"));
		public global::Allors.Meta.RoleType Subcounter  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2b916cdb-93a6-42f1-b4e6-625b941c1874"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType Delete  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4cc201f-d6cb-4d82-8aeb-e9c4c79c33f7"));

	}

	public partial class DependentBuilder : Allors.ObjectBuilder<Dependent> , ObjectBuilder, DeletableBuilder, global::System.IDisposable
	{		
		public DependentBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Dependent instance)
		{
			

			if(this.Counter.HasValue)
			{
				instance.Counter = this.Counter.Value;
			}			
		
		
			

			if(this.Subcounter.HasValue)
			{
				instance.Subcounter = this.Subcounter.Value;
			}			
		
		

			instance.Dependee = this.Dependee;

		
		}


				public Dependee Dependee {get; set;}

				/// <exclude/>
				public DependentBuilder WithDependee(Dependee value)
		        {
		            if(this.Dependee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Dependee = value;
		            return this;
		        }		

				
				public global::System.Int32? Counter {get; set;}

				/// <exclude/>
				public DependentBuilder WithCounter(global::System.Int32? value)
		        {
				    if(this.Counter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Counter = value;
		            return this;
		        }	

				public global::System.Int32? Subcounter {get; set;}

				/// <exclude/>
				public DependentBuilder WithSubcounter(global::System.Int32? value)
		        {
				    if(this.Subcounter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subcounter = value;
		            return this;
		        }	


	}

	public partial class Dependents : global::Allors.ObjectsBase<Dependent>
	{
		public static readonly DependentMeta Meta = DependentMeta.Instance;

		public Dependents(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Four : Allors.IObject , Object, Shared
	{
		public static readonly FourMeta Meta = FourMeta.Instance;

		private readonly IStrategy strategy;

		public Four(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Four Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Four) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Three> ThreesWhereFour
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ThreesWhereFour);
			}
		}

		virtual public bool ExistThreesWhereFour
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ThreesWhereFour);
			}
		}


		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FourOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FourOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FourOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FourOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FourOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FourOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FourOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FourOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FourOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FourOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class FourMeta
	{
		public static readonly FourMeta Instance = new FourMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1248e212-ca71-44aa-9e87-6e83dae9d4fd"));

		public global::Allors.Meta.AssociationType ThreesWhereFour  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("dc813d9a-84e9-4995-8d2c-0ef449b12024"));
		public global::Allors.Meta.AssociationType TwosWhereShared  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fd97db6d-d946-47ba-a2a0-88b732457b96"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class FourBuilder : Allors.ObjectBuilder<Four> , ObjectBuilder, SharedBuilder, global::System.IDisposable
	{		
		public FourBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Four instance)
		{
		}


	}

	public partial class Fours : global::Allors.ObjectsBase<Four>
	{
		public static readonly FourMeta Meta = FourMeta.Instance;

		public Fours(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class First : Allors.IObject , Object
	{
		public static readonly FirstMeta Meta = FirstMeta.Instance;

		private readonly IStrategy strategy;

		public First(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static First Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (First) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Second Second
		{ 
			get
			{
				return (Second) Strategy.GetCompositeRole(Meta.Second);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Second ,value);
			}
		}

		virtual public bool ExistSecond
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Second);
			}
		}

		virtual public void RemoveSecond()
		{
			Strategy.RemoveCompositeRole(Meta.Second);
		}


		virtual public global::System.Boolean? CreateCycle 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.CreateCycle);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CreateCycle, value);
			}
		}

		virtual public bool ExistCreateCycle{
			get
			{
				return Strategy.ExistUnitRole(Meta.CreateCycle);
			}
		}

		virtual public void RemoveCreateCycle()
		{
			Strategy.RemoveUnitRole(Meta.CreateCycle);
		}


		virtual public global::System.Boolean? IsDerived 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsDerived);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsDerived, value);
			}
		}

		virtual public bool ExistIsDerived{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsDerived);
			}
		}

		virtual public void RemoveIsDerived()
		{
			Strategy.RemoveUnitRole(Meta.IsDerived);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FirstOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FirstOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FirstOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FirstOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FirstOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FirstOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FirstOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FirstOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FirstOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FirstOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class FirstMeta
	{
		public static readonly FirstMeta Instance = new FirstMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1937b42e-954b-4ef9-bc63-5b8ae7903e9d"));

		public global::Allors.Meta.RoleType Second  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cf5c725d-e567-44de-ab5b-b47bb0bf8647"));
		public global::Allors.Meta.RoleType CreateCycle  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("12c46bf1-eed0-4e2a-b704-5d40032b4911"));
		public global::Allors.Meta.RoleType IsDerived  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("eb6b0565-1440-4b9b-aa23-51cfae3f93dd"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class FirstBuilder : Allors.ObjectBuilder<First> , ObjectBuilder, global::System.IDisposable
	{		
		public FirstBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(First instance)
		{
			

			if(this.CreateCycle.HasValue)
			{
				instance.CreateCycle = this.CreateCycle.Value;
			}			
		
		
			

			if(this.IsDerived.HasValue)
			{
				instance.IsDerived = this.IsDerived.Value;
			}			
		
		

			instance.Second = this.Second;

		
		}


				public Second Second {get; set;}

				/// <exclude/>
				public FirstBuilder WithSecond(Second value)
		        {
		            if(this.Second!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Second = value;
		            return this;
		        }		

				
				public global::System.Boolean? CreateCycle {get; set;}

				/// <exclude/>
				public FirstBuilder WithCreateCycle(global::System.Boolean? value)
		        {
				    if(this.CreateCycle!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CreateCycle = value;
		            return this;
		        }	

				public global::System.Boolean? IsDerived {get; set;}

				/// <exclude/>
				public FirstBuilder WithIsDerived(global::System.Boolean? value)
		        {
				    if(this.IsDerived!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsDerived = value;
		            return this;
		        }	


	}

	public partial class Firsts : global::Allors.ObjectsBase<First>
	{
		public static readonly FirstMeta Meta = FirstMeta.Instance;

		public Firsts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class DerivationLogC1 : Allors.IObject , Object, DerivationLogI12
	{
		public static readonly DerivationLogC1Meta Meta = DerivationLogC1Meta.Instance;

		private readonly IStrategy strategy;

		public DerivationLogC1(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static DerivationLogC1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (DerivationLogC1) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new DerivationLogC1OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new DerivationLogC1OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new DerivationLogC1OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new DerivationLogC1OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new DerivationLogC1OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new DerivationLogC1OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new DerivationLogC1OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new DerivationLogC1OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new DerivationLogC1OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new DerivationLogC1OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class DerivationLogC1Meta
	{
		public static readonly DerivationLogC1Meta Instance = new DerivationLogC1Meta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2361c456-b624-493a-8377-2dd1e697e17a"));

		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("007a6d25-8506-483d-9140-414c0056d812"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class DerivationLogC1Builder : Allors.ObjectBuilder<DerivationLogC1> , ObjectBuilder, DerivationLogI12Builder, global::System.IDisposable
	{		
		public DerivationLogC1Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(DerivationLogC1 instance)
		{
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
		}


				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public DerivationLogC1Builder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class DerivationLogC1s : global::Allors.ObjectsBase<DerivationLogC1>
	{
		public static readonly DerivationLogC1Meta Meta = DerivationLogC1Meta.Instance;

		public DerivationLogC1s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class HomeAddress : Allors.IObject , Object, Address
	{
		public static readonly HomeAddressMeta Meta = HomeAddressMeta.Instance;

		private readonly IStrategy strategy;

		public HomeAddress(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static HomeAddress Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (HomeAddress) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Street 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Street);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Street, value);
			}
		}

		virtual public bool ExistStreet{
			get
			{
				return Strategy.ExistUnitRole(Meta.Street);
			}
		}

		virtual public void RemoveStreet()
		{
			Strategy.RemoveUnitRole(Meta.Street);
		}


		virtual public global::System.String HouseNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.HouseNumber);
			}
			set
			{
				Strategy.SetUnitRole(Meta.HouseNumber, value);
			}
		}

		virtual public bool ExistHouseNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.HouseNumber);
			}
		}

		virtual public void RemoveHouseNumber()
		{
			Strategy.RemoveUnitRole(Meta.HouseNumber);
		}


		virtual public Place Place
		{ 
			get
			{
				return (Place) Strategy.GetCompositeRole(Meta.Place);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Place ,value);
			}
		}

		virtual public bool ExistPlace
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Place);
			}
		}

		virtual public void RemovePlace()
		{
			Strategy.RemoveCompositeRole(Meta.Place);
		}



		virtual public global::Allors.Extent<Person> PersonsWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereMainAddress);
			}
		}

		virtual public bool ExistPersonsWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereMainAddress);
			}
		}


		virtual public global::Allors.Extent<Person> PersonsWhereAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereAddress);
			}
		}

		virtual public bool ExistPersonsWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereAddress);
			}
		}


		virtual public Organisation OrganisationWhereAddress
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereAddress);
			}
		} 

		virtual public bool ExistOrganisationWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereAddress);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereMainAddress);
			}
		}

		virtual public bool ExistOrganisationsWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereMainAddress);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new HomeAddressOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new HomeAddressOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new HomeAddressOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new HomeAddressOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new HomeAddressOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new HomeAddressOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new HomeAddressOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new HomeAddressOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new HomeAddressOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new HomeAddressOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class HomeAddressMeta
	{
		public static readonly HomeAddressMeta Instance = new HomeAddressMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2561e93c-5b85-44fb-a924-a1c0d1f78846"));

		public global::Allors.Meta.RoleType Street  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fc273b47-d98a-4afd-90ba-574fbdbfb395"));
		public global::Allors.Meta.RoleType HouseNumber  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d29dbed0-a68a-4075-b893-55e16e6335fd"));
		public global::Allors.Meta.RoleType Place  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4f7016f6-1b87-4ac4-8363-7f8210108928"));

		public global::Allors.Meta.AssociationType PersonsWhereMainAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ebaedf39-1af9-42b7-83dc-8945450cebf2"));
		public global::Allors.Meta.AssociationType PersonsWhereAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("da5e0427-79f7-4259-8a68-0071aa4c6273"));
		public global::Allors.Meta.AssociationType OrganisationWhereAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d1a098bf-a3d8-4b71-948f-a77ae82f02db"));
		public global::Allors.Meta.AssociationType OrganisationsWhereMainAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("944d024b-81eb-442f-8f50-387a588d2373"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class HomeAddressBuilder : Allors.ObjectBuilder<HomeAddress> , ObjectBuilder, AddressBuilder, global::System.IDisposable
	{		
		public HomeAddressBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(HomeAddress instance)
		{

			instance.Street = this.Street;
		
		

			instance.HouseNumber = this.HouseNumber;
		
		

			instance.Place = this.Place;

		
		}


				public global::System.String Street {get; set;}

				/// <exclude/>
				public HomeAddressBuilder WithStreet(global::System.String value)
		        {
				    if(this.Street!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Street = value;
		            return this;
		        }	

				public global::System.String HouseNumber {get; set;}

				/// <exclude/>
				public HomeAddressBuilder WithHouseNumber(global::System.String value)
		        {
				    if(this.HouseNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.HouseNumber = value;
		            return this;
		        }	

				public Place Place {get; set;}

				/// <exclude/>
				public HomeAddressBuilder WithPlace(Place value)
		        {
		            if(this.Place!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Place = value;
		            return this;
		        }		

				

	}

	public partial class HomeAddresses : global::Allors.ObjectsBase<HomeAddress>
	{
		public static readonly HomeAddressMeta Meta = HomeAddressMeta.Instance;

		public HomeAddresses(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Place : Allors.IObject , Object
	{
		public static readonly PlaceMeta Meta = PlaceMeta.Instance;

		private readonly IStrategy strategy;

		public Place(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Place Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Place) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Country Country
		{ 
			get
			{
				return (Country) Strategy.GetCompositeRole(Meta.Country);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Country ,value);
			}
		}

		virtual public bool ExistCountry
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Country);
			}
		}

		virtual public void RemoveCountry()
		{
			Strategy.RemoveCompositeRole(Meta.Country);
		}


		virtual public global::System.String City 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.City);
			}
			set
			{
				Strategy.SetUnitRole(Meta.City, value);
			}
		}

		virtual public bool ExistCity{
			get
			{
				return Strategy.ExistUnitRole(Meta.City);
			}
		}

		virtual public void RemoveCity()
		{
			Strategy.RemoveUnitRole(Meta.City);
		}


		virtual public global::System.String PostalCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PostalCode);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PostalCode, value);
			}
		}

		virtual public bool ExistPostalCode{
			get
			{
				return Strategy.ExistUnitRole(Meta.PostalCode);
			}
		}

		virtual public void RemovePostalCode()
		{
			Strategy.RemoveUnitRole(Meta.PostalCode);
		}



		virtual public global::Allors.Extent<Address> AddressesWherePlace
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AddressesWherePlace);
			}
		}

		virtual public bool ExistAddressesWherePlace
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AddressesWherePlace);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new PlaceOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new PlaceOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new PlaceOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new PlaceOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new PlaceOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new PlaceOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new PlaceOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new PlaceOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new PlaceOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new PlaceOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class PlaceMeta
	{
		public static readonly PlaceMeta Instance = new PlaceMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("268f63d2-17da-4f29-b0d0-76db611598c6"));

		public global::Allors.Meta.RoleType Country  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d88eaaa2-2622-48ef-960a-1b506d95f238"));
		public global::Allors.Meta.RoleType City  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("dccca416-913b-406a-9405-c5d037af2fd8"));
		public global::Allors.Meta.RoleType PostalCode  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b54fcc51-e294-4732-82bf-a1117a4e2219"));

		public global::Allors.Meta.AssociationType AddressesWherePlace  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("113a8abd-e587-45a3-b118-92e60182c94b"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class PlaceBuilder : Allors.ObjectBuilder<Place> , ObjectBuilder, global::System.IDisposable
	{		
		public PlaceBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Place instance)
		{

			instance.City = this.City;
		
		

			instance.PostalCode = this.PostalCode;
		
		

			instance.Country = this.Country;

		
		}


				public Country Country {get; set;}

				/// <exclude/>
				public PlaceBuilder WithCountry(Country value)
		        {
		            if(this.Country!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Country = value;
		            return this;
		        }		

				
				public global::System.String City {get; set;}

				/// <exclude/>
				public PlaceBuilder WithCity(global::System.String value)
		        {
				    if(this.City!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.City = value;
		            return this;
		        }	

				public global::System.String PostalCode {get; set;}

				/// <exclude/>
				public PlaceBuilder WithPostalCode(global::System.String value)
		        {
				    if(this.PostalCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PostalCode = value;
		            return this;
		        }	


	}

	public partial class Places : global::Allors.ObjectsBase<Place>
	{
		public static readonly PlaceMeta Meta = PlaceMeta.Instance;

		public Places(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Gender : Allors.IObject , Object, Enumeration
	{
		public static readonly GenderMeta Meta = GenderMeta.Instance;

		private readonly IStrategy strategy;

		public Gender(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Gender Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Gender) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedNames);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedNames, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedNames, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedNames,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedNames);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedNames);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.Boolean IsActive 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.IsActive);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::Allors.Extent<Person> PersonsWhereGender
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereGender);
			}
		}

		virtual public bool ExistPersonsWhereGender
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereGender);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new GenderOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new GenderOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new GenderOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new GenderOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new GenderOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new GenderOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new GenderOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new GenderOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new GenderOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new GenderOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class GenderMeta
	{
		public static readonly GenderMeta Instance = new GenderMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("270f0dc8-1bc2-4a42-9617-45e93d5403c8"));

		public global::Allors.Meta.RoleType LocalisedNames  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("919fdad7-830e-4b12-b23c-f433951236af"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5850860d-c772-402f-815b-7634c9a1e697"));
		public global::Allors.Meta.RoleType IsActive  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0c6faf5a-eac9-454c-bd53-3b8409e56d34"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));

		public global::Allors.Meta.AssociationType PersonsWhereGender  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5ec6caf4-4752-4a89-92ec-13fd69b444f2"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class GenderBuilder : Allors.ObjectBuilder<Gender> , ObjectBuilder, EnumerationBuilder, global::System.IDisposable
	{		
		public GenderBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Gender instance)
		{

			instance.Name = this.Name;
		
		
			

			if(this.IsActive.HasValue)
			{
				instance.IsActive = this.IsActive.Value;
			}			
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.LocalisedNames!=null)
			{
				instance.LocalisedNames = this.LocalisedNames.ToArray();
			}
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<LocalisedText> LocalisedNames {get; set;}	

				/// <exclude/>
				public GenderBuilder WithLocalisedName(LocalisedText value)
		        {
					if(this.LocalisedNames == null)
					{
						this.LocalisedNames = new global::System.Collections.Generic.List<LocalisedText>(); 
					}
		            this.LocalisedNames.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public GenderBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Boolean? IsActive {get; set;}

				/// <exclude/>
				public GenderBuilder WithIsActive(global::System.Boolean? value)
		        {
				    if(this.IsActive!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsActive = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public GenderBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public GenderBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public GenderBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Genders : global::Allors.ObjectsBase<Gender>
	{
		public static readonly GenderMeta Meta = GenderMeta.Instance;

		public Genders(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Dependee : Allors.IObject , Object
	{
		public static readonly DependeeMeta Meta = DependeeMeta.Instance;

		private readonly IStrategy strategy;

		public Dependee(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Dependee Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Dependee) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Subdependee Subdependee
		{ 
			get
			{
				return (Subdependee) Strategy.GetCompositeRole(Meta.Subdependee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Subdependee ,value);
			}
		}

		virtual public bool ExistSubdependee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Subdependee);
			}
		}

		virtual public void RemoveSubdependee()
		{
			Strategy.RemoveCompositeRole(Meta.Subdependee);
		}


		virtual public global::System.Int32? Subcounter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Subcounter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter);
		}


		virtual public global::System.Int32? Counter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Counter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Counter, value);
			}
		}

		virtual public bool ExistCounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Counter);
			}
		}

		virtual public void RemoveCounter()
		{
			Strategy.RemoveUnitRole(Meta.Counter);
		}


		virtual public global::System.Boolean? DeleteDependent 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.DeleteDependent);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DeleteDependent, value);
			}
		}

		virtual public bool ExistDeleteDependent{
			get
			{
				return Strategy.ExistUnitRole(Meta.DeleteDependent);
			}
		}

		virtual public void RemoveDeleteDependent()
		{
			Strategy.RemoveUnitRole(Meta.DeleteDependent);
		}



		virtual public Dependent DependentWhereDependee
		{ 
			get
			{
				return (Dependent) Strategy.GetCompositeAssociation(Meta.DependentWhereDependee);
			}
		} 

		virtual public bool ExistDependentWhereDependee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.DependentWhereDependee);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new DependeeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new DependeeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new DependeeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new DependeeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new DependeeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new DependeeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new DependeeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new DependeeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new DependeeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new DependeeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class DependeeMeta
	{
		public static readonly DependeeMeta Instance = new DependeeMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2cc9bde1-80da-4159-bb20-219074266101"));

		public global::Allors.Meta.RoleType Subdependee  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("89b8f5f6-5589-42ad-ac9e-1d984c02f7ea"));
		public global::Allors.Meta.RoleType Subcounter  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("af75f294-b20d-4304-8804-32ef9c0a324a"));
		public global::Allors.Meta.RoleType Counter  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5f570211-688e-4050-bf54-997d22a529d5"));
		public global::Allors.Meta.RoleType DeleteDependent  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bde110ae-8242-4d98-bdc3-feeed8fde742"));

		public global::Allors.Meta.AssociationType DependentWhereDependee  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cd3972e6-8ad4-4b01-9381-4d18718c7538"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class DependeeBuilder : Allors.ObjectBuilder<Dependee> , ObjectBuilder, global::System.IDisposable
	{		
		public DependeeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Dependee instance)
		{
			

			if(this.Subcounter.HasValue)
			{
				instance.Subcounter = this.Subcounter.Value;
			}			
		
		
			

			if(this.Counter.HasValue)
			{
				instance.Counter = this.Counter.Value;
			}			
		
		
			

			if(this.DeleteDependent.HasValue)
			{
				instance.DeleteDependent = this.DeleteDependent.Value;
			}			
		
		

			instance.Subdependee = this.Subdependee;

		
		}


				public Subdependee Subdependee {get; set;}

				/// <exclude/>
				public DependeeBuilder WithSubdependee(Subdependee value)
		        {
		            if(this.Subdependee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Subdependee = value;
		            return this;
		        }		

				
				public global::System.Int32? Subcounter {get; set;}

				/// <exclude/>
				public DependeeBuilder WithSubcounter(global::System.Int32? value)
		        {
				    if(this.Subcounter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subcounter = value;
		            return this;
		        }	

				public global::System.Int32? Counter {get; set;}

				/// <exclude/>
				public DependeeBuilder WithCounter(global::System.Int32? value)
		        {
				    if(this.Counter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Counter = value;
		            return this;
		        }	

				public global::System.Boolean? DeleteDependent {get; set;}

				/// <exclude/>
				public DependeeBuilder WithDeleteDependent(global::System.Boolean? value)
		        {
				    if(this.DeleteDependent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeleteDependent = value;
		            return this;
		        }	


	}

	public partial class Dependees : global::Allors.ObjectsBase<Dependee>
	{
		public static readonly DependeeMeta Meta = DependeeMeta.Instance;

		public Dependees(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SimpleJob : Allors.IObject , Object
	{
		public static readonly SimpleJobMeta Meta = SimpleJobMeta.Instance;

		private readonly IStrategy strategy;

		public SimpleJob(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SimpleJob Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SimpleJob) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Int32? Index 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Index);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Index, value);
			}
		}

		virtual public bool ExistIndex{
			get
			{
				return Strategy.ExistUnitRole(Meta.Index);
			}
		}

		virtual public void RemoveIndex()
		{
			Strategy.RemoveUnitRole(Meta.Index);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SimpleJobOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SimpleJobOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SimpleJobOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SimpleJobOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SimpleJobOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SimpleJobOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SimpleJobOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SimpleJobOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SimpleJobOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SimpleJobOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class SimpleJobMeta
	{
		public static readonly SimpleJobMeta Instance = new SimpleJobMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("320985b6-d571-4b6c-b940-e02c04ad37d3"));

		public global::Allors.Meta.RoleType Index  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("44b9e3cc-e584-48c0-bfec-916ab14e5f03"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class SimpleJobBuilder : Allors.ObjectBuilder<SimpleJob> , ObjectBuilder, global::System.IDisposable
	{		
		public SimpleJobBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(SimpleJob instance)
		{
			

			if(this.Index.HasValue)
			{
				instance.Index = this.Index.Value;
			}			
		
		
		}


				public global::System.Int32? Index {get; set;}

				/// <exclude/>
				public SimpleJobBuilder WithIndex(global::System.Int32? value)
		        {
				    if(this.Index!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Index = value;
		            return this;
		        }	


	}

	public partial class SimpleJobs : global::Allors.ObjectsBase<SimpleJob>
	{
		public static readonly SimpleJobMeta Meta = SimpleJobMeta.Instance;

		public SimpleJobs(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Third : Allors.IObject , Object
	{
		public static readonly ThirdMeta Meta = ThirdMeta.Instance;

		private readonly IStrategy strategy;

		public Third(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Third Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Third) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Boolean? IsDerived 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsDerived);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsDerived, value);
			}
		}

		virtual public bool ExistIsDerived{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsDerived);
			}
		}

		virtual public void RemoveIsDerived()
		{
			Strategy.RemoveUnitRole(Meta.IsDerived);
		}



		virtual public Second SecondWhereThird
		{ 
			get
			{
				return (Second) Strategy.GetCompositeAssociation(Meta.SecondWhereThird);
			}
		} 

		virtual public bool ExistSecondWhereThird
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SecondWhereThird);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ThirdOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ThirdOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ThirdOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ThirdOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ThirdOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ThirdOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ThirdOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ThirdOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ThirdOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ThirdOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ThirdMeta
	{
		public static readonly ThirdMeta Instance = new ThirdMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("39116edf-34cf-45a6-ac09-2e4f98f28e14"));

		public global::Allors.Meta.RoleType IsDerived  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7866ac81-e84d-40c6-b9c0-5a038b1e838f"));

		public global::Allors.Meta.AssociationType SecondWhereThird  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("08d8689d-88ce-496d-95e4-f20af0677cac"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class ThirdBuilder : Allors.ObjectBuilder<Third> , ObjectBuilder, global::System.IDisposable
	{		
		public ThirdBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Third instance)
		{
			

			if(this.IsDerived.HasValue)
			{
				instance.IsDerived = this.IsDerived.Value;
			}			
		
		
		}


				public global::System.Boolean? IsDerived {get; set;}

				/// <exclude/>
				public ThirdBuilder WithIsDerived(global::System.Boolean? value)
		        {
				    if(this.IsDerived!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsDerived = value;
		            return this;
		        }	


	}

	public partial class Thirds : global::Allors.ObjectsBase<Third>
	{
		public static readonly ThirdMeta Meta = ThirdMeta.Instance;

		public Thirds(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Organisation : Allors.IObject , Object, UniquelyIdentifiable, AccessControlledObject
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		private readonly IStrategy strategy;

		public Organisation(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Organisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Organisation) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Information 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Information);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Information, value);
			}
		}

		virtual public bool ExistInformation{
			get
			{
				return Strategy.ExistUnitRole(Meta.Information);
			}
		}

		virtual public void RemoveInformation()
		{
			Strategy.RemoveUnitRole(Meta.Information);
		}


		virtual public global::Allors.Extent<Person> Shareholders
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Shareholders);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Shareholders, value);
			}
		}

		virtual public void AddShareholder (Person value)
		{
			Strategy.AddCompositeRole(Meta.Shareholders, value);
		}

		virtual public void RemoveShareholder (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Shareholders,value);
		}

		virtual public bool ExistShareholders
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Shareholders);
			}
		}

		virtual public void RemoveShareholders()
		{
			Strategy.RemoveCompositeRoles(Meta.Shareholders);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<Person> Employees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Employees);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Employees, value);
			}
		}

		virtual public void AddEmployee (Person value)
		{
			Strategy.AddCompositeRole(Meta.Employees, value);
		}

		virtual public void RemoveEmployee (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.Employees,value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Employees);
			}
		}

		virtual public void RemoveEmployees()
		{
			Strategy.RemoveCompositeRoles(Meta.Employees);
		}


		virtual public global::System.Boolean? Incorporated 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.Incorporated);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Incorporated, value);
			}
		}

		virtual public bool ExistIncorporated{
			get
			{
				return Strategy.ExistUnitRole(Meta.Incorporated);
			}
		}

		virtual public void RemoveIncorporated()
		{
			Strategy.RemoveUnitRole(Meta.Incorporated);
		}


		virtual public global::System.Boolean? IsSupplier 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsSupplier);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsSupplier, value);
			}
		}

		virtual public bool ExistIsSupplier{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsSupplier);
			}
		}

		virtual public void RemoveIsSupplier()
		{
			Strategy.RemoveUnitRole(Meta.IsSupplier);
		}


		virtual public global::System.DateTime? IncorporationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.IncorporationDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IncorporationDate, value);
			}
		}

		virtual public bool ExistIncorporationDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.IncorporationDate);
			}
		}

		virtual public void RemoveIncorporationDate()
		{
			Strategy.RemoveUnitRole(Meta.IncorporationDate);
		}


		virtual public global::Allors.Extent<Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Addresses);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Addresses, value);
			}
		}

		virtual public void AddAddress (Address value)
		{
			Strategy.AddCompositeRole(Meta.Addresses, value);
		}

		virtual public void RemoveAddress (Address value)
		{
			Strategy.RemoveCompositeRole(Meta.Addresses,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Addresses);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(Meta.Addresses);
		}


		virtual public Person Owner
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Owner);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Owner ,value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Owner);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(Meta.Owner);
		}


		virtual public Media Logo
		{ 
			get
			{
				return (Media) Strategy.GetCompositeRole(Meta.Logo);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Logo ,value);
			}
		}

		virtual public bool ExistLogo
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Logo);
			}
		}

		virtual public void RemoveLogo()
		{
			Strategy.RemoveCompositeRole(Meta.Logo);
		}


		virtual public global::System.String Size 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Size);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Size, value);
			}
		}

		virtual public bool ExistSize{
			get
			{
				return Strategy.ExistUnitRole(Meta.Size);
			}
		}

		virtual public void RemoveSize()
		{
			Strategy.RemoveUnitRole(Meta.Size);
		}


		virtual public Address MainAddress
		{ 
			get
			{
				return (Address) Strategy.GetCompositeRole(Meta.MainAddress);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MainAddress ,value);
			}
		}

		virtual public bool ExistMainAddress
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MainAddress);
			}
		}

		virtual public void RemoveMainAddress()
		{
			Strategy.RemoveCompositeRole(Meta.MainAddress);
		}


		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyOne);
			}
		}


		virtual public global::Allors.Extent<BadUI> BadUIsWhereCompanyMany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BadUIsWhereCompanyMany);
			}
		}



		public OrganisationJustDoIt JustDoIt()
		{ 
			var method = new OrganisationJustDoIt(this);
            method.Execute();
            return method;
		}

		public OrganisationJustDoIt JustDoIt(System.Action<OrganisationJustDoIt> action)
		{ 
			var method = new OrganisationJustDoIt(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new OrganisationOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OrganisationOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OrganisationOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OrganisationOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OrganisationOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OrganisationOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OrganisationOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OrganisationOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OrganisationOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OrganisationOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class OrganisationMeta
	{
		public static readonly OrganisationMeta Instance = new OrganisationMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3a5dcec7-308f-48c7-afee-35d38415aa0b"));

		public global::Allors.Meta.RoleType Information  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e567907e-ca61-4ec1-ab06-62dbb84e5d57"));
		public global::Allors.Meta.RoleType Shareholders  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("45bef644-dfcf-417a-9356-3c1cfbcada1b"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("baa30557-79ff-406d-b374-9d32519b2de7"));
		public global::Allors.Meta.RoleType Description  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d5965473-66cd-44b2-8048-a521c9cdadd0"));
		public global::Allors.Meta.RoleType Employees  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b95c7b34-a295-4600-82c8-826cc2186a00"));
		public global::Allors.Meta.RoleType Incorporated  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1c3dec18-978c-470a-8857-5210b9267185"));
		public global::Allors.Meta.RoleType IsSupplier  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("90489246-8590-4578-8b8d-716a25abd27d"));
		public global::Allors.Meta.RoleType IncorporationDate  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c84a6696-a1e9-4794-86c3-50e1f009c845"));
		public global::Allors.Meta.RoleType Addresses  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a365f0ee-a94f-4435-a7b1-c92ac804a845"));
		public global::Allors.Meta.RoleType Owner  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("58d7df91-fbc5-4bcb-9398-a9957949402b"));
		public global::Allors.Meta.RoleType Logo  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b1f5b479-e4d0-46de-8ad4-347076d9f180"));
		public global::Allors.Meta.RoleType Size  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("26a60588-3c90-4f4e-9bb6-8f45fe8f9606"));
		public global::Allors.Meta.RoleType MainAddress  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2c3bc00d-6715-4c1b-be78-753f7f306df0"));
		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d73fd9a4-13ee-4fa9-8925-d93eca328bf6"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType BadUIsWhereCompanyOne  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("37c64e26-a391-4c7b-98fb-53ccb5fbc795"));
		public global::Allors.Meta.AssociationType BadUIsWhereCompanyMany  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("718eaf0b-1b62-43b2-b336-c9820d806b28"));

		public global::Allors.Meta.MethodType JustDoIt  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("55aac529-beae-4d29-b069-decda86710a9"));
		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class OrganisationBuilder : Allors.ObjectBuilder<Organisation> , ObjectBuilder, UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public OrganisationBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Organisation instance)
		{

			instance.Information = this.Information;
		
		

			instance.Name = this.Name;
		
		

			instance.Description = this.Description;
		
		
			

			if(this.Incorporated.HasValue)
			{
				instance.Incorporated = this.Incorporated.Value;
			}			
		
		
			

			if(this.IsSupplier.HasValue)
			{
				instance.IsSupplier = this.IsSupplier.Value;
			}			
		
		
			

			if(this.IncorporationDate.HasValue)
			{
				instance.IncorporationDate = this.IncorporationDate.Value;
			}			
		
		

			instance.Size = this.Size;
		
		
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
			if(this.Shareholders!=null)
			{
				instance.Shareholders = this.Shareholders.ToArray();
			}
		
			if(this.Employees!=null)
			{
				instance.Employees = this.Employees.ToArray();
			}
		
			if(this.Addresses!=null)
			{
				instance.Addresses = this.Addresses.ToArray();
			}
		

			instance.Owner = this.Owner;

		

			instance.Logo = this.Logo;

		

			instance.MainAddress = this.MainAddress;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Information {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithInformation(global::System.String value)
		        {
				    if(this.Information!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Information = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> Shareholders {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithShareholder(Person value)
		        {
					if(this.Shareholders == null)
					{
						this.Shareholders = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Shareholders.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> Employees {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithEmployee(Person value)
		        {
					if(this.Employees == null)
					{
						this.Employees = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.Employees.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? Incorporated {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIncorporated(global::System.Boolean? value)
		        {
				    if(this.Incorporated!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Incorporated = value;
		            return this;
		        }	

				public global::System.Boolean? IsSupplier {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIsSupplier(global::System.Boolean? value)
		        {
				    if(this.IsSupplier!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsSupplier = value;
		            return this;
		        }	

				public global::System.DateTime? IncorporationDate {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithIncorporationDate(global::System.DateTime? value)
		        {
				    if(this.IncorporationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IncorporationDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Address> Addresses {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithAddress(Address value)
		        {
					if(this.Addresses == null)
					{
						this.Addresses = new global::System.Collections.Generic.List<Address>(); 
					}
		            this.Addresses.Add(value);
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public Media Logo {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithLogo(Media value)
		        {
		            if(this.Logo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Logo = value;
		            return this;
		        }		

				
				public global::System.String Size {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithSize(global::System.String value)
		        {
				    if(this.Size!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Size = value;
		            return this;
		        }	

				public Address MainAddress {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithMainAddress(Address value)
		        {
		            if(this.MainAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MainAddress = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OrganisationBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrganisationBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Organisations : global::Allors.ObjectsBase<Organisation>
	{
		public static readonly OrganisationMeta Meta = OrganisationMeta.Instance;

		public Organisations(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Subdependee : Allors.IObject , Object
	{
		public static readonly SubdependeeMeta Meta = SubdependeeMeta.Instance;

		private readonly IStrategy strategy;

		public Subdependee(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Subdependee Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Subdependee) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Int32? Subcounter 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Subcounter);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subcounter, value);
			}
		}

		virtual public bool ExistSubcounter{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subcounter);
			}
		}

		virtual public void RemoveSubcounter()
		{
			Strategy.RemoveUnitRole(Meta.Subcounter);
		}



		virtual public Dependee DependeeWhereSubdependee
		{ 
			get
			{
				return (Dependee) Strategy.GetCompositeAssociation(Meta.DependeeWhereSubdependee);
			}
		} 

		virtual public bool ExistDependeeWhereSubdependee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.DependeeWhereSubdependee);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SubdependeeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SubdependeeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SubdependeeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SubdependeeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SubdependeeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SubdependeeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SubdependeeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SubdependeeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SubdependeeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SubdependeeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class SubdependeeMeta
	{
		public static readonly SubdependeeMeta Instance = new SubdependeeMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("46a437d1-455b-4ddd-b83c-068938c352bd"));

		public global::Allors.Meta.RoleType Subcounter  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6765f2b5-bf55-4713-a693-946fc0846b27"));

		public global::Allors.Meta.AssociationType DependeeWhereSubdependee  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("97c6a03f-f0c7-4c7d-b40f-1353e34431bd"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class SubdependeeBuilder : Allors.ObjectBuilder<Subdependee> , ObjectBuilder, global::System.IDisposable
	{		
		public SubdependeeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Subdependee instance)
		{
			

			if(this.Subcounter.HasValue)
			{
				instance.Subcounter = this.Subcounter.Value;
			}			
		
		
		}


				public global::System.Int32? Subcounter {get; set;}

				/// <exclude/>
				public SubdependeeBuilder WithSubcounter(global::System.Int32? value)
		        {
				    if(this.Subcounter!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subcounter = value;
		            return this;
		        }	


	}

	public partial class Subdependees : global::Allors.ObjectsBase<Subdependee>
	{
		public static readonly SubdependeeMeta Meta = SubdependeeMeta.Instance;

		public Subdependees(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Unit : Allors.IObject , Object, AccessControlledObject
	{
		public static readonly UnitMeta Meta = UnitMeta.Instance;

		private readonly IStrategy strategy;

		public Unit(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Unit Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Unit) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Byte[] AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsBinary, value);
			}
		}

		virtual public bool ExistAllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsBinary);
			}
		}

		virtual public void RemoveAllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.AllorsBinary);
		}


		virtual public global::System.DateTime? AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDateTime, value);
			}
		}

		virtual public bool ExistAllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDateTime);
			}
		}

		virtual public void RemoveAllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDateTime);
		}


		virtual public global::System.Boolean? AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsBoolean, value);
			}
		}

		virtual public bool ExistAllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsBoolean);
			}
		}

		virtual public void RemoveAllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.AllorsBoolean);
		}


		virtual public global::System.Double? AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsFloat, value);
			}
		}

		virtual public bool ExistAllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsFloat);
			}
		}

		virtual public void RemoveAllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.AllorsFloat);
		}


		virtual public global::System.Int32? AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsInteger, value);
			}
		}

		virtual public bool ExistAllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsInteger);
			}
		}

		virtual public void RemoveAllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.AllorsInteger);
		}


		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString);
		}


		virtual public global::System.Guid? AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsUnique, value);
			}
		}

		virtual public bool ExistAllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsUnique);
			}
		}

		virtual public void RemoveAllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.AllorsUnique);
		}


		virtual public global::System.Decimal? AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsDecimal, value);
			}
		}

		virtual public bool ExistAllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsDecimal);
			}
		}

		virtual public void RemoveAllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.AllorsDecimal);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new UnitOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new UnitOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new UnitOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new UnitOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new UnitOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new UnitOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new UnitOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new UnitOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new UnitOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new UnitOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class UnitMeta
	{
		public static readonly UnitMeta Instance = new UnitMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4e501cd6-807c-4f10-b60b-acd1d80042cd"));

		public global::Allors.Meta.RoleType AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4d4428fc-bac0-47af-ab5e-7c7b87880206"));
		public global::Allors.Meta.RoleType AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a462ce40-5885-48c6-b327-7e4c096a99fa"));
		public global::Allors.Meta.RoleType AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b5dd13eb-8923-4a66-94df-af5fadb42f1c"));
		public global::Allors.Meta.RoleType AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4a95fb0d-6849-499e-a140-6c942fb06f4d"));
		public global::Allors.Meta.RoleType AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("07070cb0-6e65-4a00-8754-50cf594ed9e1"));
		public global::Allors.Meta.RoleType AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f27c150a-ce8d-4ff3-9507-ccb0b91aa0c2"));
		public global::Allors.Meta.RoleType AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("25dd4abf-c6da-4739-aed0-8528d1c00b8b"));
		public global::Allors.Meta.RoleType AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1408cd42-3125-48c7-86d7-4a5f71e75e25"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class UnitBuilder : Allors.ObjectBuilder<Unit> , ObjectBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public UnitBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Unit instance)
		{

			instance.AllorsBinary = this.AllorsBinary;
		
		
			

			if(this.AllorsDateTime.HasValue)
			{
				instance.AllorsDateTime = this.AllorsDateTime.Value;
			}			
		
		
			

			if(this.AllorsBoolean.HasValue)
			{
				instance.AllorsBoolean = this.AllorsBoolean.Value;
			}			
		
		
			

			if(this.AllorsFloat.HasValue)
			{
				instance.AllorsFloat = this.AllorsFloat.Value;
			}			
		
		
			

			if(this.AllorsInteger.HasValue)
			{
				instance.AllorsInteger = this.AllorsInteger.Value;
			}			
		
		

			instance.AllorsString = this.AllorsString;
		
		
			

			if(this.AllorsUnique.HasValue)
			{
				instance.AllorsUnique = this.AllorsUnique.Value;
			}			
		
		
			

			if(this.AllorsDecimal.HasValue)
			{
				instance.AllorsDecimal = this.AllorsDecimal.Value;
			}			
		
		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.Byte[] AllorsBinary {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsBinary(global::System.Byte[] value)
		        {
				    if(this.AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsBinary = value;
		            return this;
		        }	

				public global::System.DateTime? AllorsDateTime {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Boolean? AllorsBoolean {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Double? AllorsFloat {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsFloat(global::System.Double? value)
		        {
				    if(this.AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsFloat = value;
		            return this;
		        }	

				public global::System.Int32? AllorsInteger {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsInteger(global::System.Int32? value)
		        {
				    if(this.AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsInteger = value;
		            return this;
		        }	

				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	

				public global::System.Guid? AllorsUnique {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsUnique(global::System.Guid? value)
		        {
				    if(this.AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsUnique = value;
		            return this;
		        }	

				public global::System.Decimal? AllorsDecimal {get; set;}

				/// <exclude/>
				public UnitBuilder WithAllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public UnitBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public UnitBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Units : global::Allors.ObjectsBase<Unit>
	{
		public static readonly UnitMeta Meta = UnitMeta.Instance;

		public Units(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class One : Allors.IObject , Object, Shared
	{
		public static readonly OneMeta Meta = OneMeta.Instance;

		private readonly IStrategy strategy;

		public One(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static One Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (One) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Two Two
		{ 
			get
			{
				return (Two) Strategy.GetCompositeRole(Meta.Two);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Two ,value);
			}
		}

		virtual public bool ExistTwo
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Two);
			}
		}

		virtual public void RemoveTwo()
		{
			Strategy.RemoveCompositeRole(Meta.Two);
		}



		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new OneOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new OneOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new OneOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new OneOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new OneOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new OneOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new OneOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new OneOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new OneOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new OneOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class OneMeta
	{
		public static readonly OneMeta Instance = new OneMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5d9b9cad-3720-47c3-9693-289698bf3dd0"));

		public global::Allors.Meta.RoleType Two  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("355b2e85-e597-4f88-9dca-45cbfbde527f"));

		public global::Allors.Meta.AssociationType TwosWhereShared  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fd97db6d-d946-47ba-a2a0-88b732457b96"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class OneBuilder : Allors.ObjectBuilder<One> , ObjectBuilder, SharedBuilder, global::System.IDisposable
	{		
		public OneBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(One instance)
		{

			instance.Two = this.Two;

		
		}


				public Two Two {get; set;}

				/// <exclude/>
				public OneBuilder WithTwo(Two value)
		        {
		            if(this.Two!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Two = value;
		            return this;
		        }		

				

	}

	public partial class Ones : global::Allors.ObjectsBase<One>
	{
		public static readonly OneMeta Meta = OneMeta.Instance;

		public Ones(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class From : Allors.IObject , Object
	{
		public static readonly FromMeta Meta = FromMeta.Instance;

		private readonly IStrategy strategy;

		public From(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static From Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (From) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<To> Tos
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Tos);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Tos, value);
			}
		}

		virtual public void AddTo (To value)
		{
			Strategy.AddCompositeRole(Meta.Tos, value);
		}

		virtual public void RemoveTo (To value)
		{
			Strategy.RemoveCompositeRole(Meta.Tos,value);
		}

		virtual public bool ExistTos
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Tos);
			}
		}

		virtual public void RemoveTos()
		{
			Strategy.RemoveCompositeRoles(Meta.Tos);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new FromOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new FromOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new FromOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new FromOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new FromOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new FromOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new FromOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new FromOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new FromOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new FromOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class FromMeta
	{
		public static readonly FromMeta Instance = new FromMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6217b428-4ad0-4f7f-ad4b-e334cf0b3ab1"));

		public global::Allors.Meta.RoleType Tos  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("775a29b8-6e21-4545-9881-d52f6eb7db8b"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class FromBuilder : Allors.ObjectBuilder<From> , ObjectBuilder, global::System.IDisposable
	{		
		public FromBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(From instance)
		{
			if(this.Tos!=null)
			{
				instance.Tos = this.Tos.ToArray();
			}
		
		}


				public global::System.Collections.Generic.List<To> Tos {get; set;}	

				/// <exclude/>
				public FromBuilder WithTo(To value)
		        {
					if(this.Tos == null)
					{
						this.Tos = new global::System.Collections.Generic.List<To>(); 
					}
		            this.Tos.Add(value);
		            return this;
		        }		

				

	}

	public partial class Froms : global::Allors.ObjectsBase<From>
	{
		public static readonly FromMeta Meta = FromMeta.Instance;

		public Froms(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class StatefulCompany : Allors.IObject , Object
	{
		public static readonly StatefulCompanyMeta Meta = StatefulCompanyMeta.Instance;

		private readonly IStrategy strategy;

		public StatefulCompany(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static StatefulCompany Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (StatefulCompany) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Person Employee
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Employee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Employee ,value);
			}
		}

		virtual public bool ExistEmployee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Employee);
			}
		}

		virtual public void RemoveEmployee()
		{
			Strategy.RemoveCompositeRole(Meta.Employee);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public Person Manager
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Manager);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Manager ,value);
			}
		}

		virtual public bool ExistManager
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Manager);
			}
		}

		virtual public void RemoveManager()
		{
			Strategy.RemoveCompositeRole(Meta.Manager);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new StatefulCompanyOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new StatefulCompanyOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new StatefulCompanyOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new StatefulCompanyOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new StatefulCompanyOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new StatefulCompanyOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new StatefulCompanyOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new StatefulCompanyOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new StatefulCompanyOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new StatefulCompanyOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class StatefulCompanyMeta
	{
		public static readonly StatefulCompanyMeta Instance = new StatefulCompanyMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62859bfb-7949-4f7f-a428-658447576d0a"));

		public global::Allors.Meta.RoleType Employee  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2a482b25-a154-4306-87f3-b6cd7af3c80d"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("94570d2c-2a5e-451f-905e-6ca61a469a31"));
		public global::Allors.Meta.RoleType Manager  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3becaaa8-7b49-4616-8d79-a7bf04d9e666"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class StatefulCompanyBuilder : Allors.ObjectBuilder<StatefulCompany> , ObjectBuilder, global::System.IDisposable
	{		
		public StatefulCompanyBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(StatefulCompany instance)
		{

			instance.Name = this.Name;
		
		

			instance.Employee = this.Employee;

		

			instance.Manager = this.Manager;

		
		}


				public Person Employee {get; set;}

				/// <exclude/>
				public StatefulCompanyBuilder WithEmployee(Person value)
		        {
		            if(this.Employee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Employee = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public StatefulCompanyBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public Person Manager {get; set;}

				/// <exclude/>
				public StatefulCompanyBuilder WithManager(Person value)
		        {
		            if(this.Manager!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Manager = value;
		            return this;
		        }		

				

	}

	public partial class StatefulCompanies : global::Allors.ObjectsBase<StatefulCompany>
	{
		public static readonly StatefulCompanyMeta Meta = StatefulCompanyMeta.Instance;

		public StatefulCompanies(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class C1 : Allors.IObject , Object, I1, AccessControlledObject
	{
		public static readonly C1Meta Meta = C1Meta.Instance;

		private readonly IStrategy strategy;

		public C1(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static C1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C1) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public I1 C1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1One2One ,value);
			}
		}

		virtual public bool ExistC1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1One2One);
			}
		}

		virtual public void RemoveC1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2One);
		}


		virtual public global::System.String C1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsString, value);
			}
		}

		virtual public bool ExistC1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsString);
			}
		}

		virtual public void RemoveC1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsString);
		}


		virtual public C2 C1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2Many2One ,value);
			}
		}

		virtual public bool ExistC1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2Many2One);
			}
		}

		virtual public void RemoveC1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2One);
		}


		virtual public I2 C1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2One2One ,value);
			}
		}

		virtual public bool ExistC1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2One2One);
			}
		}

		virtual public void RemoveC1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2One);
		}


		virtual public C1 C1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1One2One ,value);
			}
		}

		virtual public bool ExistC1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1One2One);
			}
		}

		virtual public void RemoveC1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2One);
		}


		virtual public I1 C1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C1I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I1Many2One ,value);
			}
		}

		virtual public bool ExistC1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I1Many2One);
			}
		}

		virtual public void RemoveC1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2One);
		}


		virtual public global::Allors.Extent<I1> C1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1Many2Manies, value);
			}
		}

		virtual public void AddC1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1Many2Manies, value);
		}

		virtual public void RemoveC1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1Many2Manies,value);
		}

		virtual public bool ExistC1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1Many2Manies);
			}
		}

		virtual public void RemoveC1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1Many2Manies);
		}


		virtual public global::Allors.Extent<I2> C1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2One2Manies, value);
			}
		}

		virtual public void AddC1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2One2Manies, value);
		}

		virtual public void RemoveC1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2One2Manies,value);
		}

		virtual public bool ExistC1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2One2Manies);
			}
		}

		virtual public void RemoveC1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2One2Manies);
		}


		virtual public global::System.Decimal? C1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDecimal, value);
			}
		}

		virtual public bool ExistC1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDecimal);
			}
		}

		virtual public void RemoveC1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDecimal);
		}


		virtual public global::Allors.Extent<C1> C1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1Many2Manies, value);
			}
		}

		virtual public void AddC1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1Many2Manies, value);
		}

		virtual public void RemoveC1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2Manies,value);
		}

		virtual public bool ExistC1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1Many2Manies);
			}
		}

		virtual public void RemoveC1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1Many2Manies);
		}


		virtual public global::Allors.Extent<I12> C1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12Many2Manies, value);
			}
		}

		virtual public void AddC1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12Many2Manies, value);
		}

		virtual public void RemoveC1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2Manies,value);
		}

		virtual public bool ExistC1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12Many2Manies);
			}
		}

		virtual public void RemoveC1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12Many2Manies);
		}


		virtual public global::System.Byte[] C1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBinary, value);
			}
		}

		virtual public bool ExistC1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBinary);
			}
		}

		virtual public void RemoveC1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBinary);
		}


		virtual public global::Allors.Extent<I12> C1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I12One2Manies, value);
			}
		}

		virtual public void AddC1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C1I12One2Manies, value);
		}

		virtual public void RemoveC1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2Manies,value);
		}

		virtual public bool ExistC1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I12One2Manies);
			}
		}

		virtual public void RemoveC1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I12One2Manies);
		}


		virtual public global::Allors.Extent<C2> C1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2One2Manies, value);
			}
		}

		virtual public void AddC1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2One2Manies, value);
		}

		virtual public void RemoveC1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2Manies,value);
		}

		virtual public bool ExistC1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2One2Manies);
			}
		}

		virtual public void RemoveC1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2One2Manies);
		}


		virtual public global::Allors.Extent<C1> C1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C1One2Manies, value);
			}
		}

		virtual public void AddC1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C1C1One2Manies, value);
		}

		virtual public void RemoveC1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C1One2Manies,value);
		}

		virtual public bool ExistC1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C1One2Manies);
			}
		}

		virtual public void RemoveC1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C1One2Manies);
		}


		virtual public global::System.String AllorsStringMax 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsStringMax);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsStringMax, value);
			}
		}

		virtual public bool ExistAllorsStringMax{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsStringMax);
			}
		}

		virtual public void RemoveAllorsStringMax()
		{
			Strategy.RemoveUnitRole(Meta.AllorsStringMax);
		}


		virtual public C1 C1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C1C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C1Many2One ,value);
			}
		}

		virtual public bool ExistC1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C1Many2One);
			}
		}

		virtual public void RemoveC1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C1Many2One);
		}


		virtual public global::System.Boolean? C1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsBoolean, value);
			}
		}

		virtual public bool ExistC1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsBoolean);
			}
		}

		virtual public void RemoveC1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsBoolean);
		}


		virtual public I12 C1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12One2One ,value);
			}
		}

		virtual public bool ExistC1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12One2One);
			}
		}

		virtual public void RemoveC1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12One2One);
		}


		virtual public I12 C1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C1I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I12Many2One ,value);
			}
		}

		virtual public bool ExistC1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I12Many2One);
			}
		}

		virtual public void RemoveC1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I12Many2One);
		}


		virtual public global::Allors.Extent<I2> C1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I2Many2Manies, value);
			}
		}

		virtual public void AddC1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C1I2Many2Manies, value);
		}

		virtual public void RemoveC1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2Manies,value);
		}

		virtual public bool ExistC1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I2Many2Manies);
			}
		}

		virtual public void RemoveC1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I2Many2Manies);
		}


		virtual public global::System.Guid? C1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsUnique, value);
			}
		}

		virtual public bool ExistC1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsUnique);
			}
		}

		virtual public void RemoveC1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsUnique);
		}


		virtual public I2 C1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C1I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1I2Many2One ,value);
			}
		}

		virtual public bool ExistC1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1I2Many2One);
			}
		}

		virtual public void RemoveC1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1I2Many2One);
		}


		virtual public global::Allors.Extent<I1> C1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1I1One2Manies, value);
			}
		}

		virtual public void AddC1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C1I1One2Manies, value);
		}

		virtual public void RemoveC1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1I1One2Manies,value);
		}

		virtual public bool ExistC1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1I1One2Manies);
			}
		}

		virtual public void RemoveC1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1I1One2Manies);
		}


		virtual public C2 C1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C1C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C1C2One2One ,value);
			}
		}

		virtual public bool ExistC1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C1C2One2One);
			}
		}

		virtual public void RemoveC1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C1C2One2One);
		}


		virtual public global::System.DateTime? C1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.C1AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsDateTime, value);
			}
		}

		virtual public bool ExistC1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsDateTime);
			}
		}

		virtual public void RemoveC1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsDateTime);
		}


		virtual public global::System.Double? C1AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C1AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsFloat, value);
			}
		}

		virtual public bool ExistC1AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsFloat);
			}
		}

		virtual public void RemoveC1AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsFloat);
		}


		virtual public global::Allors.Extent<C2> C1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C1C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C1C2Many2Manies, value);
			}
		}

		virtual public void AddC1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C1C2Many2Manies, value);
		}

		virtual public void RemoveC1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C1C2Many2Manies,value);
		}

		virtual public bool ExistC1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C1C2Many2Manies);
			}
		}

		virtual public void RemoveC1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C1C2Many2Manies);
		}


		virtual public global::System.Int32? C1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C1AllorsInteger, value);
			}
		}

		virtual public bool ExistC1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C1AllorsInteger);
			}
		}

		virtual public void RemoveC1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C1AllorsInteger);
		}


		virtual public I1 I1I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1Many2One ,value);
			}
		}

		virtual public bool ExistI1I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1Many2One);
			}
		}

		virtual public void RemoveI1I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2One);
		}


		virtual public global::Allors.Extent<I12> I1I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12Many2Manies, value);
			}
		}

		virtual public void AddI1I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12Many2Manies, value);
		}

		virtual public void RemoveI1I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2Manies,value);
		}

		virtual public bool ExistI1I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12Many2Manies);
			}
		}

		virtual public void RemoveI1I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12Many2Manies);
		}


		virtual public global::Allors.Extent<I2> I1I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2Many2Manies, value);
			}
		}

		virtual public void AddI1I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2Many2Manies, value);
		}

		virtual public void RemoveI1I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2Manies,value);
		}

		virtual public bool ExistI1I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2Many2Manies);
			}
		}

		virtual public void RemoveI1I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2Many2Manies);
		}


		virtual public I2 I1I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2Many2One ,value);
			}
		}

		virtual public bool ExistI1I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2Many2One);
			}
		}

		virtual public void RemoveI1I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2Many2One);
		}


		virtual public global::System.String I1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsString, value);
			}
		}

		virtual public bool ExistI1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsString);
			}
		}

		virtual public void RemoveI1AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsString);
		}


		virtual public I12 I1I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12Many2One ,value);
			}
		}

		virtual public bool ExistI1I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12Many2One);
			}
		}

		virtual public void RemoveI1I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12Many2One);
		}


		virtual public global::System.DateTime? I1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I1AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDateTime, value);
			}
		}

		virtual public bool ExistI1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDateTime);
			}
		}

		virtual public void RemoveI1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDateTime);
		}


		virtual public global::Allors.Extent<I2> I1I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I2One2Manies, value);
			}
		}

		virtual public void AddI1I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I1I2One2Manies, value);
		}

		virtual public void RemoveI1I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2Manies,value);
		}

		virtual public bool ExistI1I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I2One2Manies);
			}
		}

		virtual public void RemoveI1I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I2One2Manies);
		}


		virtual public global::Allors.Extent<C2> I1C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2One2Manies, value);
			}
		}

		virtual public void AddI1C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2One2Manies, value);
		}

		virtual public void RemoveI1C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2Manies,value);
		}

		virtual public bool ExistI1C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2One2Manies);
			}
		}

		virtual public void RemoveI1C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2One2Manies);
		}


		virtual public C1 I1C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1One2One ,value);
			}
		}

		virtual public bool ExistI1C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1One2One);
			}
		}

		virtual public void RemoveI1C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2One);
		}


		virtual public global::System.Int32? I1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsInteger, value);
			}
		}

		virtual public bool ExistI1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsInteger);
			}
		}

		virtual public void RemoveI1AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsInteger);
		}


		virtual public global::Allors.Extent<C2> I1C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C2Many2Manies, value);
			}
		}

		virtual public void AddI1C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I1C2Many2Manies, value);
		}

		virtual public void RemoveI1C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2Manies,value);
		}

		virtual public bool ExistI1C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C2Many2Manies);
			}
		}

		virtual public void RemoveI1C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C2Many2Manies);
		}


		virtual public global::Allors.Extent<I1> I1I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1One2Manies, value);
			}
		}

		virtual public void AddI1I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1One2Manies, value);
		}

		virtual public void RemoveI1I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2Manies,value);
		}

		virtual public bool ExistI1I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1One2Manies);
			}
		}

		virtual public void RemoveI1I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1One2Manies);
		}


		virtual public global::Allors.Extent<I1> I1I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I1Many2Manies, value);
			}
		}

		virtual public void AddI1I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I1I1Many2Manies, value);
		}

		virtual public void RemoveI1I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I1Many2Manies,value);
		}

		virtual public bool ExistI1I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I1Many2Manies);
			}
		}

		virtual public void RemoveI1I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I1Many2Manies);
		}


		virtual public global::System.Boolean? I1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBoolean, value);
			}
		}

		virtual public bool ExistI1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBoolean);
			}
		}

		virtual public void RemoveI1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBoolean);
		}


		virtual public global::System.Decimal? I1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsDecimal, value);
			}
		}

		virtual public bool ExistI1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsDecimal);
			}
		}

		virtual public void RemoveI1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsDecimal);
		}


		virtual public I12 I1I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I1I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I12One2One ,value);
			}
		}

		virtual public bool ExistI1I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I12One2One);
			}
		}

		virtual public void RemoveI1I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2One);
		}


		virtual public I2 I1I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I1I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I2One2One ,value);
			}
		}

		virtual public bool ExistI1I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I2One2One);
			}
		}

		virtual public void RemoveI1I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I2One2One);
		}


		virtual public C2 I1C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2One2One ,value);
			}
		}

		virtual public bool ExistI1C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2One2One);
			}
		}

		virtual public void RemoveI1C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2One2One);
		}


		virtual public global::Allors.Extent<C1> I1C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1One2Manies, value);
			}
		}

		virtual public void AddI1C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1One2Manies, value);
		}

		virtual public void RemoveI1C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1One2Manies,value);
		}

		virtual public bool ExistI1C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1One2Manies);
			}
		}

		virtual public void RemoveI1C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1One2Manies);
		}


		virtual public global::System.Byte[] I1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsBinary, value);
			}
		}

		virtual public bool ExistI1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsBinary);
			}
		}

		virtual public void RemoveI1AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsBinary);
		}


		virtual public global::Allors.Extent<C1> I1C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1C1Many2Manies, value);
			}
		}

		virtual public void AddI1C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I1C1Many2Manies, value);
		}

		virtual public void RemoveI1C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2Manies,value);
		}

		virtual public bool ExistI1C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1C1Many2Manies);
			}
		}

		virtual public void RemoveI1C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1C1Many2Manies);
		}


		virtual public global::System.Double? I1AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I1AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsFloat, value);
			}
		}

		virtual public bool ExistI1AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsFloat);
			}
		}

		virtual public void RemoveI1AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsFloat);
		}


		virtual public I1 I1I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I1I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1I1One2One ,value);
			}
		}

		virtual public bool ExistI1I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1I1One2One);
			}
		}

		virtual public void RemoveI1I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1I1One2One);
		}


		virtual public C1 I1C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I1C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C1Many2One ,value);
			}
		}

		virtual public bool ExistI1C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C1Many2One);
			}
		}

		virtual public void RemoveI1C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C1Many2One);
		}


		virtual public global::Allors.Extent<I12> I1I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I1I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I1I12One2Manies, value);
			}
		}

		virtual public void AddI1I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I1I12One2Manies, value);
		}

		virtual public void RemoveI1I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I1I12One2Manies,value);
		}

		virtual public bool ExistI1I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I1I12One2Manies);
			}
		}

		virtual public void RemoveI1I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I1I12One2Manies);
		}


		virtual public C2 I1C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I1C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I1C2Many2One ,value);
			}
		}

		virtual public bool ExistI1C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I1C2Many2One);
			}
		}

		virtual public void RemoveI1C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I1C2Many2One);
		}


		virtual public global::System.Guid? I1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I1AllorsUnique, value);
			}
		}

		virtual public bool ExistI1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I1AllorsUnique);
			}
		}

		virtual public void RemoveI1AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I1AllorsUnique);
		}


		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One ,value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One);
		}


		virtual public global::System.Double? I12AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsFloat, value);
			}
		}

		virtual public bool ExistI12AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsFloat);
			}
		}

		virtual public void RemoveI12AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsFloat);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One ,value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One);
		}


		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Manies, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Manies, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Manies,value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Manies);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Manies);
		}


		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Manies, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Manies, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Manies,value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Manies);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Manies);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Manies, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Manies, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Manies,value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Manies);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Manies);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Manies, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Manies, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Manies,value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Manies);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Manies);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Manies, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Manies, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Manies,value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Manies);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Manies);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Manies, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Manies, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Manies,value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Manies);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Manies);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One ,value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One);
		}


		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique);
		}


		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Manies, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Manies, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Manies,value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Manies);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Manies);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One ,value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One ,value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One ,value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependencies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependencies, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependencies, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependencies,value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependencies);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependencies);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Manies, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Manies, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Manies,value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Manies);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Manies);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One ,value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One ,value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One);
		}


		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One ,value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Manies, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Manies, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Manies,value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Manies);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Manies);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One ,value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One);
		}


		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I12AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDateTime, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDateTime);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDateTime);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens);
		}



		virtual public global::Allors.Extent<I2> I2sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC1Many2One);
			}
		}

		virtual public bool ExistI2sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC1Many2One);
			}
		}


		virtual public I2 I2WhereC1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC1One2Many);
			}
		} 

		virtual public bool ExistI2WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC1One2Many);
			}
		}


		virtual public I2 I2WhereC1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC1One2One);
			}
		} 

		virtual public bool ExistI2WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI2sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC1Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI12sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC1Many2Many);
			}
		}


		virtual public I12 I12WhereC1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC1One2One);
			}
		} 

		virtual public bool ExistI12WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC1One2One);
			}
		}


		virtual public I12 I12WhereC1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC1One2Many);
			}
		} 

		virtual public bool ExistI12WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC1Many2One);
			}
		}

		virtual public bool ExistI12sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC1Many2One);
			}
		}


		virtual public I1 I1WhereC1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC1One2One);
			}
		} 

		virtual public bool ExistI1WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC1One2One);
			}
		}


		virtual public I1 I1WhereC1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC1One2Many);
			}
		} 

		virtual public bool ExistI1WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC1Many2Many);
			}
		}

		virtual public bool ExistI1sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC1Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC1Many2One);
			}
		}

		virtual public bool ExistI1sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC1Many2One);
			}
		}


		virtual public C1 C1WhereC1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1One2One);
			}
		} 

		virtual public bool ExistC1WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1Many2Many);
			}
		}

		virtual public bool ExistC1sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1Many2Many);
			}
		}


		virtual public C1 C1WhereC1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC1One2Many);
			}
		} 

		virtual public bool ExistC1WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC1Many2One);
			}
		}

		virtual public bool ExistC1sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC1Many2One);
			}
		}


		virtual public C2 C2WhereC1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC1One2One);
			}
		} 

		virtual public bool ExistC2WhereC1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC1One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC1Many2Many);
			}
		}

		virtual public bool ExistC2sWhereC1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC1Many2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC1Many2One);
			}
		}

		virtual public bool ExistC2sWhereC1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC1Many2One);
			}
		}


		virtual public C2 C2WhereC1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC1One2Many);
			}
		} 

		virtual public bool ExistC2WhereC1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC1One2Many);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI1Many2One);
			}
		}

		virtual public bool ExistI2sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI1Many2Many);
			}
		}


		virtual public I2 I2WhereI1One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI1One2One);
			}
		} 

		virtual public bool ExistI2WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI1One2One);
			}
		}


		virtual public I2 I2WhereI1One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI1One2Many);
			}
		} 

		virtual public bool ExistI2WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI1Many2One);
			}
		}

		virtual public bool ExistI12sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI1Many2Many);
			}
		}


		virtual public I12 I12WhereI1One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI1One2Many);
			}
		} 

		virtual public bool ExistI12WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI1One2Many);
			}
		}


		virtual public I12 I12WhereI1One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI1One2One);
			}
		} 

		virtual public bool ExistI12WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1Many2One);
			}
		}

		virtual public bool ExistI1sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1Many2One);
			}
		}


		virtual public I1 I1WhereI1One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1One2Many);
			}
		} 

		virtual public bool ExistI1WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI1Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI1Many2Many);
			}
		}


		virtual public I1 I1WhereI1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI1One2One);
			}
		} 

		virtual public bool ExistI1WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI1One2One);
			}
		}


		virtual public C1 C1WhereI1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI1One2One);
			}
		} 

		virtual public bool ExistC1WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI1Many2One);
			}
		}

		virtual public bool ExistC1sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI1Many2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI1Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI1Many2Many);
			}
		}


		virtual public C1 C1WhereI1One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI1One2Many);
			}
		} 

		virtual public bool ExistC1WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI1Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI1Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI1Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI1Many2Many);
			}
		}


		virtual public C2 C2WhereI1One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI1One2Many);
			}
		} 

		virtual public bool ExistC2WhereI1One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI1One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI1Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI1Many2One);
			}
		}

		virtual public bool ExistC2sWhereI1Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI1Many2One);
			}
		}


		virtual public C2 C2WhereI1One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI1One2One);
			}
		} 

		virtual public bool ExistC2WhereI1One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI1One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}

		virtual public bool ExistI2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}


		virtual public I2 I2WhereI12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		} 

		virtual public bool ExistI2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		}


		virtual public I2 I2WhereI12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2One);
			}
		} 

		virtual public bool ExistI2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}


		virtual public I12 I12WhereI12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		} 

		virtual public bool ExistI12WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		}


		virtual public I12 I12WhereI12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2One);
			}
		} 

		virtual public bool ExistI12WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}

		virtual public bool ExistI12sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}

		virtual public bool ExistI1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}


		virtual public I1 I1WhereI12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2One);
			}
		} 

		virtual public bool ExistI1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2One);
			}
		}


		virtual public I1 I1WhereI12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		} 

		virtual public bool ExistI1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}


		virtual public C1 C1WhereI12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		} 

		virtual public bool ExistC1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		}


		virtual public C1 C1WhereI12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2One);
			}
		} 

		virtual public bool ExistC1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}

		virtual public bool ExistC1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}

		virtual public bool ExistC2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}


		virtual public C2 C2WhereI12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2One);
			}
		} 

		virtual public bool ExistC2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}


		virtual public C2 C2WhereI12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		} 

		virtual public bool ExistC2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		}



		public C1ClassMethod ClassMethod()
		{ 
			var method = new C1ClassMethod(this);
            method.Execute();
            return method;
		}

		public C1ClassMethod ClassMethod(System.Action<C1ClassMethod> action)
		{ 
			var method = new C1ClassMethod(this);
            action(method);
            method.Execute();
            return method;
		}

		public C1Sum Sum()
		{ 
			var method = new C1Sum(this);
            method.Execute();
            return method;
		}

		public C1Sum Sum(System.Action<C1Sum> action)
		{ 
			var method = new C1Sum(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new C1OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new C1OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new C1OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new C1OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new C1OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new C1OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new C1OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new C1OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new C1OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new C1OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public I1InterfaceMethod InterfaceMethod()
		{ 
			var method = new C1InterfaceMethod(this);
            method.Execute();
            return method;
		}

		public I1InterfaceMethod InterfaceMethod(System.Action<I1InterfaceMethod> action)
		{ 
			var method = new C1InterfaceMethod(this);
            action(method);
            method.Execute();
            return method;
		}

		public S1SuperinterfaceMethod SuperinterfaceMethod()
		{ 
			var method = new C1SuperinterfaceMethod(this);
            method.Execute();
            return method;
		}

		public S1SuperinterfaceMethod SuperinterfaceMethod(System.Action<S1SuperinterfaceMethod> action)
		{ 
			var method = new C1SuperinterfaceMethod(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class C1Meta
	{
		public static readonly C1Meta Instance = new C1Meta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7041c691-d896-4628-8f50-1c24f5d03414"));

		public global::Allors.Meta.RoleType C1I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("da5ccb42-7878-45a9-9350-17f0f0a52fd4"));
		public global::Allors.Meta.RoleType C1AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6dc98925-87a7-4959-8095-90eedef0e9a0"));
		public global::Allors.Meta.RoleType C1C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("66a06e06-95e4-43ad-9b45-56687f8a2051"));
		public global::Allors.Meta.RoleType C1I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e7d1e28d-69ad-4d3a-b35a-2d0aaacb67db"));
		public global::Allors.Meta.RoleType C1C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("40ee2908-2556-4bdf-a82f-2ea33e181b91"));
		public global::Allors.Meta.RoleType C1I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8af8fbc6-2f59-4026-9093-5b335dfb8b7f"));
		public global::Allors.Meta.RoleType C1I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("39f62f9e-52d3-47c5-8fd4-44e91d9b78be"));
		public global::Allors.Meta.RoleType C1I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ca30ba2a-627f-43d1-b467-fe0d7cd015cc"));
		public global::Allors.Meta.RoleType C1AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("43ccd07d-b9c4-465c-b2f9-083a36315e85"));
		public global::Allors.Meta.RoleType C1C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c403f160-6486-4207-b32c-aa9ade27a28c"));
		public global::Allors.Meta.RoleType C1I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f225d708-c98f-44ff-9ed8-847cb1ddaacb"));
		public global::Allors.Meta.RoleType C1AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e5cd692c-ab97-4cf8-9f8a-1de733526e74"));
		public global::Allors.Meta.RoleType C1I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("51b3b28e-9017-4a1e-b5ba-06a9b14d88d6"));
		public global::Allors.Meta.RoleType C1C2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c749e58c-0f1d-4946-b35d-878221aac72f"));
		public global::Allors.Meta.RoleType C1C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3d121ffa-0ff5-4627-9ec3-879c2830ff04"));
		public global::Allors.Meta.RoleType AllorsStringMax  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c186bb2f-8e19-468d-8a01-561384e5187d"));
		public global::Allors.Meta.RoleType C1C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e6b21250-194b-4424-8b92-221c6d0e6228"));
		public global::Allors.Meta.RoleType C1AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ad456144-a19e-4c89-845b-9391dbc8f372"));
		public global::Allors.Meta.RoleType C1I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("50bf56c3-f05f-4172-86e1-aefead4a3a8c"));
		public global::Allors.Meta.RoleType C1I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b5b4892d-e1d3-4a4b-a8a4-ac6ed0ff930e"));
		public global::Allors.Meta.RoleType C1I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ce5170b0-347a-49b7-9925-a7a5c5eb2c75"));
		public global::Allors.Meta.RoleType C1AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2721249b-dadd-410d-b4e0-9d4a48e615d1"));
		public global::Allors.Meta.RoleType C1I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2db69dd4-008b-4a17-aba5-6a050f35f7e3"));
		public global::Allors.Meta.RoleType C1I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("89e4802f-7c61-4deb-a243-f78e79578082"));
		public global::Allors.Meta.RoleType C1C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("392f5a47-f181-475c-b5c9-f0b729c8413f"));
		public global::Allors.Meta.RoleType C1AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("610129f7-0c35-4649-9f4b-14698d0d1c77"));
		public global::Allors.Meta.RoleType C1AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("459d20d8-dadd-44e1-aa8a-396e6eab7538"));
		public global::Allors.Meta.RoleType C1C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("608db13d-1778-44a8-94f0-b86fc0f6992d"));
		public global::Allors.Meta.RoleType C1AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2687f5be-eebe-4ffb-a8b2-538134cb6f73"));
		public global::Allors.Meta.RoleType I1I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9fd09ce4-3f52-4889-b018-fd9374656e8c"));
		public global::Allors.Meta.RoleType I1I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("94c8ca3f-45d6-4f70-8b4a-5d469b0ee897"));
		public global::Allors.Meta.RoleType I1I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5e8608ed-7987-40d0-a877-a244d6520554"));
		public global::Allors.Meta.RoleType I1I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("98017570-bc3b-442b-9e51-b16565fa443c"));
		public global::Allors.Meta.RoleType I1AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fec573a7-5ab3-4f30-9b50-7d720b4af4b4"));
		public global::Allors.Meta.RoleType I1I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ec030f88-1060-4c2b-bda1-d9c5dc4fc9d3"));
		public global::Allors.Meta.RoleType I1AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("12824c37-d0d2-4cb9-9481-cad7f5f54976"));
		public global::Allors.Meta.RoleType I1I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4b456e2-b45f-4398-875b-4ba99ead49fe"));
		public global::Allors.Meta.RoleType I1C2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d75a5613-4ed9-494f-accf-352d9e115ba9"));
		public global::Allors.Meta.RoleType I1C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bca02f1e-a026-4c0b-9762-1bd52d49b953"));
		public global::Allors.Meta.RoleType I1AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c9f9dd15-54b4-4847-8b7e-ac88063804a3"));
		public global::Allors.Meta.RoleType I1C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("920f26a7-971a-4771-81b1-af3972c997ff"));
		public global::Allors.Meta.RoleType I1I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6d36c9f9-1426-46a5-8d4f-7275a51c9c17"));
		public global::Allors.Meta.RoleType I1I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9c64a761-136a-43aa-bef9-6bcd1259d591"));
		public global::Allors.Meta.RoleType I1AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("631a2bdb-ceca-43b2-abb8-9c9ea743c9de"));
		public global::Allors.Meta.RoleType I1AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("56e68d93-a62f-4090-a93a-8f0f364b08bd"));
		public global::Allors.Meta.RoleType I1I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("222d2644-197d-4420-a01a-276b35ad61d1"));
		public global::Allors.Meta.RoleType I1I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3950129b-6ac5-4eae-b5c2-de12500b0561"));
		public global::Allors.Meta.RoleType I1C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3899bad1-d563-4f65-85b1-2b274b6a278f"));
		public global::Allors.Meta.RoleType I1C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6303d423-6cc4-4933-9546-4b6b39fa0ae4"));
		public global::Allors.Meta.RoleType I1AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bbd469af-25f5-47aa-86f6-80d3bba53ce5"));
		public global::Allors.Meta.RoleType I1C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7da3b7ea-2e1a-400c-adbf-436d35720ae9"));
		public global::Allors.Meta.RoleType I1AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e33e809e-bbd3-4ecc-b46e-e233c5c93ce6"));
		public global::Allors.Meta.RoleType I1I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("911abf5b-ea84-4ffe-b6fb-558b4af50503"));
		public global::Allors.Meta.RoleType I1C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2598d7df-a764-4b6e-bf91-5234404b97c2"));
		public global::Allors.Meta.RoleType I1I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6c708f4b-9fb1-412b-84c8-02f03efede5e"));
		public global::Allors.Meta.RoleType I1C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d51d303-f68b-4dca-9299-a6376e13c90e"));
		public global::Allors.Meta.RoleType I1AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5ebf419f-1c7f-46f2-844c-0f54321888ee"));
		public global::Allors.Meta.RoleType I12AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f7809a25-1b10-4eb0-9309-aeea6efcd7cb"));
		public global::Allors.Meta.RoleType I12C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4c448b25-b56c-4486-b0c8-ac04a3249677"));
		public global::Allors.Meta.RoleType I12AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5f2eff86-71bf-480d-a6ad-1c93fc68b08d"));
		public global::Allors.Meta.RoleType I12I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2e3dc9b9-3700-4090-bafa-2c60050d52d5"));
		public global::Allors.Meta.RoleType I12AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c778c7a7-9cf7-4a7e-8408-e4eb1ca94ce8"));
		public global::Allors.Meta.RoleType I12I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b311c57d-9565-48c1-80d8-1d3cf5a498ea"));
		public global::Allors.Meta.RoleType I12AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("295a4e46-3133-4aff-a1dc-5101e584fb8a"));
		public global::Allors.Meta.RoleType I12I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f266759c-34c5-49a8-8d92-e2bbcb41c86a"));
		public global::Allors.Meta.RoleType I12C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f5928b47-5a57-4be8-a0a9-a729e8e467bb"));
		public global::Allors.Meta.RoleType I12I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("397b339e-0277-4700-a5d1-d9d0ac23c362"));
		public global::Allors.Meta.RoleType I12I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d786aeb4-03bb-419a-90c9-e6ddaa940e93"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a89707e2-e3e1-4d24-9c56-180671e3409c"));
		public global::Allors.Meta.RoleType I12C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4c1f678-a3ae-4707-81e9-b3f3411a5d93"));
		public global::Allors.Meta.RoleType I12I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2073096f-8918-4432-8fa2-42f4fd1a53a1"));
		public global::Allors.Meta.RoleType I12AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("839c7aaa-f044-4b93-97aa-00beeed8f3eb"));
		public global::Allors.Meta.RoleType I12AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cbd73ad2-a4cd-4b65-a3cd-55bb7c6f52bc"));
		public global::Allors.Meta.RoleType I12I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("29f38fb4-8e6a-4f70-9ee9-f6819b9d759e"));
		public global::Allors.Meta.RoleType I12C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee9379c4-ef6a-4c6e-8190-bc71c36ac009"));
		public global::Allors.Meta.RoleType I12I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e68fba09-6113-4b49-a6fa-a09e46a004f1"));
		public global::Allors.Meta.RoleType I12I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("07702752-2c97-4b44-8c43-7c1f2a5e3d0d"));
		public global::Allors.Meta.RoleType Dependencies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d5c22b99-6984-4042-98fd-93fe60dfe5d7"));
		public global::Allors.Meta.RoleType I12I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("09a2a7a1-4713-4c5c-828d-8be40f33d1ae"));
		public global::Allors.Meta.RoleType I12C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2ff52878-3ade-4afe-9961-8f79336bb0a2"));
		public global::Allors.Meta.RoleType I12I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d091625-ec4a-486d-a9be-8f87fe300967"));
		public global::Allors.Meta.RoleType I12AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("79723949-b9ad-40bf-baee-96d001942855"));
		public global::Allors.Meta.RoleType I12I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("72545574-d138-467c-8f21-0c5d15b1d793"));
		public global::Allors.Meta.RoleType I12C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee291df6-6a3e-4d92-a779-879679e1b688"));
		public global::Allors.Meta.RoleType I12C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6e5b98b0-1af3-4e99-8781-37ea97792a24"));
		public global::Allors.Meta.RoleType I12AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("823e8329-0a90-49ed-9b2c-4bfb9db2ee02"));
		public global::Allors.Meta.RoleType DeniedPermissions  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("867765fa-49dc-462f-b430-3c0e264c5283"));
		public global::Allors.Meta.RoleType SecurityTokens  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9f722315-385a-42ab-b84e-83063b0e5b0d"));

		public global::Allors.Meta.AssociationType I2sWhereC1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("923f6373-cbf8-46b1-9b4b-185015ff59ac"));
		public global::Allors.Meta.AssociationType I2WhereC1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("078e1b17-f239-44b2-87d6-6350dd37ac1d"));
		public global::Allors.Meta.AssociationType I2WhereC1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("02a80ccd-31c9-422c-8ad9-d96916dd7741"));
		public global::Allors.Meta.AssociationType I2sWhereC1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("db6935b0-684c-48ce-97d0-6b7183a73adb"));
		public global::Allors.Meta.AssociationType I12sWhereC1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7e707f89-6dd2-44a4-8f85-e00666af4d00"));
		public global::Allors.Meta.AssociationType I12WhereC1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f4399c8b-3394-4c2a-9ff0-16b2ece87fdf"));
		public global::Allors.Meta.AssociationType I12WhereC1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("99b3bf26-3437-4b5b-a786-28c095975a48"));
		public global::Allors.Meta.AssociationType I12sWhereC1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("63297178-60c1-4cbc-a68d-2842385ba266"));
		public global::Allors.Meta.AssociationType I1WhereC1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee0f3844-928b-4968-9077-afd255554c8b"));
		public global::Allors.Meta.AssociationType I1WhereC1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d0b99a68-2104-4c4d-ba4c-73d725e406e9"));
		public global::Allors.Meta.AssociationType I1sWhereC1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b6c7354a-4997-4764-826a-0c9989431d3b"));
		public global::Allors.Meta.AssociationType I1sWhereC1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("202575b6-aaff-46ce-9e8a-e976a8a9d263"));
		public global::Allors.Meta.AssociationType C1WhereC1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2276c942-dd96-41a6-b52f-cd3862c4692f"));
		public global::Allors.Meta.AssociationType C1sWhereC1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("154222cb-0eb8-459d-839c-9c8857bd1c7e"));
		public global::Allors.Meta.AssociationType C1WhereC1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d595765b-5e67-46f2-b19c-c58563dd1ae0"));
		public global::Allors.Meta.AssociationType C1sWhereC1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8a546f48-fc09-48ae-997d-4a6de0cd458a"));
		public global::Allors.Meta.AssociationType C2WhereC1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("56bb9554-819f-418a-9ce1-a91fa704b371"));
		public global::Allors.Meta.AssociationType C2sWhereC1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a373cb01-731b-48be-a387-d057fdb70684"));
		public global::Allors.Meta.AssociationType C2sWhereC1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f2bf51b6-0375-4d77-8881-d4d313d682ef"));
		public global::Allors.Meta.AssociationType C2WhereC1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("92c02837-9e6c-45ad-8772-b97a17afad8c"));
		public global::Allors.Meta.AssociationType I2sWhereI1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("16647879-8af1-4f1c-8ef5-2cec85aa31f4"));
		public global::Allors.Meta.AssociationType I2sWhereI1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7b4a8937-258c-4129-a282-89d5ab924d68"));
		public global::Allors.Meta.AssociationType I2WhereI1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("257fa0c6-43ea-4fe9-8142-dbc172d1e138"));
		public global::Allors.Meta.AssociationType I2WhereI1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee0766c7-0ef6-4ca0-b4a1-c399bc8df823"));
		public global::Allors.Meta.AssociationType I12sWhereI1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d039c8f9-217a-46cc-b428-7480d4991e1e"));
		public global::Allors.Meta.AssociationType I12sWhereI1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("064f5e1b-b5c8-45ee-baf1-094f6a723ede"));
		public global::Allors.Meta.AssociationType I12WhereI1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("870af1ab-075f-4e19-a283-6e6875d362bb"));
		public global::Allors.Meta.AssociationType I12WhereI1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("33bd508e-d754-4533-9ecd-9c8ce8d10c88"));
		public global::Allors.Meta.AssociationType I1sWhereI1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("854c6ec4-51d4-4d68-bd26-4168c26707de"));
		public global::Allors.Meta.AssociationType I1WhereI1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b1c6c329-09e3-4b07-8ddf-e6a4fd8d0285"));
		public global::Allors.Meta.AssociationType I1sWhereI1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("86623fe9-c7cc-4328-85d9-b0dfce2b9a59"));
		public global::Allors.Meta.AssociationType I1WhereI1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f14f50da-635f-47d0-9f3d-28364b767637"));
		public global::Allors.Meta.AssociationType C1WhereI1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d1374c3-a28d-4904-b98a-3a14ceb2f7ea"));
		public global::Allors.Meta.AssociationType C1sWhereI1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("531e89ab-a295-4f72-8496-cdd0d8605d37"));
		public global::Allors.Meta.AssociationType C1sWhereI1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("eca51eab-3815-410f-b4c5-f7e2a1318791"));
		public global::Allors.Meta.AssociationType C1WhereI1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("637c5967-fb6c-45d4-81c4-de5559df785f"));
		public global::Allors.Meta.AssociationType C2sWhereI1Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cae17f3c-a605-4dce-b38d-01c23eea29df"));
		public global::Allors.Meta.AssociationType C2WhereI1One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("02a5ac2c-d0ac-482d-abee-117ed7eaa5ba"));
		public global::Allors.Meta.AssociationType C2sWhereI1Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("eb4f1289-1c6c-4964-a9ba-50f991a96564"));
		public global::Allors.Meta.AssociationType C2WhereI1One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("38cd28ba-c584-4d06-b521-dcc8094c5ed3"));
		public global::Allors.Meta.AssociationType I2sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("278afe09-d0e7-4a41-a60b-b3a01fd14c93"));
		public global::Allors.Meta.AssociationType I2WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b1c5cbb7-3d5f-48b8-b182-aa8a0cc3e72a"));
		public global::Allors.Meta.AssociationType I2WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e5201e06-3fbf-4b9c-aa65-1ee4ee9fabfb"));
		public global::Allors.Meta.AssociationType I2sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1127ff1b-1657-4e18-bdc9-bc90cd8a3c15"));
		public global::Allors.Meta.AssociationType I12sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("732fc964-194e-4ece-bd39-bb3c47b83ff9"));
		public global::Allors.Meta.AssociationType I12WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("83e23750-52eb-4b3f-a675-bfe32570357b"));
		public global::Allors.Meta.AssociationType I12WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8dd3e2b6-805f-4c93-98d8-4864e6807760"));
		public global::Allors.Meta.AssociationType I12sWhereDependency  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("014cf60e-595f-42d5-9146-e7d860396f4d"));
		public global::Allors.Meta.AssociationType I12sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c7469ffd-ffd7-4913-962c-8a7a0b4df3dd"));
		public global::Allors.Meta.AssociationType I1sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("295bfc0e-e123-4ac8-84da-45e8d77b1865"));
		public global::Allors.Meta.AssociationType I1sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d6ccfcb8-623e-4852-a878-d7cb377af853"));
		public global::Allors.Meta.AssociationType I1WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d785350-3f68-4f8d-86d4-74a0cd8adac7"));
		public global::Allors.Meta.AssociationType I1WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a3af5653-20c0-410c-9a6f-160e10e2fe69"));
		public global::Allors.Meta.AssociationType C1sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4a31323-7193-4709-828e-88b2c0f3f8aa"));
		public global::Allors.Meta.AssociationType C1WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3218ac29-2eac-4dc9-acad-2c708c3df994"));
		public global::Allors.Meta.AssociationType C1WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("911a9327-0237-4254-99a7-afff0d6a0369"));
		public global::Allors.Meta.AssociationType C1sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2128418c-6918-4be8-8a02-2bea142b7fc4"));
		public global::Allors.Meta.AssociationType C2sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bc437b29-f883-41c1-b36f-20be37bc9b30"));
		public global::Allors.Meta.AssociationType C2WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("07c026ad-3515-4df0-bee7-ab61d5a9217d"));
		public global::Allors.Meta.AssociationType C2sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1f16f92e-ba99-4553-bd1d-b95ba360468a"));
		public global::Allors.Meta.AssociationType C2WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("de757393-f81a-413c-897b-a47efd48cc79"));

		public global::Allors.Meta.MethodType ClassMethod  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a80e3732-daf2-4ad4-9378-b4bc13e74dde"));
		public global::Allors.Meta.MethodType Sum  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("30bf52c7-7df6-4a34-8333-f114e2752905"));
		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));
		public global::Allors.Meta.MethodType InterfaceMethod  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("336dc840-bdd8-45cc-8b95-dd0ea55f130d"));
		public global::Allors.Meta.MethodType SuperinterfaceMethod  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5c7f1ab4-0b61-416d-97f4-660663f0e933"));

	}

	public partial class C1Builder : Allors.ObjectBuilder<C1> , ObjectBuilder, I1Builder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public C1Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(C1 instance)
		{

			instance.C1AllorsString = this.C1AllorsString;
		
		
			

			if(this.C1AllorsDecimal.HasValue)
			{
				instance.C1AllorsDecimal = this.C1AllorsDecimal.Value;
			}			
		
		

			instance.C1AllorsBinary = this.C1AllorsBinary;
		
		

			instance.AllorsStringMax = this.AllorsStringMax;
		
		
			

			if(this.C1AllorsBoolean.HasValue)
			{
				instance.C1AllorsBoolean = this.C1AllorsBoolean.Value;
			}			
		
		
			

			if(this.C1AllorsUnique.HasValue)
			{
				instance.C1AllorsUnique = this.C1AllorsUnique.Value;
			}			
		
		
			

			if(this.C1AllorsDateTime.HasValue)
			{
				instance.C1AllorsDateTime = this.C1AllorsDateTime.Value;
			}			
		
		
			

			if(this.C1AllorsFloat.HasValue)
			{
				instance.C1AllorsFloat = this.C1AllorsFloat.Value;
			}			
		
		
			

			if(this.C1AllorsInteger.HasValue)
			{
				instance.C1AllorsInteger = this.C1AllorsInteger.Value;
			}			
		
		

			instance.I1AllorsString = this.I1AllorsString;
		
		
			

			if(this.I1AllorsDateTime.HasValue)
			{
				instance.I1AllorsDateTime = this.I1AllorsDateTime.Value;
			}			
		
		
			

			if(this.I1AllorsInteger.HasValue)
			{
				instance.I1AllorsInteger = this.I1AllorsInteger.Value;
			}			
		
		
			

			if(this.I1AllorsBoolean.HasValue)
			{
				instance.I1AllorsBoolean = this.I1AllorsBoolean.Value;
			}			
		
		
			

			if(this.I1AllorsDecimal.HasValue)
			{
				instance.I1AllorsDecimal = this.I1AllorsDecimal.Value;
			}			
		
		

			instance.I1AllorsBinary = this.I1AllorsBinary;
		
		
			

			if(this.I1AllorsFloat.HasValue)
			{
				instance.I1AllorsFloat = this.I1AllorsFloat.Value;
			}			
		
		
			

			if(this.I1AllorsUnique.HasValue)
			{
				instance.I1AllorsUnique = this.I1AllorsUnique.Value;
			}			
		
		

			instance.I12AllorsBinary = this.I12AllorsBinary;
		
		
			

			if(this.I12AllorsFloat.HasValue)
			{
				instance.I12AllorsFloat = this.I12AllorsFloat.Value;
			}			
		
		

			instance.I12AllorsString = this.I12AllorsString;
		
		
			

			if(this.I12AllorsDecimal.HasValue)
			{
				instance.I12AllorsDecimal = this.I12AllorsDecimal.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.I12AllorsUnique.HasValue)
			{
				instance.I12AllorsUnique = this.I12AllorsUnique.Value;
			}			
		
		
			

			if(this.I12AllorsInteger.HasValue)
			{
				instance.I12AllorsInteger = this.I12AllorsInteger.Value;
			}			
		
		
			

			if(this.I12AllorsBoolean.HasValue)
			{
				instance.I12AllorsBoolean = this.I12AllorsBoolean.Value;
			}			
		
		
			

			if(this.I12AllorsDateTime.HasValue)
			{
				instance.I12AllorsDateTime = this.I12AllorsDateTime.Value;
			}			
		
		

			instance.C1I1One2One = this.C1I1One2One;

		

			instance.C1C2Many2One = this.C1C2Many2One;

		

			instance.C1I2One2One = this.C1I2One2One;

		

			instance.C1C1One2One = this.C1C1One2One;

		

			instance.C1I1Many2One = this.C1I1Many2One;

		
			if(this.C1I1Many2Manies!=null)
			{
				instance.C1I1Many2Manies = this.C1I1Many2Manies.ToArray();
			}
		
			if(this.C1I2One2Manies!=null)
			{
				instance.C1I2One2Manies = this.C1I2One2Manies.ToArray();
			}
		
			if(this.C1C1Many2Manies!=null)
			{
				instance.C1C1Many2Manies = this.C1C1Many2Manies.ToArray();
			}
		
			if(this.C1I12Many2Manies!=null)
			{
				instance.C1I12Many2Manies = this.C1I12Many2Manies.ToArray();
			}
		
			if(this.C1I12One2Manies!=null)
			{
				instance.C1I12One2Manies = this.C1I12One2Manies.ToArray();
			}
		
			if(this.C1C2One2Manies!=null)
			{
				instance.C1C2One2Manies = this.C1C2One2Manies.ToArray();
			}
		
			if(this.C1C1One2Manies!=null)
			{
				instance.C1C1One2Manies = this.C1C1One2Manies.ToArray();
			}
		

			instance.C1C1Many2One = this.C1C1Many2One;

		

			instance.C1I12One2One = this.C1I12One2One;

		

			instance.C1I12Many2One = this.C1I12Many2One;

		
			if(this.C1I2Many2Manies!=null)
			{
				instance.C1I2Many2Manies = this.C1I2Many2Manies.ToArray();
			}
		

			instance.C1I2Many2One = this.C1I2Many2One;

		
			if(this.C1I1One2Manies!=null)
			{
				instance.C1I1One2Manies = this.C1I1One2Manies.ToArray();
			}
		

			instance.C1C2One2One = this.C1C2One2One;

		
			if(this.C1C2Many2Manies!=null)
			{
				instance.C1C2Many2Manies = this.C1C2Many2Manies.ToArray();
			}
		

			instance.I1I1Many2One = this.I1I1Many2One;

		
			if(this.I1I12Many2Manies!=null)
			{
				instance.I1I12Many2Manies = this.I1I12Many2Manies.ToArray();
			}
		
			if(this.I1I2Many2Manies!=null)
			{
				instance.I1I2Many2Manies = this.I1I2Many2Manies.ToArray();
			}
		

			instance.I1I2Many2One = this.I1I2Many2One;

		

			instance.I1I12Many2One = this.I1I12Many2One;

		
			if(this.I1I2One2Manies!=null)
			{
				instance.I1I2One2Manies = this.I1I2One2Manies.ToArray();
			}
		
			if(this.I1C2One2Manies!=null)
			{
				instance.I1C2One2Manies = this.I1C2One2Manies.ToArray();
			}
		

			instance.I1C1One2One = this.I1C1One2One;

		
			if(this.I1C2Many2Manies!=null)
			{
				instance.I1C2Many2Manies = this.I1C2Many2Manies.ToArray();
			}
		
			if(this.I1I1One2Manies!=null)
			{
				instance.I1I1One2Manies = this.I1I1One2Manies.ToArray();
			}
		
			if(this.I1I1Many2Manies!=null)
			{
				instance.I1I1Many2Manies = this.I1I1Many2Manies.ToArray();
			}
		

			instance.I1I12One2One = this.I1I12One2One;

		

			instance.I1I2One2One = this.I1I2One2One;

		

			instance.I1C2One2One = this.I1C2One2One;

		
			if(this.I1C1One2Manies!=null)
			{
				instance.I1C1One2Manies = this.I1C1One2Manies.ToArray();
			}
		
			if(this.I1C1Many2Manies!=null)
			{
				instance.I1C1Many2Manies = this.I1C1Many2Manies.ToArray();
			}
		

			instance.I1I1One2One = this.I1I1One2One;

		

			instance.I1C1Many2One = this.I1C1Many2One;

		
			if(this.I1I12One2Manies!=null)
			{
				instance.I1I12One2Manies = this.I1I12One2Manies.ToArray();
			}
		

			instance.I1C2Many2One = this.I1C2Many2One;

		

			instance.I12C2One2One = this.I12C2One2One;

		

			instance.I12I1Many2One = this.I12I1Many2One;

		
			if(this.I12I12Many2Manies!=null)
			{
				instance.I12I12Many2Manies = this.I12I12Many2Manies.ToArray();
			}
		
			if(this.I12I2Many2Manies!=null)
			{
				instance.I12I2Many2Manies = this.I12I2Many2Manies.ToArray();
			}
		
			if(this.I12C2Many2Manies!=null)
			{
				instance.I12C2Many2Manies = this.I12C2Many2Manies.ToArray();
			}
		
			if(this.I12I1Many2Manies!=null)
			{
				instance.I12I1Many2Manies = this.I12I1Many2Manies.ToArray();
			}
		
			if(this.I12I12One2Manies!=null)
			{
				instance.I12I12One2Manies = this.I12I12One2Manies.ToArray();
			}
		
			if(this.I12C1Many2Manies!=null)
			{
				instance.I12C1Many2Manies = this.I12C1Many2Manies.ToArray();
			}
		

			instance.I12I2Many2One = this.I12I2Many2One;

		
			if(this.I12I1One2Manies!=null)
			{
				instance.I12I1One2Manies = this.I12I1One2Manies.ToArray();
			}
		

			instance.I12C1One2One = this.I12C1One2One;

		

			instance.I12I12One2One = this.I12I12One2One;

		

			instance.I12I2One2One = this.I12I2One2One;

		
			if(this.Dependencies!=null)
			{
				instance.Dependencies = this.Dependencies.ToArray();
			}
		
			if(this.I12I2One2Manies!=null)
			{
				instance.I12I2One2Manies = this.I12I2One2Manies.ToArray();
			}
		

			instance.I12C2Many2One = this.I12C2Many2One;

		

			instance.I12I12Many2One = this.I12I12Many2One;

		

			instance.I12I1One2One = this.I12I1One2One;

		
			if(this.I12C1One2Manies!=null)
			{
				instance.I12C1One2Manies = this.I12C1One2Manies.ToArray();
			}
		

			instance.I12C1Many2One = this.I12C1Many2One;

		
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public I1 C1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1One2One(I1 value)
		        {
		            if(this.C1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1One2One = value;
		            return this;
		        }		

				
				public global::System.String C1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsString(global::System.String value)
		        {
				    if(this.C1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsString = value;
		            return this;
		        }	

				public C2 C1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2Many2One(C2 value)
		        {
		            if(this.C1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2Many2One = value;
		            return this;
		        }		

				
				public I2 C1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2One2One(I2 value)
		        {
		            if(this.C1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2One2One = value;
		            return this;
		        }		

				
				public C1 C1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1One2One(C1 value)
		        {
		            if(this.C1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1One2One = value;
		            return this;
		        }		

				
				public I1 C1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I1Many2One(I1 value)
		        {
		            if(this.C1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1Many2Many(I1 value)
		        {
					if(this.C1I1Many2Manies == null)
					{
						this.C1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2One2Many(I2 value)
		        {
					if(this.C1I2One2Manies == null)
					{
						this.C1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? C1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> C1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1Many2Many(C1 value)
		        {
					if(this.C1C1Many2Manies == null)
					{
						this.C1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12Many2Many(I12 value)
		        {
					if(this.C1I12Many2Manies == null)
					{
						this.C1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] C1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> C1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I12One2Many(I12 value)
		        {
					if(this.C1I12One2Manies == null)
					{
						this.C1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2One2Many(C2 value)
		        {
					if(this.C1C2One2Manies == null)
					{
						this.C1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C1One2Many(C1 value)
		        {
					if(this.C1C1One2Manies == null)
					{
						this.C1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String AllorsStringMax {get; set;}

				/// <exclude/>
				public C1Builder WithAllorsStringMax(global::System.String value)
		        {
				    if(this.AllorsStringMax!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsStringMax = value;
		            return this;
		        }	

				public C1 C1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C1Many2One(C1 value)
		        {
		            if(this.C1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? C1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsBoolean = value;
		            return this;
		        }	

				public I12 C1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12One2One(I12 value)
		        {
		            if(this.C1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12One2One = value;
		            return this;
		        }		

				
				public I12 C1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I12Many2One(I12 value)
		        {
		            if(this.C1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I2Many2Many(I2 value)
		        {
					if(this.C1I2Many2Manies == null)
					{
						this.C1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? C1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsUnique = value;
		            return this;
		        }	

				public I2 C1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1I2Many2One(I2 value)
		        {
		            if(this.C1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1I1One2Many(I1 value)
		        {
					if(this.C1I1One2Manies == null)
					{
						this.C1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithC1C2One2One(C2 value)
		        {
		            if(this.C1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C1C2One2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? C1AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.C1AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Double? C1AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsFloat(global::System.Double? value)
		        {
				    if(this.C1AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsFloat = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> C1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithC1C2Many2Many(C2 value)
		        {
					if(this.C1C2Many2Manies == null)
					{
						this.C1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? C1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithC1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C1AllorsInteger = value;
		            return this;
		        }	

				public I1 I1I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1Many2One(I1 value)
		        {
		            if(this.I1I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12Many2Many(I12 value)
		        {
					if(this.I1I12Many2Manies == null)
					{
						this.I1I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I1I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2Many2Many(I2 value)
		        {
					if(this.I1I2Many2Manies == null)
					{
						this.I1I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I1I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2Many2One(I2 value)
		        {
		            if(this.I1I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I1AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsString(global::System.String value)
		        {
				    if(this.I1AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsString = value;
		            return this;
		        }	

				public I12 I1I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12Many2One(I12 value)
		        {
		            if(this.I1I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I1AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I1AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I1I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I2One2Many(I2 value)
		        {
					if(this.I1I2One2Manies == null)
					{
						this.I1I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I1I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I1C2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2One2Many(C2 value)
		        {
					if(this.I1C2One2Manies == null)
					{
						this.I1C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I1C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1One2One(C1 value)
		        {
		            if(this.I1C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? I1AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I1AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I1C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C2Many2Many(C2 value)
		        {
					if(this.I1C2Many2Manies == null)
					{
						this.I1C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I1C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1One2Many(I1 value)
		        {
					if(this.I1I1One2Manies == null)
					{
						this.I1I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I1I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I1Many2Many(I1 value)
		        {
					if(this.I1I1Many2Manies == null)
					{
						this.I1I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I1I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? I1AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I1AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Decimal? I1AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I1AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsDecimal = value;
		            return this;
		        }	

				public I12 I1I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I12One2One(I12 value)
		        {
		            if(this.I1I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I12One2One = value;
		            return this;
		        }		

				
				public I2 I1I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I2One2One(I2 value)
		        {
		            if(this.I1I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I2One2One = value;
		            return this;
		        }		

				
				public C2 I1C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2One2One(C2 value)
		        {
		            if(this.I1C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I1C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1One2Many(C1 value)
		        {
					if(this.I1C1One2Manies == null)
					{
						this.I1C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I1AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I1AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsBinary = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I1C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1C1Many2Many(C1 value)
		        {
					if(this.I1C1Many2Manies == null)
					{
						this.I1C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I1C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Double? I1AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsFloat(global::System.Double? value)
		        {
				    if(this.I1AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsFloat = value;
		            return this;
		        }	

				public I1 I1I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1I1One2One(I1 value)
		        {
		            if(this.I1I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1I1One2One = value;
		            return this;
		        }		

				
				public C1 I1C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C1Many2One(C1 value)
		        {
		            if(this.I1C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I1I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI1I12One2Many(I12 value)
		        {
					if(this.I1I12One2Manies == null)
					{
						this.I1I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I1I12One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I1C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI1C2Many2One(C2 value)
		        {
		            if(this.I1C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I1C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I1AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI1AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I1AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I1AllorsUnique = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsFloat {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsFloat(global::System.Double? value)
		        {
				    if(this.I12AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsFloat = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Manies == null)
					{
						this.I12I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Manies == null)
					{
						this.I12I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Manies == null)
					{
						this.I12C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Manies == null)
					{
						this.I12I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Manies == null)
					{
						this.I12I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C1Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Manies == null)
					{
						this.I12C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Manies == null)
					{
						this.I12I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependencies {get; set;}	

				/// <exclude/>
				public C1Builder WithDependency(I12 value)
		        {
					if(this.Dependencies == null)
					{
						this.Dependencies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Manies == null)
					{
						this.I12I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I12C1One2Manies {get; set;}	

				/// <exclude/>
				public C1Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Manies == null)
					{
						this.I12C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C1Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I12AllorsDateTime {get; set;}

				/// <exclude/>
				public C1Builder WithI12AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I12AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public C1Builder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public C1Builder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class C1s : global::Allors.ObjectsBase<C1>
	{
		public static readonly C1Meta Meta = C1Meta.Instance;

		public C1s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class C2 : Allors.IObject , Object, I2
	{
		public static readonly C2Meta Meta = C2Meta.Instance;

		private readonly IStrategy strategy;

		public C2(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static C2 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C2) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Decimal? C2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C2AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDecimal, value);
			}
		}

		virtual public bool ExistC2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDecimal);
			}
		}

		virtual public void RemoveC2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDecimal);
		}


		virtual public C1 C2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1One2One ,value);
			}
		}

		virtual public bool ExistC2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1One2One);
			}
		}

		virtual public void RemoveC2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2One);
		}


		virtual public C2 C2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2Many2One ,value);
			}
		}

		virtual public bool ExistC2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2Many2One);
			}
		}

		virtual public void RemoveC2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2One);
		}


		virtual public global::System.Guid? C2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C2AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsUnique, value);
			}
		}

		virtual public bool ExistC2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsUnique);
			}
		}

		virtual public void RemoveC2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsUnique);
		}


		virtual public I12 C2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12Many2One ,value);
			}
		}

		virtual public bool ExistC2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12Many2One);
			}
		}

		virtual public void RemoveC2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2One);
		}


		virtual public I12 C2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12One2One ,value);
			}
		}

		virtual public bool ExistC2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12One2One);
			}
		}

		virtual public void RemoveC2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2One);
		}


		virtual public global::Allors.Extent<I1> C2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1Many2Manies, value);
			}
		}

		virtual public void AddC2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1Many2Manies, value);
		}

		virtual public void RemoveC2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2Manies,value);
		}

		virtual public bool ExistC2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1Many2Manies);
			}
		}

		virtual public void RemoveC2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1Many2Manies);
		}


		virtual public global::System.Double? C2AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C2AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsFloat, value);
			}
		}

		virtual public bool ExistC2AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsFloat);
			}
		}

		virtual public void RemoveC2AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsFloat);
		}


		virtual public global::Allors.Extent<I1> C2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1One2Manies, value);
			}
		}

		virtual public void AddC2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1One2Manies, value);
		}

		virtual public void RemoveC2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2Manies,value);
		}

		virtual public bool ExistC2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1One2Manies);
			}
		}

		virtual public void RemoveC2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1One2Manies);
		}


		virtual public I2 C2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2One2One ,value);
			}
		}

		virtual public bool ExistC2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2One2One);
			}
		}

		virtual public void RemoveC2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2One);
		}


		virtual public global::System.Int32? C2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C2AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsInteger, value);
			}
		}

		virtual public bool ExistC2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsInteger);
			}
		}

		virtual public void RemoveC2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsInteger);
		}


		virtual public global::Allors.Extent<I2> C2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2Many2Manies, value);
			}
		}

		virtual public void AddC2I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2Many2Manies, value);
		}

		virtual public void RemoveC2I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2Manies,value);
		}

		virtual public bool ExistC2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2Many2Manies);
			}
		}

		virtual public void RemoveC2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2Many2Manies);
		}


		virtual public global::Allors.Extent<I12> C2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12Many2Manies, value);
			}
		}

		virtual public void AddC2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12Many2Manies, value);
		}

		virtual public void RemoveC2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2Manies,value);
		}

		virtual public bool ExistC2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12Many2Manies);
			}
		}

		virtual public void RemoveC2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12Many2Manies);
		}


		virtual public global::Allors.Extent<C2> C2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2One2Manies, value);
			}
		}

		virtual public void AddC2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2One2Manies, value);
		}

		virtual public void RemoveC2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2Manies,value);
		}

		virtual public bool ExistC2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2One2Manies);
			}
		}

		virtual public void RemoveC2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2One2Manies);
		}


		virtual public global::System.Boolean? C2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C2AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBoolean, value);
			}
		}

		virtual public bool ExistC2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBoolean);
			}
		}

		virtual public void RemoveC2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBoolean);
		}


		virtual public I1 C2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1Many2One ,value);
			}
		}

		virtual public bool ExistC2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1Many2One);
			}
		}

		virtual public void RemoveC2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2One);
		}


		virtual public I1 C2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1One2One ,value);
			}
		}

		virtual public bool ExistC2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1One2One);
			}
		}

		virtual public void RemoveC2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2One);
		}


		virtual public global::Allors.Extent<C1> C2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1Many2Manies, value);
			}
		}

		virtual public void AddC2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1Many2Manies, value);
		}

		virtual public void RemoveC2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2Manies,value);
		}

		virtual public bool ExistC2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1Many2Manies);
			}
		}

		virtual public void RemoveC2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1Many2Manies);
		}


		virtual public global::Allors.Extent<I12> C2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12One2Manies, value);
			}
		}

		virtual public void AddC2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12One2Manies, value);
		}

		virtual public void RemoveC2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2Manies,value);
		}

		virtual public bool ExistC2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12One2Manies);
			}
		}

		virtual public void RemoveC2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12One2Manies);
		}


		virtual public global::Allors.Extent<I2> C2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2One2Manies, value);
			}
		}

		virtual public void AddC2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2One2Manies, value);
		}

		virtual public void RemoveC2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2Manies,value);
		}

		virtual public bool ExistC2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2One2Manies);
			}
		}

		virtual public void RemoveC2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2One2Manies);
		}


		virtual public C2 C2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2One2One ,value);
			}
		}

		virtual public bool ExistC2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2One2One);
			}
		}

		virtual public void RemoveC2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2One);
		}


		virtual public global::System.String C2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C2AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsString, value);
			}
		}

		virtual public bool ExistC2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsString);
			}
		}

		virtual public void RemoveC2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsString);
		}


		virtual public C1 C2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1Many2One ,value);
			}
		}

		virtual public bool ExistC2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1Many2One);
			}
		}

		virtual public void RemoveC2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2One);
		}


		virtual public global::Allors.Extent<C2> C2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2Many2Manies, value);
			}
		}

		virtual public void AddC2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2Many2Manies, value);
		}

		virtual public void RemoveC2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2Manies,value);
		}

		virtual public bool ExistC2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2Many2Manies);
			}
		}

		virtual public void RemoveC2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2Many2Manies);
		}


		virtual public global::System.DateTime? C2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.C2AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDateTime, value);
			}
		}

		virtual public bool ExistC2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDateTime);
			}
		}

		virtual public void RemoveC2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDateTime);
		}


		virtual public I2 C2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2Many2One ,value);
			}
		}

		virtual public bool ExistC2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2Many2One);
			}
		}

		virtual public void RemoveC2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2One);
		}


		virtual public global::Allors.Extent<C1> C2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1One2Manies, value);
			}
		}

		virtual public void AddC2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1One2Manies, value);
		}

		virtual public void RemoveC2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2Manies,value);
		}

		virtual public bool ExistC2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1One2Manies);
			}
		}

		virtual public void RemoveC2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1One2Manies);
		}


		virtual public global::System.Byte[] C2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C2AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBinary, value);
			}
		}

		virtual public bool ExistC2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBinary);
			}
		}

		virtual public void RemoveC2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBinary);
		}


		virtual public I2 I2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2Many2One ,value);
			}
		}

		virtual public bool ExistI2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2Many2One);
			}
		}

		virtual public void RemoveI2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2Many2One);
		}


		virtual public C1 I2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1Many2One ,value);
			}
		}

		virtual public bool ExistI2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1Many2One);
			}
		}

		virtual public void RemoveI2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2One);
		}


		virtual public I12 I2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12Many2One ,value);
			}
		}

		virtual public bool ExistI2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12Many2One);
			}
		}

		virtual public void RemoveI2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2One);
		}


		virtual public global::System.Boolean? I2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I2AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBoolean, value);
			}
		}

		virtual public bool ExistI2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBoolean);
			}
		}

		virtual public void RemoveI2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBoolean);
		}


		virtual public global::Allors.Extent<C1> I2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1One2Manies, value);
			}
		}

		virtual public void AddI2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1One2Manies, value);
		}

		virtual public void RemoveI2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2Manies,value);
		}

		virtual public bool ExistI2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1One2Manies);
			}
		}

		virtual public void RemoveI2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1One2Manies);
		}


		virtual public C1 I2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1One2One ,value);
			}
		}

		virtual public bool ExistI2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1One2One);
			}
		}

		virtual public void RemoveI2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2One);
		}


		virtual public global::System.Decimal? I2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I2AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDecimal, value);
			}
		}

		virtual public bool ExistI2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDecimal);
			}
		}

		virtual public void RemoveI2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I2Many2Manies, value);
			}
		}

		virtual public void AddI2Many2any (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2I2Many2Manies, value);
		}

		virtual public void RemoveI2Many2any (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I2Many2Manies,value);
		}

		virtual public bool ExistI2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I2Many2Manies);
			}
		}

		virtual public void RemoveI2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I2Many2Manies);
		}


		virtual public global::System.Byte[] I2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I2AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBinary, value);
			}
		}

		virtual public bool ExistI2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBinary);
			}
		}

		virtual public void RemoveI2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBinary);
		}


		virtual public global::System.Guid? I2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I2AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsUnique, value);
			}
		}

		virtual public bool ExistI2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsUnique);
			}
		}

		virtual public void RemoveI2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsUnique);
		}


		virtual public I1 I2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1Many2One ,value);
			}
		}

		virtual public bool ExistI2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1Many2One);
			}
		}

		virtual public void RemoveI2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2One);
		}


		virtual public global::System.DateTime? I2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I2AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDateTime, value);
			}
		}

		virtual public bool ExistI2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDateTime);
			}
		}

		virtual public void RemoveI2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDateTime);
		}


		virtual public global::Allors.Extent<I12> I2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12One2Manies, value);
			}
		}

		virtual public void AddI2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12One2Manies, value);
		}

		virtual public void RemoveI2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2Manies,value);
		}

		virtual public bool ExistI2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12One2Manies);
			}
		}

		virtual public void RemoveI2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12One2Manies);
		}


		virtual public I12 I2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12One2One ,value);
			}
		}

		virtual public bool ExistI2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12One2One);
			}
		}

		virtual public void RemoveI2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2One);
		}


		virtual public global::Allors.Extent<C2> I2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2Many2Manies, value);
			}
		}

		virtual public void AddI2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2Many2Manies, value);
		}

		virtual public void RemoveI2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2Manies,value);
		}

		virtual public bool ExistI2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2Many2Manies);
			}
		}

		virtual public void RemoveI2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2Many2Manies);
		}


		virtual public global::Allors.Extent<I1> I2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1Many2Manies, value);
			}
		}

		virtual public void AddI2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1Many2Manies, value);
		}

		virtual public void RemoveI2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2Manies,value);
		}

		virtual public bool ExistI2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1Many2Manies);
			}
		}

		virtual public void RemoveI2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1Many2Manies);
		}


		virtual public C2 I2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2Many2One ,value);
			}
		}

		virtual public bool ExistI2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2Many2One);
			}
		}

		virtual public void RemoveI2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2One);
		}


		virtual public global::System.String I2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I2AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsString, value);
			}
		}

		virtual public bool ExistI2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsString);
			}
		}

		virtual public void RemoveI2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsString);
		}


		virtual public global::Allors.Extent<C2> I2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2One2Manies, value);
			}
		}

		virtual public void AddI2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2One2Manies, value);
		}

		virtual public void RemoveI2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2Manies,value);
		}

		virtual public bool ExistI2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2One2Manies);
			}
		}

		virtual public void RemoveI2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2One2Manies);
		}


		virtual public I1 I2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1One2One ,value);
			}
		}

		virtual public bool ExistI2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1One2One);
			}
		}

		virtual public void RemoveI2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2One);
		}


		virtual public global::Allors.Extent<I1> I2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1One2Manies, value);
			}
		}

		virtual public void AddI2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1One2Manies, value);
		}

		virtual public void RemoveI2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2Manies,value);
		}

		virtual public bool ExistI2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1One2Manies);
			}
		}

		virtual public void RemoveI2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1One2Manies);
		}


		virtual public global::Allors.Extent<I12> I2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12Many2Manies, value);
			}
		}

		virtual public void AddI2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12Many2Manies, value);
		}

		virtual public void RemoveI2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2Manies,value);
		}

		virtual public bool ExistI2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12Many2Manies);
			}
		}

		virtual public void RemoveI2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12Many2Manies);
		}


		virtual public I2 I2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2One2One ,value);
			}
		}

		virtual public bool ExistI2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2One2One);
			}
		}

		virtual public void RemoveI2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2One);
		}


		virtual public global::System.Int32? I2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I2AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsInteger, value);
			}
		}

		virtual public bool ExistI2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsInteger);
			}
		}

		virtual public void RemoveI2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsInteger);
		}


		virtual public global::Allors.Extent<I2> I2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I2One2Manies, value);
			}
		}

		virtual public void AddI2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2I2One2Manies, value);
		}

		virtual public void RemoveI2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2Manies,value);
		}

		virtual public bool ExistI2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I2One2Manies);
			}
		}

		virtual public void RemoveI2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I2One2Manies);
		}


		virtual public global::Allors.Extent<C1> I2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1Many2Manies, value);
			}
		}

		virtual public void AddI2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1Many2Manies, value);
		}

		virtual public void RemoveI2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2Manies,value);
		}

		virtual public bool ExistI2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1Many2Manies);
			}
		}

		virtual public void RemoveI2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1Many2Manies);
		}


		virtual public C2 I2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2One2One ,value);
			}
		}

		virtual public bool ExistI2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2One2One);
			}
		}

		virtual public void RemoveI2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2One);
		}


		virtual public global::System.Double? I2AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I2AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsFloat, value);
			}
		}

		virtual public bool ExistI2AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsFloat);
			}
		}

		virtual public void RemoveI2AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsFloat);
		}


		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One ,value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One);
		}


		virtual public global::System.Double? I12AllorsFloat 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsFloat);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsFloat, value);
			}
		}

		virtual public bool ExistI12AllorsFloat{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsFloat);
			}
		}

		virtual public void RemoveI12AllorsFloat()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsFloat);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One ,value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One);
		}


		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Manies, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Manies, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Manies,value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Manies);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Manies);
		}


		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Manies, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Manies, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Manies,value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Manies);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Manies);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Manies, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Manies, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Manies,value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Manies);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Manies);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Manies, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Manies, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Manies,value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Manies);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Manies);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Manies, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Manies, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Manies,value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Manies);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Manies);
		}


		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Manies, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Manies, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Manies,value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Manies);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Manies);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One ,value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One);
		}


		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique);
		}


		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Manies, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Manies, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Manies,value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Manies);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Manies);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One ,value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One ,value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One ,value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependencies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependencies, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependencies, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependencies,value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependencies);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependencies);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Manies, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Manies, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Manies,value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Manies);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Manies);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One ,value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One ,value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One);
		}


		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One ,value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Manies);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Manies, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Manies, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Manies,value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Manies);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Manies);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One ,value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One);
		}


		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I12AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDateTime, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDateTime);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDateTime);
		}



		virtual public global::Allors.Extent<I2> I2sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI2sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC2Many2One);
			}
		}

		virtual public bool ExistI2sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC2Many2One);
			}
		}


		virtual public I2 I2WhereC2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC2One2Many);
			}
		} 

		virtual public bool ExistI2WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC2One2Many);
			}
		}


		virtual public I2 I2WhereC2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC2One2One);
			}
		} 

		virtual public bool ExistI2WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC2One2One);
			}
		}


		virtual public I12 I12WhereC2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC2One2One);
			}
		} 

		virtual public bool ExistI12WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI12sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC2Many2One);
			}
		}

		virtual public bool ExistI12sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC2Many2One);
			}
		}


		virtual public I1 I1WhereC2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC2One2Many);
			}
		} 

		virtual public bool ExistI1WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC2One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI1sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC2Many2Many);
			}
		}


		virtual public I1 I1WhereC2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC2One2One);
			}
		} 

		virtual public bool ExistI1WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC2Many2One);
			}
		}

		virtual public bool ExistI1sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC2Many2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC2Many2One);
			}
		}

		virtual public bool ExistC1sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC2Many2One);
			}
		}


		virtual public C1 C1WhereC2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC2One2Many);
			}
		} 

		virtual public bool ExistC1WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC2One2Many);
			}
		}


		virtual public C1 C1WhereC2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC2One2One);
			}
		} 

		virtual public bool ExistC1WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC2Many2Many);
			}
		}

		virtual public bool ExistC1sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2Many2One);
			}
		}

		virtual public bool ExistC2sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2Many2One);
			}
		}


		virtual public C2 C2WhereC2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2One2Many);
			}
		} 

		virtual public bool ExistC2WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2One2Many);
			}
		}


		virtual public C2 C2WhereC2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2One2One);
			}
		} 

		virtual public bool ExistC2WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2Many2Many);
			}
		}

		virtual public bool ExistC2sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2Many2One);
			}
		}

		virtual public bool ExistI2sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2Many2any
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2Many2any);
			}
		}

		virtual public bool ExistI2sWhereI2Many2any
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2Many2any);
			}
		}


		virtual public I2 I2WhereI2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2One2One);
			}
		} 

		virtual public bool ExistI2WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2One2One);
			}
		}


		virtual public I2 I2WhereI2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2One2Many);
			}
		} 

		virtual public bool ExistI2WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI2Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI2Many2One);
			}
		}

		virtual public bool ExistI12sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI2Many2One);
			}
		}


		virtual public I12 I12WhereI2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI2One2One);
			}
		} 

		virtual public bool ExistI12WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI2One2One);
			}
		}


		virtual public I12 I12WhereI2One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI2One2Many);
			}
		} 

		virtual public bool ExistI12WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI2Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI2Many2One);
			}
		}

		virtual public bool ExistI1sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI2Many2One);
			}
		}


		virtual public I1 I1WhereI2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI2One2Many);
			}
		} 

		virtual public bool ExistI1WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI2One2Many);
			}
		}


		virtual public I1 I1WhereI2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI2One2One);
			}
		} 

		virtual public bool ExistI1WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI2One2One);
			}
		}


		virtual public C1 C1WhereI2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI2One2One);
			}
		} 

		virtual public bool ExistC1WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI2One2One);
			}
		}


		virtual public C1 C1WhereI2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI2One2Many);
			}
		} 

		virtual public bool ExistC1WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI2Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI2Many2One);
			}
		}

		virtual public bool ExistC1sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI2Many2One);
			}
		}


		virtual public C2 C2WhereI2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI2One2One);
			}
		} 

		virtual public bool ExistC2WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI2One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI2Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI2Many2Many);
			}
		}


		virtual public C2 C2WhereI2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI2One2Many);
			}
		} 

		virtual public bool ExistC2WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI2Many2One);
			}
		}

		virtual public bool ExistC2sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI2Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}

		virtual public bool ExistI2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}


		virtual public I2 I2WhereI12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		} 

		virtual public bool ExistI2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		}


		virtual public I2 I2WhereI12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2One);
			}
		} 

		virtual public bool ExistI2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}


		virtual public I12 I12WhereI12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		} 

		virtual public bool ExistI12WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		}


		virtual public I12 I12WhereI12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2One);
			}
		} 

		virtual public bool ExistI12WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}

		virtual public bool ExistI12sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}

		virtual public bool ExistI1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}


		virtual public I1 I1WhereI12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2One);
			}
		} 

		virtual public bool ExistI1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2One);
			}
		}


		virtual public I1 I1WhereI12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		} 

		virtual public bool ExistI1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}


		virtual public C1 C1WhereI12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		} 

		virtual public bool ExistC1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		}


		virtual public C1 C1WhereI12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2One);
			}
		} 

		virtual public bool ExistC1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}

		virtual public bool ExistC1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}

		virtual public bool ExistC2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}


		virtual public C2 C2WhereI12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2One);
			}
		} 

		virtual public bool ExistC2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}


		virtual public C2 C2WhereI12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		} 

		virtual public bool ExistC2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new C2OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new C2OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new C2OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new C2OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new C2OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new C2OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new C2OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new C2OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new C2OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new C2OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class C2Meta
	{
		public static readonly C2Meta Instance = new C2Meta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("72c07e8a-03f5-4da8-ab37-236333d4f74e"));

		public global::Allors.Meta.RoleType C2AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("152c92f0-485e-4a28-b321-d6ed3b730fc0"));
		public global::Allors.Meta.RoleType C2C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9292cb86-3e04-4cd4-b3fd-a5af7a5ce538"));
		public global::Allors.Meta.RoleType C2C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f41ddb05-4a96-40fa-859b-8b3d6dfcd86b"));
		public global::Allors.Meta.RoleType C2AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cc1f2cae-2a5d-4584-aa08-4b03fc2176d2"));
		public global::Allors.Meta.RoleType C2I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b2f83414-aa5c-44fd-a382-56119727785a"));
		public global::Allors.Meta.RoleType C2I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c0562ba5-0402-44ea-acd0-9e78d20e7576"));
		public global::Allors.Meta.RoleType C2I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d3e84546-02fc-40be-b550-dbd54cd8a139"));
		public global::Allors.Meta.RoleType C2AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c52984df-80f8-4622-84e0-0e9f97cfaff3"));
		public global::Allors.Meta.RoleType C2I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("28f373c6-62b6-4f5c-b794-c10138043a63"));
		public global::Allors.Meta.RoleType C2I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("642f5531-896d-482f-b746-4ecf08f27027"));
		public global::Allors.Meta.RoleType C2AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f5545dfc-e19a-456a-8469-46708ea5bb68"));
		public global::Allors.Meta.RoleType C2I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a1a975a4-7d1e-4734-962e-2f717386783a"));
		public global::Allors.Meta.RoleType C2I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6210478c-86e3-4d8c-8e3c-3b29da3175ca"));
		public global::Allors.Meta.RoleType C2C2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bfa632a3-f334-4c92-a1b1-21cfa726ab90"));
		public global::Allors.Meta.RoleType C2AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bff48eef-9e8f-45b7-83ff-7b63dac407f1"));
		public global::Allors.Meta.RoleType C2I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6ff71b5b-723d-424f-9e2f-fb37bb8118fe"));
		public global::Allors.Meta.RoleType C2I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("128eb00f-03fc-432e-bec6-8fcfb265a3a9"));
		public global::Allors.Meta.RoleType C2C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("572738e4-956b-404d-97e8-4bb431ce7692"));
		public global::Allors.Meta.RoleType C2I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8ac9a5cd-35a4-4ca3-a1af-ab3f489c7a52"));
		public global::Allors.Meta.RoleType C2I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("19f3caa1-c8d1-4257-b4ad-2f8ccb809524"));
		public global::Allors.Meta.RoleType C2C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cdf7b6ee-fa50-44a1-9433-d04d61ef3aeb"));
		public global::Allors.Meta.RoleType C2AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8a96d544-e96f-45b5-aeee-d9381946ff31"));
		public global::Allors.Meta.RoleType C2C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("54dce296-9454-440e-9cf3-1327ea439f0e"));
		public global::Allors.Meta.RoleType C2C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("73d243be-d8d0-42c7-b354-fd9786b4eaaa"));
		public global::Allors.Meta.RoleType C2AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6e9490f2-740f-498c-9c0f-d601c76f28ad"));
		public global::Allors.Meta.RoleType C2I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("888cd015-7323-45da-83fe-eb297e8ede51"));
		public global::Allors.Meta.RoleType C2C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2c172bc6-a87b-4945-b02f-e00a38eb866d"));
		public global::Allors.Meta.RoleType C2AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e701ac90-488a-476f-9b13-ea361e8ff450"));
		public global::Allors.Meta.RoleType I2I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("141b832f-7321-43b8-8033-dbad3f80edc3"));
		public global::Allors.Meta.RoleType I2C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9edd1eb9-2b9a-4375-a669-68c1859eace2"));
		public global::Allors.Meta.RoleType I2I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e538ab5e-80f2-4a34-81e7-c9b92414dda1"));
		public global::Allors.Meta.RoleType I2AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0d2c6dbe-9bb2-414c-8f19-5381fe69ac64"));
		public global::Allors.Meta.RoleType I2C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("805d7871-bc51-4572-be01-e47ac8fef22a"));
		public global::Allors.Meta.RoleType I2C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6ac5d426-9156-4467-8a04-85ccb6c964e2"));
		public global::Allors.Meta.RoleType I2AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ec80b71e-a933-4eb3-ab14-00b26c3bc805"));
		public global::Allors.Meta.RoleType I2I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3aab87f3-2eab-4f81-9c1b-fd2e162a93b8"));
		public global::Allors.Meta.RoleType I2AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e3ae23bc-5934-4c0d-a709-adb00110772d"));
		public global::Allors.Meta.RoleType I2AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3f03fb6f-b0ba-4c78-b86a-9c4a1c574dd4"));
		public global::Allors.Meta.RoleType I2I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("edee2f1c-3e94-45b5-80f4-160faa2074c4"));
		public global::Allors.Meta.RoleType I2AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bdcffe2b-ffa7-4eb1-be24-8d8ab0b4dce2"));
		public global::Allors.Meta.RoleType I2I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9598153e-9c1c-438a-a8a8-9822092a6a07"));
		public global::Allors.Meta.RoleType I2I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e4c9f00e-7c3d-4b58-92f0-ccce24b55589"));
		public global::Allors.Meta.RoleType I2C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("17e159a2-f5a6-4828-9fef-796fcc9085e8"));
		public global::Allors.Meta.RoleType I2I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2e78a543-949f-4130-b659-80a9a60ad6ab"));
		public global::Allors.Meta.RoleType I2C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f60f8fa4-4e73-472d-b0b0-67f202c1e969"));
		public global::Allors.Meta.RoleType I2AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7afb53c1-2fe3-44b6-b1d2-d5a9f6100076"));
		public global::Allors.Meta.RoleType I2C2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7cdd2b76-6c35-4e81-a1da-f5d0a300014b"));
		public global::Allors.Meta.RoleType I2I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("26deb364-bd5e-4b5d-b28a-19689ab3c00d"));
		public global::Allors.Meta.RoleType I2I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d8f011c4-3057-4384-9045-9c34b13db5c3"));
		public global::Allors.Meta.RoleType I2I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d838e921-ff63-4e4f-afd8-42dc29d23555"));
		public global::Allors.Meta.RoleType I2I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("12c2c263-7839-4734-9307-bcde6930a2b7"));
		public global::Allors.Meta.RoleType I2AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("69c063b7-156f-4b7f-89eb-10c7eaf39ad5"));
		public global::Allors.Meta.RoleType I2I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c7d68f0d-24b1-40c9-9431-78763b776bee"));
		public global::Allors.Meta.RoleType I2C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6ed084f6-8809-46d9-a3ec-4b086ddafb0a"));
		public global::Allors.Meta.RoleType I2C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("666c65ad-8bf7-40be-a51a-e69d3e0bfe01"));
		public global::Allors.Meta.RoleType I2AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("12ea1f33-0eed-4476-9cab-1fd62ed146a3"));
		public global::Allors.Meta.RoleType I12AllorsBinary  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f7809a25-1b10-4eb0-9309-aeea6efcd7cb"));
		public global::Allors.Meta.RoleType I12C2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4c448b25-b56c-4486-b0c8-ac04a3249677"));
		public global::Allors.Meta.RoleType I12AllorsFloat  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5f2eff86-71bf-480d-a6ad-1c93fc68b08d"));
		public global::Allors.Meta.RoleType I12I1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2e3dc9b9-3700-4090-bafa-2c60050d52d5"));
		public global::Allors.Meta.RoleType I12AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c778c7a7-9cf7-4a7e-8408-e4eb1ca94ce8"));
		public global::Allors.Meta.RoleType I12I12Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b311c57d-9565-48c1-80d8-1d3cf5a498ea"));
		public global::Allors.Meta.RoleType I12AllorsDecimal  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("295a4e46-3133-4aff-a1dc-5101e584fb8a"));
		public global::Allors.Meta.RoleType I12I2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f266759c-34c5-49a8-8d92-e2bbcb41c86a"));
		public global::Allors.Meta.RoleType I12C2Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f5928b47-5a57-4be8-a0a9-a729e8e467bb"));
		public global::Allors.Meta.RoleType I12I1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("397b339e-0277-4700-a5d1-d9d0ac23c362"));
		public global::Allors.Meta.RoleType I12I12One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d786aeb4-03bb-419a-90c9-e6ddaa940e93"));
		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a89707e2-e3e1-4d24-9c56-180671e3409c"));
		public global::Allors.Meta.RoleType I12C1Many2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4c1f678-a3ae-4707-81e9-b3f3411a5d93"));
		public global::Allors.Meta.RoleType I12I2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2073096f-8918-4432-8fa2-42f4fd1a53a1"));
		public global::Allors.Meta.RoleType I12AllorsUnique  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("839c7aaa-f044-4b93-97aa-00beeed8f3eb"));
		public global::Allors.Meta.RoleType I12AllorsInteger  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cbd73ad2-a4cd-4b65-a3cd-55bb7c6f52bc"));
		public global::Allors.Meta.RoleType I12I1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("29f38fb4-8e6a-4f70-9ee9-f6819b9d759e"));
		public global::Allors.Meta.RoleType I12C1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee9379c4-ef6a-4c6e-8190-bc71c36ac009"));
		public global::Allors.Meta.RoleType I12I12One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e68fba09-6113-4b49-a6fa-a09e46a004f1"));
		public global::Allors.Meta.RoleType I12I2One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("07702752-2c97-4b44-8c43-7c1f2a5e3d0d"));
		public global::Allors.Meta.RoleType Dependencies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d5c22b99-6984-4042-98fd-93fe60dfe5d7"));
		public global::Allors.Meta.RoleType I12I2One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("09a2a7a1-4713-4c5c-828d-8be40f33d1ae"));
		public global::Allors.Meta.RoleType I12C2Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2ff52878-3ade-4afe-9961-8f79336bb0a2"));
		public global::Allors.Meta.RoleType I12I12Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d091625-ec4a-486d-a9be-8f87fe300967"));
		public global::Allors.Meta.RoleType I12AllorsBoolean  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("79723949-b9ad-40bf-baee-96d001942855"));
		public global::Allors.Meta.RoleType I12I1One2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("72545574-d138-467c-8f21-0c5d15b1d793"));
		public global::Allors.Meta.RoleType I12C1One2Manies  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ee291df6-6a3e-4d92-a779-879679e1b688"));
		public global::Allors.Meta.RoleType I12C1Many2One  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6e5b98b0-1af3-4e99-8781-37ea97792a24"));
		public global::Allors.Meta.RoleType I12AllorsDateTime  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("823e8329-0a90-49ed-9b2c-4bfb9db2ee02"));

		public global::Allors.Meta.AssociationType I2sWhereC2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a45ffec8-5e4e-4b21-9d68-9b0050472ed2"));
		public global::Allors.Meta.AssociationType I2sWhereC2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c51f6fd4-c290-41b6-b594-19e9bcbbee6a"));
		public global::Allors.Meta.AssociationType I2WhereC2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8ddc9cbf-8e5c-4166-a2b0-6127c142da78"));
		public global::Allors.Meta.AssociationType I2WhereC2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bfb08e5e-afc6-4f27-975f-5fb9af5bacc4"));
		public global::Allors.Meta.AssociationType I12WhereC2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("0a1b3b66-6bb2-4062-b3bb-991987dd5194"));
		public global::Allors.Meta.AssociationType I12sWhereC2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("04bca123-7c45-43f4-a5ed-8691b0cbb0e3"));
		public global::Allors.Meta.AssociationType I12sWhereC2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3239eb17-dc55-465f-854c-1d2d024bca94"));
		public global::Allors.Meta.AssociationType I1WhereC2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("54c659d3-98ff-45e6-b734-bc45f13428d8"));
		public global::Allors.Meta.AssociationType I1sWhereC2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("75342efb-659c-43a9-8340-1e110087141c"));
		public global::Allors.Meta.AssociationType I1WhereC2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ddc18ebf-0b61-441f-854a-0f964859035e"));
		public global::Allors.Meta.AssociationType I1sWhereC2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7b80b14e-dd35-4e7c-ba85-ac7860a5dc28"));
		public global::Allors.Meta.AssociationType C1sWhereC2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3f307d57-1f39-4aba-822d-9881cef7223c"));
		public global::Allors.Meta.AssociationType C1WhereC2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3ddac067-46f1-4302-bb1b-aa0e05dd55ae"));
		public global::Allors.Meta.AssociationType C1WhereC2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5bd37271-01c0-4cd3-94d5-0284700b3567"));
		public global::Allors.Meta.AssociationType C1sWhereC2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122dc72f-cc92-440c-84e5-fe8340020c43"));
		public global::Allors.Meta.AssociationType C2sWhereC2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("781b282e-b86f-4747-9d5e-d0f7c08b0899"));
		public global::Allors.Meta.AssociationType C2WhereC2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8fa68cfd-8e0c-40c6-881b-4ebe88487ae7"));
		public global::Allors.Meta.AssociationType C2WhereC2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("23f5e29b-c36b-416f-93da-9ef2d79fc0f1"));
		public global::Allors.Meta.AssociationType C2sWhereC2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("794d2637-293c-49cc-a052-246a779825e9"));
		public global::Allors.Meta.AssociationType I2sWhereI2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("359ca62a-c74c-4936-a62d-9b8774174e8d"));
		public global::Allors.Meta.AssociationType I2sWhereI2Many2any  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4d6c09d6-5644-47bb-a50a-464350053833"));
		public global::Allors.Meta.AssociationType I2WhereI2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d15cb643-1ace-4dfe-b0af-e02e4273bbbb"));
		public global::Allors.Meta.AssociationType I2WhereI2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3fcc8e73-5f3c-4ce0-8f45-daa813278d7e"));
		public global::Allors.Meta.AssociationType I12sWhereI2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("cd90d290-95da-4137-aaf1-bcb59f10e9cb"));
		public global::Allors.Meta.AssociationType I12sWhereI2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("644f55c6-8d39-4602-89bb-5797c9c8e1fd"));
		public global::Allors.Meta.AssociationType I12WhereI2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("991e5b73-a9b0-40a4-8230-b3fb7cc46761"));
		public global::Allors.Meta.AssociationType I12WhereI2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6f37656a-21d0-4574-8eac-5342f7c6850d"));
		public global::Allors.Meta.AssociationType I1sWhereI2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("5b4da68a-6aeb-4d5c-8e09-5bef3b1358a9"));
		public global::Allors.Meta.AssociationType I1sWhereI2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("39a81eb4-e1bb-45ef-8126-21cf233ba684"));
		public global::Allors.Meta.AssociationType I1WhereI2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9118c09c-e8c2-4685-a464-9be9ece2e746"));
		public global::Allors.Meta.AssociationType I1WhereI2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b6cf882a-e27a-40e3-9a0d-43ade4d236b6"));
		public global::Allors.Meta.AssociationType C1WhereI2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("75e47fbe-6ce1-4cc1-a20f-51a861df9cc3"));
		public global::Allors.Meta.AssociationType C1WhereI2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f5329d84-1301-44ea-85b4-dc7d98554694"));
		public global::Allors.Meta.AssociationType C1sWhereI2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8ef5784c-6f76-431e-b59d-075813ad7863"));
		public global::Allors.Meta.AssociationType C1sWhereI2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("dacd7dfa-6650-438d-b564-49fbf89fea8d"));
		public global::Allors.Meta.AssociationType C2WhereI2One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("6bedcc6b-af15-4f27-93e8-4404d23dfd99"));
		public global::Allors.Meta.AssociationType C2sWhereI2Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e8c9548b-3d75-4f2b-af4f-f953572c587c"));
		public global::Allors.Meta.AssociationType C2WhereI2One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("87f7a34c-476f-4670-a670-30451c05842d"));
		public global::Allors.Meta.AssociationType C2sWhereI2Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7d45be10-724e-46c4-8dac-4acdf7f515ad"));
		public global::Allors.Meta.AssociationType I2sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("278afe09-d0e7-4a41-a60b-b3a01fd14c93"));
		public global::Allors.Meta.AssociationType I2WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b1c5cbb7-3d5f-48b8-b182-aa8a0cc3e72a"));
		public global::Allors.Meta.AssociationType I2WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e5201e06-3fbf-4b9c-aa65-1ee4ee9fabfb"));
		public global::Allors.Meta.AssociationType I2sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1127ff1b-1657-4e18-bdc9-bc90cd8a3c15"));
		public global::Allors.Meta.AssociationType I12sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("732fc964-194e-4ece-bd39-bb3c47b83ff9"));
		public global::Allors.Meta.AssociationType I12WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("83e23750-52eb-4b3f-a675-bfe32570357b"));
		public global::Allors.Meta.AssociationType I12WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("8dd3e2b6-805f-4c93-98d8-4864e6807760"));
		public global::Allors.Meta.AssociationType I12sWhereDependency  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("014cf60e-595f-42d5-9146-e7d860396f4d"));
		public global::Allors.Meta.AssociationType I12sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c7469ffd-ffd7-4913-962c-8a7a0b4df3dd"));
		public global::Allors.Meta.AssociationType I1sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("295bfc0e-e123-4ac8-84da-45e8d77b1865"));
		public global::Allors.Meta.AssociationType I1sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d6ccfcb8-623e-4852-a878-d7cb377af853"));
		public global::Allors.Meta.AssociationType I1WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1d785350-3f68-4f8d-86d4-74a0cd8adac7"));
		public global::Allors.Meta.AssociationType I1WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a3af5653-20c0-410c-9a6f-160e10e2fe69"));
		public global::Allors.Meta.AssociationType C1sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a4a31323-7193-4709-828e-88b2c0f3f8aa"));
		public global::Allors.Meta.AssociationType C1WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3218ac29-2eac-4dc9-acad-2c708c3df994"));
		public global::Allors.Meta.AssociationType C1WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("911a9327-0237-4254-99a7-afff0d6a0369"));
		public global::Allors.Meta.AssociationType C1sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2128418c-6918-4be8-8a02-2bea142b7fc4"));
		public global::Allors.Meta.AssociationType C2sWhereI12Many2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bc437b29-f883-41c1-b36f-20be37bc9b30"));
		public global::Allors.Meta.AssociationType C2WhereI12One2One  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("07c026ad-3515-4df0-bee7-ab61d5a9217d"));
		public global::Allors.Meta.AssociationType C2sWhereI12Many2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1f16f92e-ba99-4553-bd1d-b95ba360468a"));
		public global::Allors.Meta.AssociationType C2WhereI12One2Many  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("de757393-f81a-413c-897b-a47efd48cc79"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class C2Builder : Allors.ObjectBuilder<C2> , ObjectBuilder, I2Builder, global::System.IDisposable
	{		
		public C2Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(C2 instance)
		{
			

			if(this.C2AllorsDecimal.HasValue)
			{
				instance.C2AllorsDecimal = this.C2AllorsDecimal.Value;
			}			
		
		
			

			if(this.C2AllorsUnique.HasValue)
			{
				instance.C2AllorsUnique = this.C2AllorsUnique.Value;
			}			
		
		
			

			if(this.C2AllorsFloat.HasValue)
			{
				instance.C2AllorsFloat = this.C2AllorsFloat.Value;
			}			
		
		
			

			if(this.C2AllorsInteger.HasValue)
			{
				instance.C2AllorsInteger = this.C2AllorsInteger.Value;
			}			
		
		
			

			if(this.C2AllorsBoolean.HasValue)
			{
				instance.C2AllorsBoolean = this.C2AllorsBoolean.Value;
			}			
		
		

			instance.C2AllorsString = this.C2AllorsString;
		
		
			

			if(this.C2AllorsDateTime.HasValue)
			{
				instance.C2AllorsDateTime = this.C2AllorsDateTime.Value;
			}			
		
		

			instance.C2AllorsBinary = this.C2AllorsBinary;
		
		
			

			if(this.I2AllorsBoolean.HasValue)
			{
				instance.I2AllorsBoolean = this.I2AllorsBoolean.Value;
			}			
		
		
			

			if(this.I2AllorsDecimal.HasValue)
			{
				instance.I2AllorsDecimal = this.I2AllorsDecimal.Value;
			}			
		
		

			instance.I2AllorsBinary = this.I2AllorsBinary;
		
		
			

			if(this.I2AllorsUnique.HasValue)
			{
				instance.I2AllorsUnique = this.I2AllorsUnique.Value;
			}			
		
		
			

			if(this.I2AllorsDateTime.HasValue)
			{
				instance.I2AllorsDateTime = this.I2AllorsDateTime.Value;
			}			
		
		

			instance.I2AllorsString = this.I2AllorsString;
		
		
			

			if(this.I2AllorsInteger.HasValue)
			{
				instance.I2AllorsInteger = this.I2AllorsInteger.Value;
			}			
		
		
			

			if(this.I2AllorsFloat.HasValue)
			{
				instance.I2AllorsFloat = this.I2AllorsFloat.Value;
			}			
		
		

			instance.I12AllorsBinary = this.I12AllorsBinary;
		
		
			

			if(this.I12AllorsFloat.HasValue)
			{
				instance.I12AllorsFloat = this.I12AllorsFloat.Value;
			}			
		
		

			instance.I12AllorsString = this.I12AllorsString;
		
		
			

			if(this.I12AllorsDecimal.HasValue)
			{
				instance.I12AllorsDecimal = this.I12AllorsDecimal.Value;
			}			
		
		

			instance.Name = this.Name;
		
		
			

			if(this.I12AllorsUnique.HasValue)
			{
				instance.I12AllorsUnique = this.I12AllorsUnique.Value;
			}			
		
		
			

			if(this.I12AllorsInteger.HasValue)
			{
				instance.I12AllorsInteger = this.I12AllorsInteger.Value;
			}			
		
		
			

			if(this.I12AllorsBoolean.HasValue)
			{
				instance.I12AllorsBoolean = this.I12AllorsBoolean.Value;
			}			
		
		
			

			if(this.I12AllorsDateTime.HasValue)
			{
				instance.I12AllorsDateTime = this.I12AllorsDateTime.Value;
			}			
		
		

			instance.C2C1One2One = this.C2C1One2One;

		

			instance.C2C2Many2One = this.C2C2Many2One;

		

			instance.C2I12Many2One = this.C2I12Many2One;

		

			instance.C2I12One2One = this.C2I12One2One;

		
			if(this.C2I1Many2Manies!=null)
			{
				instance.C2I1Many2Manies = this.C2I1Many2Manies.ToArray();
			}
		
			if(this.C2I1One2Manies!=null)
			{
				instance.C2I1One2Manies = this.C2I1One2Manies.ToArray();
			}
		

			instance.C2I2One2One = this.C2I2One2One;

		
			if(this.C2I2Many2Manies!=null)
			{
				instance.C2I2Many2Manies = this.C2I2Many2Manies.ToArray();
			}
		
			if(this.C2I12Many2Manies!=null)
			{
				instance.C2I12Many2Manies = this.C2I12Many2Manies.ToArray();
			}
		
			if(this.C2C2One2Manies!=null)
			{
				instance.C2C2One2Manies = this.C2C2One2Manies.ToArray();
			}
		

			instance.C2I1Many2One = this.C2I1Many2One;

		

			instance.C2I1One2One = this.C2I1One2One;

		
			if(this.C2C1Many2Manies!=null)
			{
				instance.C2C1Many2Manies = this.C2C1Many2Manies.ToArray();
			}
		
			if(this.C2I12One2Manies!=null)
			{
				instance.C2I12One2Manies = this.C2I12One2Manies.ToArray();
			}
		
			if(this.C2I2One2Manies!=null)
			{
				instance.C2I2One2Manies = this.C2I2One2Manies.ToArray();
			}
		

			instance.C2C2One2One = this.C2C2One2One;

		

			instance.C2C1Many2One = this.C2C1Many2One;

		
			if(this.C2C2Many2Manies!=null)
			{
				instance.C2C2Many2Manies = this.C2C2Many2Manies.ToArray();
			}
		

			instance.C2I2Many2One = this.C2I2Many2One;

		
			if(this.C2C1One2Manies!=null)
			{
				instance.C2C1One2Manies = this.C2C1One2Manies.ToArray();
			}
		

			instance.I2I2Many2One = this.I2I2Many2One;

		

			instance.I2C1Many2One = this.I2C1Many2One;

		

			instance.I2I12Many2One = this.I2I12Many2One;

		
			if(this.I2C1One2Manies!=null)
			{
				instance.I2C1One2Manies = this.I2C1One2Manies.ToArray();
			}
		

			instance.I2C1One2One = this.I2C1One2One;

		
			if(this.I2I2Many2Manies!=null)
			{
				instance.I2I2Many2Manies = this.I2I2Many2Manies.ToArray();
			}
		

			instance.I2I1Many2One = this.I2I1Many2One;

		
			if(this.I2I12One2Manies!=null)
			{
				instance.I2I12One2Manies = this.I2I12One2Manies.ToArray();
			}
		

			instance.I2I12One2One = this.I2I12One2One;

		
			if(this.I2C2Many2Manies!=null)
			{
				instance.I2C2Many2Manies = this.I2C2Many2Manies.ToArray();
			}
		
			if(this.I2I1Many2Manies!=null)
			{
				instance.I2I1Many2Manies = this.I2I1Many2Manies.ToArray();
			}
		

			instance.I2C2Many2One = this.I2C2Many2One;

		
			if(this.I2C2One2Manies!=null)
			{
				instance.I2C2One2Manies = this.I2C2One2Manies.ToArray();
			}
		

			instance.I2I1One2One = this.I2I1One2One;

		
			if(this.I2I1One2Manies!=null)
			{
				instance.I2I1One2Manies = this.I2I1One2Manies.ToArray();
			}
		
			if(this.I2I12Many2Manies!=null)
			{
				instance.I2I12Many2Manies = this.I2I12Many2Manies.ToArray();
			}
		

			instance.I2I2One2One = this.I2I2One2One;

		
			if(this.I2I2One2Manies!=null)
			{
				instance.I2I2One2Manies = this.I2I2One2Manies.ToArray();
			}
		
			if(this.I2C1Many2Manies!=null)
			{
				instance.I2C1Many2Manies = this.I2C1Many2Manies.ToArray();
			}
		

			instance.I2C2One2One = this.I2C2One2One;

		

			instance.I12C2One2One = this.I12C2One2One;

		

			instance.I12I1Many2One = this.I12I1Many2One;

		
			if(this.I12I12Many2Manies!=null)
			{
				instance.I12I12Many2Manies = this.I12I12Many2Manies.ToArray();
			}
		
			if(this.I12I2Many2Manies!=null)
			{
				instance.I12I2Many2Manies = this.I12I2Many2Manies.ToArray();
			}
		
			if(this.I12C2Many2Manies!=null)
			{
				instance.I12C2Many2Manies = this.I12C2Many2Manies.ToArray();
			}
		
			if(this.I12I1Many2Manies!=null)
			{
				instance.I12I1Many2Manies = this.I12I1Many2Manies.ToArray();
			}
		
			if(this.I12I12One2Manies!=null)
			{
				instance.I12I12One2Manies = this.I12I12One2Manies.ToArray();
			}
		
			if(this.I12C1Many2Manies!=null)
			{
				instance.I12C1Many2Manies = this.I12C1Many2Manies.ToArray();
			}
		

			instance.I12I2Many2One = this.I12I2Many2One;

		
			if(this.I12I1One2Manies!=null)
			{
				instance.I12I1One2Manies = this.I12I1One2Manies.ToArray();
			}
		

			instance.I12C1One2One = this.I12C1One2One;

		

			instance.I12I12One2One = this.I12I12One2One;

		

			instance.I12I2One2One = this.I12I2One2One;

		
			if(this.Dependencies!=null)
			{
				instance.Dependencies = this.Dependencies.ToArray();
			}
		
			if(this.I12I2One2Manies!=null)
			{
				instance.I12I2One2Manies = this.I12I2One2Manies.ToArray();
			}
		

			instance.I12C2Many2One = this.I12C2Many2One;

		

			instance.I12I12Many2One = this.I12I12Many2One;

		

			instance.I12I1One2One = this.I12I1One2One;

		
			if(this.I12C1One2Manies!=null)
			{
				instance.I12C1One2Manies = this.I12C1One2Manies.ToArray();
			}
		

			instance.I12C1Many2One = this.I12C1Many2One;

		
		}


				public global::System.Decimal? C2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDecimal = value;
		            return this;
		        }	

				public C1 C2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1One2One(C1 value)
		        {
		            if(this.C2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1One2One = value;
		            return this;
		        }		

				
				public C2 C2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2Many2One(C2 value)
		        {
		            if(this.C2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? C2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsUnique = value;
		            return this;
		        }	

				public I12 C2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12Many2One(I12 value)
		        {
		            if(this.C2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12Many2One = value;
		            return this;
		        }		

				
				public I12 C2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12One2One(I12 value)
		        {
		            if(this.C2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C2I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1Many2Many(I1 value)
		        {
					if(this.C2I1Many2Manies == null)
					{
						this.C2I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Double? C2AllorsFloat {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsFloat(global::System.Double? value)
		        {
				    if(this.C2AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsFloat = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> C2I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1One2Many(I1 value)
		        {
					if(this.C2I1One2Manies == null)
					{
						this.C2I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1One2Manies.Add(value);
		            return this;
		        }		

				
				public I2 C2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2One2One(I2 value)
		        {
		            if(this.C2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? C2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> C2I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2Many2Many(I2 value)
		        {
					if(this.C2I2Many2Manies == null)
					{
						this.C2I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12Many2Many(I12 value)
		        {
					if(this.C2I12Many2Manies == null)
					{
						this.C2I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2One2Many(C2 value)
		        {
					if(this.C2C2One2Manies == null)
					{
						this.C2C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? C2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBoolean = value;
		            return this;
		        }	

				public I1 C2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1Many2One(I1 value)
		        {
		            if(this.C2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1Many2One = value;
		            return this;
		        }		

				
				public I1 C2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1One2One(I1 value)
		        {
		            if(this.C2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1Many2Many(C1 value)
		        {
					if(this.C2C1Many2Manies == null)
					{
						this.C2C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12One2Many(I12 value)
		        {
					if(this.C2I12One2Manies == null)
					{
						this.C2I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C2I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2One2Many(I2 value)
		        {
					if(this.C2I2One2Manies == null)
					{
						this.C2I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 C2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2One2One(C2 value)
		        {
		            if(this.C2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2One2One = value;
		            return this;
		        }		

				
				public global::System.String C2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsString(global::System.String value)
		        {
				    if(this.C2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsString = value;
		            return this;
		        }	

				public C1 C2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1Many2One(C1 value)
		        {
		            if(this.C2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2Many2Many(C2 value)
		        {
					if(this.C2C2Many2Manies == null)
					{
						this.C2C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? C2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.C2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDateTime = value;
		            return this;
		        }	

				public I2 C2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2Many2One(I2 value)
		        {
		            if(this.C2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1One2Many(C1 value)
		        {
					if(this.C2C1One2Manies == null)
					{
						this.C2C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] C2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBinary = value;
		            return this;
		        }	

				public I2 I2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2Many2One(I2 value)
		        {
		            if(this.I2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2Many2One = value;
		            return this;
		        }		

				
				public C1 I2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1Many2One(C1 value)
		        {
		            if(this.I2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1Many2One = value;
		            return this;
		        }		

				
				public I12 I2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12Many2One(I12 value)
		        {
		            if(this.I2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I2C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1One2Many(C1 value)
		        {
					if(this.I2C1One2Manies == null)
					{
						this.I2C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1One2One(C1 value)
		        {
		            if(this.I2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1One2One = value;
		            return this;
		        }		

				
				public global::System.Decimal? I2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2Many2any(I2 value)
		        {
					if(this.I2I2Many2Manies == null)
					{
						this.I2I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBinary = value;
		            return this;
		        }	

				public global::System.Guid? I2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsUnique = value;
		            return this;
		        }	

				public I1 I2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1Many2One(I1 value)
		        {
		            if(this.I2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I2I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12One2Many(I12 value)
		        {
					if(this.I2I12One2Manies == null)
					{
						this.I2I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12One2Manies.Add(value);
		            return this;
		        }		

				
				public I12 I2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12One2One(I12 value)
		        {
		            if(this.I2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I2C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2Many2Many(C2 value)
		        {
					if(this.I2C2Many2Manies == null)
					{
						this.I2C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1Many2Many(I1 value)
		        {
					if(this.I2I1Many2Manies == null)
					{
						this.I2I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2Many2One(C2 value)
		        {
		            if(this.I2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsString(global::System.String value)
		        {
				    if(this.I2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I2C2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2One2Many(C2 value)
		        {
					if(this.I2C2One2Manies == null)
					{
						this.I2C2One2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2One2Manies.Add(value);
		            return this;
		        }		

				
				public I1 I2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1One2One(I1 value)
		        {
		            if(this.I2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1One2Many(I1 value)
		        {
					if(this.I2I1One2Manies == null)
					{
						this.I2I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I2I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12Many2Many(I12 value)
		        {
					if(this.I2I12Many2Manies == null)
					{
						this.I2I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2One2One(I2 value)
		        {
		            if(this.I2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int32? I2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I2One2Many(I2 value)
		        {
					if(this.I2I2One2Manies == null)
					{
						this.I2I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2I2One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I2C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1Many2Many(C1 value)
		        {
					if(this.I2C1Many2Manies == null)
					{
						this.I2C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2One2One(C2 value)
		        {
		            if(this.I2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I2AllorsFloat {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsFloat(global::System.Double? value)
		        {
				    if(this.I2AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsFloat = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsFloat {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsFloat(global::System.Double? value)
		        {
				    if(this.I12AllorsFloat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsFloat = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Manies == null)
					{
						this.I12I12Many2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Manies == null)
					{
						this.I12I2Many2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Manies == null)
					{
						this.I12C2Many2Manies = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Manies == null)
					{
						this.I12I1Many2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Manies == null)
					{
						this.I12I12One2Manies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Manies.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C2Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Manies == null)
					{
						this.I12C1Many2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Manies.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Manies == null)
					{
						this.I12I1One2Manies = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependencies {get; set;}	

				/// <exclude/>
				public C2Builder WithDependency(I12 value)
		        {
					if(this.Dependencies == null)
					{
						this.Dependencies = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependencies.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Manies == null)
					{
						this.I12I2One2Manies = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Manies.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I12C1One2Manies {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Manies == null)
					{
						this.I12C1One2Manies = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Manies.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I12AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I12AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDateTime = value;
		            return this;
		        }	


	}

	public partial class C2s : global::Allors.ObjectsBase<C2>
	{
		public static readonly C2Meta Meta = C2Meta.Instance;

		public C2s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class To : Allors.IObject , Object
	{
		public static readonly ToMeta Meta = ToMeta.Instance;

		private readonly IStrategy strategy;

		public To(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static To Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (To) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public From FromWhereTo
		{ 
			get
			{
				return (From) Strategy.GetCompositeAssociation(Meta.FromWhereTo);
			}
		} 

		virtual public bool ExistFromWhereTo
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.FromWhereTo);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ToOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ToOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ToOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ToOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ToOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ToOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ToOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ToOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ToOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ToOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ToMeta
	{
		public static readonly ToMeta Instance = new ToMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7eb25112-4b81-4e8d-9f75-90950c40c65f"));

		public global::Allors.Meta.RoleType Name  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("53e0761a-a9f1-4516-a086-b766650ac28b"));

		public global::Allors.Meta.AssociationType FromWhereTo  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("a963f593-cad0-4fa9-96a3-3853f0f7d7c6"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class ToBuilder : Allors.ObjectBuilder<To> , ObjectBuilder, global::System.IDisposable
	{		
		public ToBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(To instance)
		{

			instance.Name = this.Name;
		
		
		}


				public global::System.String Name {get; set;}

				/// <exclude/>
				public ToBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	


	}

	public partial class Tos : global::Allors.ObjectsBase<To>
	{
		public static readonly ToMeta Meta = ToMeta.Instance;

		public Tos(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class MailboxAddress : Allors.IObject , Object, Address
	{
		public static readonly MailboxAddressMeta Meta = MailboxAddressMeta.Instance;

		private readonly IStrategy strategy;

		public MailboxAddress(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static MailboxAddress Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (MailboxAddress) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String PoBox 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.PoBox);
			}
			set
			{
				Strategy.SetUnitRole(Meta.PoBox, value);
			}
		}

		virtual public bool ExistPoBox{
			get
			{
				return Strategy.ExistUnitRole(Meta.PoBox);
			}
		}

		virtual public void RemovePoBox()
		{
			Strategy.RemoveUnitRole(Meta.PoBox);
		}


		virtual public Place Place
		{ 
			get
			{
				return (Place) Strategy.GetCompositeRole(Meta.Place);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Place ,value);
			}
		}

		virtual public bool ExistPlace
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Place);
			}
		}

		virtual public void RemovePlace()
		{
			Strategy.RemoveCompositeRole(Meta.Place);
		}



		virtual public global::Allors.Extent<Person> PersonsWhereMailboxAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereMailboxAddress);
			}
		}

		virtual public bool ExistPersonsWhereMailboxAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereMailboxAddress);
			}
		}


		virtual public global::Allors.Extent<Person> PersonsWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereMainAddress);
			}
		}

		virtual public bool ExistPersonsWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereMainAddress);
			}
		}


		virtual public global::Allors.Extent<Person> PersonsWhereAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereAddress);
			}
		}

		virtual public bool ExistPersonsWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereAddress);
			}
		}


		virtual public Organisation OrganisationWhereAddress
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeAssociation(Meta.OrganisationWhereAddress);
			}
		} 

		virtual public bool ExistOrganisationWhereAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.OrganisationWhereAddress);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereMainAddress
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereMainAddress);
			}
		}

		virtual public bool ExistOrganisationsWhereMainAddress
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereMainAddress);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new MailboxAddressOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new MailboxAddressOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new MailboxAddressOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new MailboxAddressOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new MailboxAddressOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new MailboxAddressOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new MailboxAddressOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new MailboxAddressOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new MailboxAddressOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new MailboxAddressOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class MailboxAddressMeta
	{
		public static readonly MailboxAddressMeta Instance = new MailboxAddressMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7ee3b00b-4e63-4774-b744-3add2c6035ab"));

		public global::Allors.Meta.RoleType PoBox  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("10b46f89-7f3a-4571-8621-259a2a501dc7"));
		public global::Allors.Meta.RoleType Place  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4f7016f6-1b87-4ac4-8363-7f8210108928"));

		public global::Allors.Meta.AssociationType PersonsWhereMailboxAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("b6ea4ac5-088a-4773-8410-6813d0185d7c"));
		public global::Allors.Meta.AssociationType PersonsWhereMainAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ebaedf39-1af9-42b7-83dc-8945450cebf2"));
		public global::Allors.Meta.AssociationType PersonsWhereAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("da5e0427-79f7-4259-8a68-0071aa4c6273"));
		public global::Allors.Meta.AssociationType OrganisationWhereAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("d1a098bf-a3d8-4b71-948f-a77ae82f02db"));
		public global::Allors.Meta.AssociationType OrganisationsWhereMainAddress  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("944d024b-81eb-442f-8f50-387a588d2373"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class MailboxAddressBuilder : Allors.ObjectBuilder<MailboxAddress> , ObjectBuilder, AddressBuilder, global::System.IDisposable
	{		
		public MailboxAddressBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(MailboxAddress instance)
		{

			instance.PoBox = this.PoBox;
		
		

			instance.Place = this.Place;

		
		}


				public global::System.String PoBox {get; set;}

				/// <exclude/>
				public MailboxAddressBuilder WithPoBox(global::System.String value)
		        {
				    if(this.PoBox!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PoBox = value;
		            return this;
		        }	

				public Place Place {get; set;}

				/// <exclude/>
				public MailboxAddressBuilder WithPlace(Place value)
		        {
		            if(this.Place!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Place = value;
		            return this;
		        }		

				

	}

	public partial class MailboxAddresses : global::Allors.ObjectsBase<MailboxAddress>
	{
		public static readonly MailboxAddressMeta Meta = MailboxAddressMeta.Instance;

		public MailboxAddresses(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Extender : Allors.IObject , Object
	{
		public static readonly ExtenderMeta Meta = ExtenderMeta.Instance;

		private readonly IStrategy strategy;

		public Extender(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Extender Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Extender) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ExtenderOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ExtenderOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ExtenderOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ExtenderOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ExtenderOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ExtenderOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ExtenderOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ExtenderOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ExtenderOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ExtenderOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ExtenderMeta
	{
		public static readonly ExtenderMeta Instance = new ExtenderMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("830cdcb1-31f1-4481-8399-00c034661450"));

		public global::Allors.Meta.RoleType AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bf9f7482-5277-40db-a6ac-5d4731cb5537"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class ExtenderBuilder : Allors.ObjectBuilder<Extender> , ObjectBuilder, global::System.IDisposable
	{		
		public ExtenderBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Extender instance)
		{

			instance.AllorsString = this.AllorsString;
		
		
		}


				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public ExtenderBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	


	}

	public partial class Extenders : global::Allors.ObjectsBase<Extender>
	{
		public static readonly ExtenderMeta Meta = ExtenderMeta.Instance;

		public Extenders(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Two : Allors.IObject , Object, Shared
	{
		public static readonly TwoMeta Meta = TwoMeta.Instance;

		private readonly IStrategy strategy;

		public Two(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Two Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Two) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Shared Shared
		{ 
			get
			{
				return (Shared) Strategy.GetCompositeRole(Meta.Shared);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Shared ,value);
			}
		}

		virtual public bool ExistShared
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Shared);
			}
		}

		virtual public void RemoveShared()
		{
			Strategy.RemoveCompositeRole(Meta.Shared);
		}



		virtual public global::Allors.Extent<One> OnesWhereTwo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OnesWhereTwo);
			}
		}

		virtual public bool ExistOnesWhereTwo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OnesWhereTwo);
			}
		}


		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new TwoOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TwoOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TwoOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TwoOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TwoOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TwoOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TwoOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TwoOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TwoOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TwoOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class TwoMeta
	{
		public static readonly TwoMeta Instance = new TwoMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("9ec7e136-815c-4726-9991-e95a3ec9e092"));

		public global::Allors.Meta.RoleType Shared  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("39eda296-4e8d-492b-b0c1-756ffcf9a493"));

		public global::Allors.Meta.AssociationType OnesWhereTwo  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("2c9236ed-892e-4005-9730-5a14f03f71e1"));
		public global::Allors.Meta.AssociationType TwosWhereShared  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fd97db6d-d946-47ba-a2a0-88b732457b96"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class TwoBuilder : Allors.ObjectBuilder<Two> , ObjectBuilder, SharedBuilder, global::System.IDisposable
	{		
		public TwoBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Two instance)
		{

			instance.Shared = this.Shared;

		
		}


				public Shared Shared {get; set;}

				/// <exclude/>
				public TwoBuilder WithShared(Shared value)
		        {
		            if(this.Shared!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Shared = value;
		            return this;
		        }		

				

	}

	public partial class Twos : global::Allors.ObjectsBase<Two>
	{
		public static readonly TwoMeta Meta = TwoMeta.Instance;

		public Twos(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class BadUI : Allors.IObject , Object
	{
		public static readonly BadUIMeta Meta = BadUIMeta.Instance;

		private readonly IStrategy strategy;

		public BadUI(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static BadUI Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (BadUI) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Person> PersonsMany
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PersonsMany);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PersonsMany, value);
			}
		}

		virtual public void AddPersonMany (Person value)
		{
			Strategy.AddCompositeRole(Meta.PersonsMany, value);
		}

		virtual public void RemovePersonMany (Person value)
		{
			Strategy.RemoveCompositeRole(Meta.PersonsMany,value);
		}

		virtual public bool ExistPersonsMany
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PersonsMany);
			}
		}

		virtual public void RemovePersonsMany()
		{
			Strategy.RemoveCompositeRoles(Meta.PersonsMany);
		}


		virtual public Organisation CompanyOne
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.CompanyOne);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CompanyOne ,value);
			}
		}

		virtual public bool ExistCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CompanyOne);
			}
		}

		virtual public void RemoveCompanyOne()
		{
			Strategy.RemoveCompositeRole(Meta.CompanyOne);
		}


		virtual public Person PersonOne
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.PersonOne);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PersonOne ,value);
			}
		}

		virtual public bool ExistPersonOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PersonOne);
			}
		}

		virtual public void RemovePersonOne()
		{
			Strategy.RemoveCompositeRole(Meta.PersonOne);
		}


		virtual public Organisation CompanyMany
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.CompanyMany);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CompanyMany ,value);
			}
		}

		virtual public bool ExistCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CompanyMany);
			}
		}

		virtual public void RemoveCompanyMany()
		{
			Strategy.RemoveCompositeRole(Meta.CompanyMany);
		}


		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new BadUIOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new BadUIOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new BadUIOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new BadUIOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new BadUIOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new BadUIOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new BadUIOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new BadUIOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new BadUIOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new BadUIOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class BadUIMeta
	{
		public static readonly BadUIMeta Instance = new BadUIMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bb1b0a2e-66d1-4e09-860f-52dc7145029e"));

		public global::Allors.Meta.RoleType PersonsMany  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4ab20876-f8fc-4d39-87d7-8758f044587b"));
		public global::Allors.Meta.RoleType CompanyOne  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("4d2c7c20-b9c7-451b-b6b1-8552322ceddd"));
		public global::Allors.Meta.RoleType PersonOne  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c1b45f09-59fe-4484-8999-e2a3d9147919"));
		public global::Allors.Meta.RoleType CompanyMany  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("1663525b-5add-4a96-a596-5d736d466985"));
		public global::Allors.Meta.RoleType AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("7f2dc0db-4628-45a8-8cc5-2cc1b87e0eb3"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class BadUIBuilder : Allors.ObjectBuilder<BadUI> , ObjectBuilder, global::System.IDisposable
	{		
		public BadUIBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(BadUI instance)
		{

			instance.AllorsString = this.AllorsString;
		
		
			if(this.PersonsMany!=null)
			{
				instance.PersonsMany = this.PersonsMany.ToArray();
			}
		

			instance.CompanyOne = this.CompanyOne;

		

			instance.PersonOne = this.PersonOne;

		

			instance.CompanyMany = this.CompanyMany;

		
		}


				public global::System.Collections.Generic.List<Person> PersonsMany {get; set;}	

				/// <exclude/>
				public BadUIBuilder WithPersonMany(Person value)
		        {
					if(this.PersonsMany == null)
					{
						this.PersonsMany = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.PersonsMany.Add(value);
		            return this;
		        }		

				
				public Organisation CompanyOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyOne(Organisation value)
		        {
		            if(this.CompanyOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyOne = value;
		            return this;
		        }		

				
				public Person PersonOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithPersonOne(Person value)
		        {
		            if(this.PersonOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonOne = value;
		            return this;
		        }		

				
				public Organisation CompanyMany {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyMany(Organisation value)
		        {
		            if(this.CompanyMany!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyMany = value;
		            return this;
		        }		

				
				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public BadUIBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	


	}

	public partial class BadUIs : global::Allors.ObjectsBase<BadUI>
	{
		public static readonly BadUIMeta Meta = BadUIMeta.Instance;

		public BadUIs(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Three : Allors.IObject , Object, Shared
	{
		public static readonly ThreeMeta Meta = ThreeMeta.Instance;

		private readonly IStrategy strategy;

		public Three(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Three Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Three) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Four Four
		{ 
			get
			{
				return (Four) Strategy.GetCompositeRole(Meta.Four);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Four ,value);
			}
		}

		virtual public bool ExistFour
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Four);
			}
		}

		virtual public void RemoveFour()
		{
			Strategy.RemoveCompositeRole(Meta.Four);
		}


		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString);
		}



		virtual public global::Allors.Extent<Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TwosWhereShared);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ThreeOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ThreeOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ThreeOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ThreeOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ThreeOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ThreeOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ThreeOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ThreeOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ThreeOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ThreeOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ThreeMeta
	{
		public static readonly ThreeMeta Instance = new ThreeMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("bdaed62e-6369-46c0-a379-a1eef81b1c3d"));

		public global::Allors.Meta.RoleType Four  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("25737278-d039-47c5-8749-19f22ad7a4c3"));
		public global::Allors.Meta.RoleType AllorsString  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("f8f85b3d-371c-42df-8414-cf034c339917"));

		public global::Allors.Meta.AssociationType TwosWhereShared  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("fd97db6d-d946-47ba-a2a0-88b732457b96"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class ThreeBuilder : Allors.ObjectBuilder<Three> , ObjectBuilder, SharedBuilder, global::System.IDisposable
	{		
		public ThreeBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Three instance)
		{

			instance.AllorsString = this.AllorsString;
		
		

			instance.Four = this.Four;

		
		}


				public Four Four {get; set;}

				/// <exclude/>
				public ThreeBuilder WithFour(Four value)
		        {
		            if(this.Four!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Four = value;
		            return this;
		        }		

				
				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public ThreeBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	


	}

	public partial class Threes : global::Allors.ObjectsBase<Three>
	{
		public static readonly ThreeMeta Meta = ThreeMeta.Instance;

		public Threes(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Second : Allors.IObject , Object
	{
		public static readonly SecondMeta Meta = SecondMeta.Instance;

		private readonly IStrategy strategy;

		public Second(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Second Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Second) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Third Third
		{ 
			get
			{
				return (Third) Strategy.GetCompositeRole(Meta.Third);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Third ,value);
			}
		}

		virtual public bool ExistThird
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Third);
			}
		}

		virtual public void RemoveThird()
		{
			Strategy.RemoveCompositeRole(Meta.Third);
		}


		virtual public global::System.Boolean? IsDerived 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsDerived);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsDerived, value);
			}
		}

		virtual public bool ExistIsDerived{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsDerived);
			}
		}

		virtual public void RemoveIsDerived()
		{
			Strategy.RemoveUnitRole(Meta.IsDerived);
		}



		virtual public First FirstWhereSecond
		{ 
			get
			{
				return (First) Strategy.GetCompositeAssociation(Meta.FirstWhereSecond);
			}
		} 

		virtual public bool ExistFirstWhereSecond
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.FirstWhereSecond);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new SecondOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new SecondOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new SecondOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new SecondOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new SecondOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new SecondOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new SecondOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new SecondOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new SecondOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new SecondOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class SecondMeta
	{
		public static readonly SecondMeta Instance = new SecondMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c1f169a1-553b-4a24-aba7-01e0b7102fe5"));

		public global::Allors.Meta.RoleType Third  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("ec263924-1234-4b53-9d33-91e167d6862f"));
		public global::Allors.Meta.RoleType IsDerived  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("3f37f82c-3f7a-4d4c-b775-4ff09c105f92"));

		public global::Allors.Meta.AssociationType FirstWhereSecond  =  (global::Allors.Meta.AssociationType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e48ab2ee-c7a5-4d9a-b3ab-263f6aa4cdd1"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class SecondBuilder : Allors.ObjectBuilder<Second> , ObjectBuilder, global::System.IDisposable
	{		
		public SecondBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Second instance)
		{
			

			if(this.IsDerived.HasValue)
			{
				instance.IsDerived = this.IsDerived.Value;
			}			
		
		

			instance.Third = this.Third;

		
		}


				public Third Third {get; set;}

				/// <exclude/>
				public SecondBuilder WithThird(Third value)
		        {
		            if(this.Third!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Third = value;
		            return this;
		        }		

				
				public global::System.Boolean? IsDerived {get; set;}

				/// <exclude/>
				public SecondBuilder WithIsDerived(global::System.Boolean? value)
		        {
				    if(this.IsDerived!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsDerived = value;
		            return this;
		        }	


	}

	public partial class Seconds : global::Allors.ObjectsBase<Second>
	{
		public static readonly SecondMeta Meta = SecondMeta.Instance;

		public Seconds(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class DerivationLogC2 : Allors.IObject , Object, DerivationLogI12
	{
		public static readonly DerivationLogC2Meta Meta = DerivationLogC2Meta.Instance;

		private readonly IStrategy strategy;

		public DerivationLogC2(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static DerivationLogC2 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (DerivationLogC2) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new DerivationLogC2OnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new DerivationLogC2OnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new DerivationLogC2OnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new DerivationLogC2OnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new DerivationLogC2OnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new DerivationLogC2OnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new DerivationLogC2OnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new DerivationLogC2OnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new DerivationLogC2OnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new DerivationLogC2OnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class DerivationLogC2Meta
	{
		public static readonly DerivationLogC2Meta Instance = new DerivationLogC2Meta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("c7563dd3-77b2-43ff-92f9-a4f98db36acf"));

		public global::Allors.Meta.RoleType UniqueId  =  (global::Allors.Meta.RoleType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("007a6d25-8506-483d-9140-414c0056d812"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class DerivationLogC2Builder : Allors.ObjectBuilder<DerivationLogC2> , ObjectBuilder, DerivationLogI12Builder, global::System.IDisposable
	{		
		public DerivationLogC2Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(DerivationLogC2 instance)
		{
			

			if(this.UniqueId.HasValue)
			{
				instance.UniqueId = this.UniqueId.Value;
			}			
		
		
		}


				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public DerivationLogC2Builder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class DerivationLogC2s : global::Allors.ObjectsBase<DerivationLogC2>
	{
		public static readonly DerivationLogC2Meta Meta = DerivationLogC2Meta.Instance;

		public DerivationLogC2s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class ClassWithoutRoles : Allors.IObject , Object
	{
		public static readonly ClassWithoutRolesMeta Meta = ClassWithoutRolesMeta.Instance;

		private readonly IStrategy strategy;

		public ClassWithoutRoles(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public ObjectId Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static ClassWithoutRoles Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ClassWithoutRoles) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Population.Id.Equals(this.Strategy.Session.Population.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		public ObjectOnBuild OnBuild()
		{ 
			var method = new ClassWithoutRolesOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new ClassWithoutRolesOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new ClassWithoutRolesOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new ClassWithoutRolesOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new ClassWithoutRolesOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new ClassWithoutRolesOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new ClassWithoutRolesOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new ClassWithoutRolesOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new ClassWithoutRolesOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new ClassWithoutRolesOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public class ClassWithoutRolesMeta
	{
		public static readonly ClassWithoutRolesMeta Instance = new ClassWithoutRolesMeta();

		public global::Allors.Meta.Class ObjectType = (global::Allors.Meta.Class)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("e1008840-6d7c-4d44-b2ad-1545d23f90d8"));

		public global::Allors.Meta.MethodType OnBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("62d48a76-a500-4d16-9d20-6fef43ac6dcb"));
		public global::Allors.Meta.MethodType OnPostBuild  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("042375d8-bbdd-46e8-80b6-cc89d8782f1c"));
		public global::Allors.Meta.MethodType OnPreDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("122d3d78-ab97-4a69-a725-f465c71757da"));
		public global::Allors.Meta.MethodType OnDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("527da7f8-68b4-46ab-b0d8-6b9e82d2a5ac"));
		public global::Allors.Meta.MethodType OnPostDerive  =  (global::Allors.Meta.MethodType)global::Allors.Meta.MetaPopulation.Instance.Find(new System.Guid("349cbcde-b4e9-4965-b3ff-7c41b021825d"));

	}

	public partial class ClassWithoutRolesBuilder : Allors.ObjectBuilder<ClassWithoutRoles> , ObjectBuilder, global::System.IDisposable
	{		
		public ClassWithoutRolesBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(ClassWithoutRoles instance)
		{
		}


	}

	public partial class ClassesWithoutRoles : global::Allors.ObjectsBase<ClassWithoutRoles>
	{
		public static readonly ClassWithoutRolesMeta Meta = ClassWithoutRolesMeta.Instance;

		public ClassesWithoutRoles(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}