delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors TypeScript Domain>>
TemplateVersion() ::= <<1.0.2>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, grp) ::= <<
$!
Copyright 2002-2015 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.Interfaces:{objectType|
		$if(objectType.roleTypesByGroup.(grp) || objectType.associationTypesByGroup.(grp))$
			<generation template="interface" input="$objectType.Id $" output="$objectType.SingularName$.g.ts"/>
		$endif$
	}$

	$meta.Classes:{objectType|
		$if(objectType.roleTypesByGroup.(grp) || objectType.associationTypesByGroup.(grp))$
			<generation template="class" input="$objectType.Id $" output="$objectType.SingularName$.g.ts"/>
		$endif$
	}$
</generations>
>>

interface(meta, grp, objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	export interface $objectType.name$ $if(objectType.DirectSupertypesByGroup.(grp))$extends $objectType.directSupertypesByGroup.(grp):{directSupertype|$directSupertype.SingularName$}; separator=", "$ $endif$
	{
$objectType.exclusiveRoleTypesByGroup.(grp):{roleType|$interfaceRoleType()$}; separator="\n"$
	}
}

>>

interfaceRoleType() ::= <<
$if(roleType.ObjectType.IsUnit)$
		 $roleType.PropertyName$ : $objectType_Name(roleType.ObjectType)$;
$else$
$if(roleType.IsOne)$
		 $roleType.PropertyName$ : $objectType_Name(roleType.ObjectType)$;
$else$
		 $roleType.PropertyName$ : $objectType_Name(roleType.ObjectType)$[];
$endif$
$endif$
>>

class(meta, grp, objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	export class $objectType.name$ extends WorkspaceObject $if(objectType.directSupertypesByGroup.(grp))$implements $objectType.directSupertypesByGroup.(grp):{directSupertype|$directSupertype.SingularName$}; separator=", "$ $endif$
	{
$objectType.roleTypesByGroup.(grp):{roleType|$classRoleType()$}; separator="\n"$

$objectType.methodTypesByGroup.(grp):{methodType|$classMethodType()$}; separator="\n"$
	}
}

>>

classRoleType() ::= <<
			get CanRead$roleType.PropertyName$(): boolean {
				return this.databaseObject.roles.CanRead$roleType.PropertyName$;
			}

$if(!roleType.RelationType.IsDerived)$
			get CanWrite$roleType.PropertyName$(): boolean {
				return this.databaseObject.roles.CanWrite$roleType.PropertyName$;
			}
$endif$

$if(roleType.ObjectType.IsUnit)$
			get $roleType.PropertyName$(): $objectType_Name(roleType.ObjectType)$ {
				return this.get("$roleType.PropertyName$");
			}

$if(!roleType.RelationType.IsDerived)$
			set $roleType.PropertyName$(value: $objectType_Name(roleType.ObjectType)$) {
				this.set("$roleType.PropertyName$", value);
			}
$endif$
$else$
$if(roleType.IsOne)$
			get $roleType.PropertyName$(): $objectType_Name(roleType.ObjectType)$ {
				return this.get("$roleType.PropertyName$");
			}

$if(!roleType.RelationType.IsDerived)$
			set $roleType.PropertyName$(value: $objectType_Name(roleType.ObjectType)$) {
				this.set("$roleType.PropertyName$", value);
			}
$endif$
$else$
			get $roleType.PluralPropertyName$(): $objectType_Name(roleType.ObjectType)$[] {
				return this.get("$roleType.PluralPropertyName$");
			}

$if(!roleType.RelationType.IsDerived)$
			Add$roleType.SingularPropertyName$(value: $objectType_Name(roleType.ObjectType)$) {
				return this.add("$roleType.PluralPropertyName$", value);
			}

			Remove$roleType.SingularPropertyName$(value: $objectType_Name(roleType.ObjectType)$) {
				return this.remove("$roleType.PluralPropertyName$", value);
			}

			set $roleType.PluralPropertyName$(value: $objectType_Name(roleType.ObjectType)$[]) {
				this.set("$roleType.PluralPropertyName$", value);
			}
$endif$
$endif$
$endif$
>>

classMethodType() ::= <<
			get CanExecute$methodType.Name$(): boolean {
				return this.databaseObject.methods.CanExecute$methodType.Name$;
			}

			get $methodType.Name$(): Allors.Method {
				return new Method(this, "$methodType.Name$");
			}
>>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	any
$elseif(objectType.IsBoolean)$
	boolean
$elseif(objectType.IsDecimal)$
	number
$elseif(objectType.IsDateTime)$
	Date
$elseif(objectType.IsFloat)$
	number
$elseif(objectType.IsInteger)$
	number
$elseif(objectType.IsString)$
	string
$elseif(objectType.IsUnique)$
	string
$else$
	throw "Unknown unit type";
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
