group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<1.0.2>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(repository) ::= <<
$! 
Copyright 2002-2015 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="builder" output="builder.g.cs"/> 
	<generation template="domains" output="domains.g.cs"/> 
	<generation template="interfaces" output="interfaces.g.cs"/> 
	<generation template="classes" output="classes.g.cs"/> 
</generations>
>>

builder(repository) ::= <<
namespace Allors.Meta
{
	internal class MetaBuilder
	{
	    private readonly MetaPopulation metaPopulation;

        internal MetaBuilder(MetaPopulation metaPopulation)
		{
			this.metaPopulation = metaPopulation;
		}

		internal void Build()
		{
			// Domains
$repository.Assemblies:{assembly|             Meta$assembly.Name$.Instance = new Meta$assembly.Name$(this.metaPopulation);}; separator="\n"$

			// Domain Inheritance
$repository.Assemblies:{assembly|$domain_inheritance(assembly)$}; separator="\n"$

			// Interfaces
$repository.Interfaces:{interface|             Meta$interface.Name$.Instance = new Meta$interface.Name$(this.metaPopulation);}; separator="\n"$

			// Classes
$repository.Classes:{class|             Meta$class.Name$.Instance = new Meta$class.Name$(this.metaPopulation);}; separator="\n"$

			// Inheritance
$repository.Types:{type|$inheritance(type)$}; separator="\n"$

			// Relations
$repository.Types:{type|$relations(type)$}; separator="\n"$

		}
	}
}
>>

domain_inheritance(assembly) ::= <<$assembly.Bases:{base|             Meta$assembly.Name$.Instance.Domain.AddDirectSuperdomain(Meta$base.Name$.Instance.Domain);}; separator="\n"$>>
inheritance(type) ::= <<$type.ImplementedInterfaces:{implementedInterface|$inheritance_implentedInterface(type, implementedInterface)$}; separator="\n"$>>
inheritance_implentedInterface(type, implementedInterface) ::= <<            new Inheritance(this.metaPopulation){ Subtype = (Composite)Meta$type.Name$.Instance.ObjectType, Supertype = Meta$implementedInterface.Name$.Instance.Interface};>>

relations(type) ::= <<$type.Properties:{property|$relation(property)$}; separator="\n"$>>
relation(property) ::= <<            Meta$type.Name$.$property.Name$ = new RelationType(this.metaPopulation){ Id = new System.Guid("$property.AttributeByName.Id$"), Meta$type.name$.Instance.ObjectType.Id, XXX } >>

domains(repository) ::= <<
namespace Allors.Meta
{
$repository.Assemblies:{assembly|$domain(assembly)$}; separator="\n\n"$
}
>>

domain(assembly) ::= <<
    public partial class Meta$assembly.Name$
    {
        public static Meta$assembly.Name$ Instance { get; internal set;}

		public readonly Domain Domain;

        internal Meta$assembly.Name$(MetaPopulation metaPopulation)
        {
			this.Domain = new Domain(metaPopulation)
			{
				Id = new System.Guid("$assembly.Id$"),
				Name = "$assembly.Name$"
			};
        }
    }
>>

interfaces(repository) ::= <<
namespace Allors.Meta
{
$repository.Interfaces:{interface|$interface(interface)$}; separator="\n\n"$
}
>>

interface(interface) ::= <<
    public partial class Meta$interface.Name$
	{
	    public static Meta$interface.Name$ Instance { get; internal set;}

		public readonly Interface Interface;

		public ObjectType ObjectType => this.Interface;

		internal Meta$interface.Name$(MetaPopulation metaPopulation)
        {
			this.Interface = new Interface(metaPopulation)
			{
				Id = new System.Guid("$interface.AttributeByName.Id.Value$"),
				SingularName = "$interface.Name$",
				$if(interface.AttributeByName.Plural)$    PluralName = "$interface.AttributeByName.Plural$"$endif$
			};
        }
	}
>>

classes(repository) ::= <<
namespace Allors.Meta
{
$repository.Classes:{class|$class(class)$}; separator="\n\n"$
}
>>

class(class) ::= <<
    public partial class Meta$class.Name$
	{
	    public static Meta$class.Name$ Instance { get; internal set;}

		public readonly Class Class;

		public ObjectType ObjectType => this.Class;

		internal Meta$class.Name$(MetaPopulation metaPopulation)
        {
			this.Class = new Class(metaPopulation)
			{
				Id = new System.Guid("$class.AttributeByName.Id.Value$"),
				SingularName = "$class.Name$",
				$if(class.AttributeByName.Plural)$    PluralName = "$class.AttributeByName.Plural$"$endif$
			};
        }
	}
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"
