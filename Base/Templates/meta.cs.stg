group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<1.0.11>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(domain, settings) ::= <<
$! 
Copyright 2002-2015 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="ids" output="Ids.g.cs"/> 
	<generation template="meta" output="Meta.g.cs"/> 
$domain.compositeObjectTypes:{objectType|
	<generation template="objectType" input="$objectType.Id$" output="$objectType.SingularName$.g.cs"/>
}$
</generations>
>>

ids(domain, settings) ::= <<
namespace Allors.Meta
{
	public static class ObjectTypeIds
	{
$domain.ObjectTypes:{objectType|
		public const string $objectType.SingularName$ = "$objectType.IdAsString$";
}$
	}

	public static class InheritanceIds
	{
$domain.Inheritances:{inheritance|
		public const string $inheritance.Subtype.Name$$inheritance.Supertype.Name$ = "$inheritance.IdAsString$";
}$
	}

	public static class RelationTypeIds
	{
$domain.RelationTypes:{relationType|
		public const string $relationType.RoleType.FullSingularName$ = "$relationType.IdAsString$";
}$
	}

	public static class AssociationTypeIds
	{
$domain.RelationTypes:{relationType|
		public const string $relationType.AssociationType.FullSingularName$ = "$relationType.AssociationType.IdAsString$";
}$
	}

	public static class RoleTypeIds
	{
$domain.RelationTypes:{relationType|
		public const string $relationType.RoleType.FullSingularName$ = "$relationType.RoleType.IdAsString$";
}$
	}
}

namespace Allors.Meta.Ids
{
$domain.ObjectTypes:{objectType|$idsObjectType()$}$
}
>>

idsObjectType() ::= <<
	public static class $objectType.Name$Ids
	{
$objectType.RoleTypes:{roleType|				public const string $roleType.Name$ = RoleTypeIds.$roleType.FullSingularName$;
}$

$objectType.AssociationTypes:{associationType|				public const string $associationType.Name$ = AssociationTypeIds.$associationType.FullSingularName$;
}$
	}

>>


meta(domain, settings) ::= <<
namespace Allors.Meta
{
	using System;
$domain.SuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$$superDomain(domain=superDomain)$$endif$}$

	[Id("$domain.IdAsString$")]
	public partial class $domain.Name$Domain : Domain
	{
		public static $domain.Name$Domain Instance { get; internal set; }

		private $domain.Name$Domain(MetaPopulation metaPopulation) : base(metaPopulation)
        {
			this.Name = "$domain.Name$";
        }

		internal override void Build()
		{
			this.AddDirectSuperdomain(CoreDomain.Instance);
			$domain.DirectSuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$	this.AddDirectSuperdomain($superDomain.Name$Domain.Instance);$endif$
}$
		}

	}
}
>>

superDomain(domain) ::= <<
	[Id("$domain.IdAsString$")]
	public partial class $domain.Name$Domain : Domain
	{
		public static $domain.Name$Domain Instance { get; internal set; }

		private $domain.Name$Domain(MetaPopulation metaPopulation) : base(metaPopulation)
        {
			this.Name = "$domain.Name$";
        }

		internal override void Build()
		{
			this.AddDirectSuperdomain(CoreDomain.Instance);
			$domain.DirectSuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$		this.AddDirectSuperdomain($superDomain.Name$Domain.Instance);$endif$
}$
		}
	}
>>

objectType(domain, objectType, settings) ::= <<$if(objectType.IsInterface)$$interface()$$else$$class()$$endif$
>>

interface() ::= <<
namespace Allors.Meta
{
	using System;

	#region Allors
$objectType.InheritancesWhereSubtype:{inheritance|$inheritanceInit(inheritance)$
}$
	[Id("$objectType.IdAsString$")]
	#endregion
  	public partial class $objectType.SingularName$Interface: Interface
	{
$objectType.AssociationTypesWhereObjectType:{associationType|$relationType(relationType=associationType.RelationType)$

}$

		public static $objectType.SingularName$Interface Instance {get; internal set;}

		internal $objectType.SingularName$Interface() : base($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance)
        {
			this.SingularName = "$objectType.SingularName$";
			this.PluralName = "$objectType.PluralName$";
        }
	}
}
>>

class() ::= <<
namespace Allors.Meta
{
	using System;

	#region Allors
$objectType.InheritancesWhereSubtype:{inheritance|$inheritanceInit(inheritance)$
}$
	[Id("$objectType.IdAsString$")]
	#endregion
	public partial class $objectType.SingularName$Class : Class
	{
		$objectType.AssociationTypesWhereObjectType:{associationType|$relationType(relationType=associationType.RelationType)$

		}$

		public static $objectType.SingularName$Class Instance {get; internal set;}

		internal $objectType.SingularName$Class() : base($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance)
        {
			this.SingularName = "$objectType.SingularName$";
			this.PluralName = "$objectType.PluralName$";
        }
	}
}
>>

relationType(relationType) ::= <<
			#region Allors
			[Multiplicity($multiplicity()$)]
$if(relationType.IsDerived)$
			[Derived($boolean(relationType.IsDerived)$)]
$endif$
$if(relationType.IsIndexed)$
			[Indexed($boolean(relationType.IsIndexed)$)]
$endif$
			[Type(typeof($newObjectType(relationType.RoleType.ObjectType)$))]
$if(!relationType.RoleType.IsScaleDefault)$
			[Scale($relationType.RoleType.Scale$)]
$endif$
$if(!relationType.RoleType.IsPrecisionDefault)$
			[Precision($relationType.RoleType.Precision$)]
$endif$
$if(!relationType.RoleType.IsSizeDefault)$
			[Size($relationType.RoleType.Size$)]
$endif$
$if(relationType.RoleType.ExistAssignedPluralName)$
			[Plural("$relationType.RoleType.AssignedPluralName$")]
$endif$
			[Id("$relationType.IdAsString$")]
			[AssociationId("$relationType.AssociationType.IdAsString$")]
			[RoleId("$relationType.RoleType.IdAsString$")]
			#endregion
			public RelationType $relationType.RoleType.SingularName$;
>>



inheritanceInit(inheritance) ::= <<
	[Inherit(typeof($inheritance.Supertype.Name$Interface))]
>>

newObjectType(objectType) ::= <%
$if(objectType.IsDouble)$
AllorsFloatUnit
$else$
$objectType.Name$$if(objectType.IsUnit)$Unit$else$$if(objectType.IsInterface)$Interface$else$Class$endif$$endif$
$endif$
%>

multiplicity() ::= <%
$if(relationType.AssociationType.IsMany)$
$if(relationType.RoleType.IsMany)$
Multiplicity.ManyToMany
$else$
Multiplicity.ManyToOne
$endif$
$else$
$if(relationType.RoleType.IsMany)$
Multiplicity.OneToMany
$else$
Multiplicity.OneToOne
$endif$
$endif$
%>

boolean(value) ::= "$if(value)$true$else$false$endif$"
