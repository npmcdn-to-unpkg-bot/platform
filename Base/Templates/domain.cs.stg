group BaseDomainCSharp;

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<C# Domain Core>>
TemplateVersion() ::= <<1.0.71>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2014 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="meta" output="Meta.g.cs"/> 
	$meta.Interfaces:{interface|<generation template="interface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.Classes:{class|<generation template="class" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

meta(meta) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Meta
{
}
>>


interface(meta,objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface $objectType.name$Builder : $objectType.DirectSupertypes:{directSupertype|$nullableName(directSupertype)$Builder ,}$ global::System.IDisposable
	{	
$objectType.roleTypesWhereObjectType:{roleType|$withRoleType(relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$}$
	}

$objectTypePlural()$

}
>>

class(meta,objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class $objectType.name$
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = ($objectType.name$Builder)objectBuilder;
$objectType.UnitRoleTypes:{roleType|$initUnitRoleType(objectType=objectType,relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$}$
$objectType.CompositeRoleTypes:{roleType|$initCompositeRoleType(objectType=objectType,relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$}$
		}
	}

	public partial class $objectType.name$Builder : Allors.ObjectBuilder<$objectType.name$> $objectType.DirectSupertypes:{directSupertype|, $nullableName(directSupertype)$Builder}$, global::System.IDisposable
	{		
		public $objectType.name$Builder(Allors.ISession session) : base(session)
	    {
	    }

$objectType.RoleTypes:{roleType|
	$if(roleType.ObjectType.IsUnit)$
		$withUnitRoleType(objectType=objectType,relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$
	$else$
		$withCompositeRoleType(objectType=objectType,relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$
	$endif$
}$
	}

$objectTypePlural()$

}
>>

interfaceAssociationType(relationType,associationType,roleType) ::= <<
$\n$
$if(associationType.IsMany)$
		global::Allors.Extent<$nullableName(associationType.ObjectType)$> $associationType.PluralPropertyName$
		{ 
			get;
		}

		bool Exist$associationType.PluralPropertyName$
		{
			get;
		}
$else$
		$nullableName(associationType.ObjectType)$ $associationType.SingularPropertyName$
		{
			get;
		}

		bool Exist$associationType.SingularPropertyName$
		{
			get;
		}
$endif$
>>

interfaceRoleType(relationType,associationType,roleType) ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		$nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName${get;}

		void Remove$roleType.SingularPropertyName$();
$else$
$if(roleType.IsMany)$
		global::Allors.Extent<$nullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get;
			set;
		}

		void Add$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value);

		void Remove$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value);

		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		void Remove$roleType.PluralPropertyName$();
$else$
		$nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
>>

classAssociationType(relationType,associationType,roleType) ::= <<
$\n$
$if(associationType.IsMany)$
		virtual public global::Allors.Extent<$nullableName(associationType.ObjectType)$> $associationType.PluralName$Where$roleType.SingularName$
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.$associationType.PropertyName$);
			}
		}

		virtual public bool Exist$associationType.PluralName$Where$roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.$associationType.PropertyName$);
			}
		}
$else$
		virtual public $nullableName(associationType.ObjectType)$ $associationType.SingularName$Where$roleType.SingularName$
		{ 
			get
			{
				return ($nullableName(associationType.ObjectType)$) Strategy.GetCompositeAssociation(Meta.$associationType.PropertyName$);
			}
		} 

		virtual public bool Exist$associationType.SingularName$Where$roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.$associationType.PropertyName$);
			}
		}
$endif$
>>

classRoleType(relationType,associationType,roleType) ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		
		virtual public $nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get
			{
				return ($nullableName(roleType.ObjectType)$) Strategy.GetUnitRole(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName${
			get
			{
				return Strategy.ExistUnitRole(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveUnitRole(Meta.$roleType.SingularPropertyName$);
		}
$else$
$if(roleType.IsMany)$
		virtual public global::Allors.Extent<$nullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public void Add$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value)
		{
			Strategy.AddCompositeRole(Meta.$roleType.SingularPropertyName$, value);
		}

		virtual public void Remove$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value)
		{
			Strategy.RemoveCompositeRole(Meta.$roleType.SingularPropertyName$,value);
		}

		virtual public bool Exist$roleType.PluralPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.PluralPropertyName$()
		{
			Strategy.RemoveCompositeRoles(Meta.$roleType.SingularPropertyName$);
		}
$else$
		virtual public $nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get
			{
				return ($nullableName(roleType.ObjectType)$) Strategy.GetCompositeRole(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.$roleType.SingularPropertyName$ ,value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveCompositeRole(Meta.$roleType.SingularPropertyName$);
		}
$endif$
$endif$
>>

metaRoleType(relationType,associationType,roleType) ::= <<
		public global::Allors.Meta.RoleType $roleType.SingularPropertyName$ 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.$roleType.RelationType.Name$;
			}
		} 
>>

metaAssociationType(relationType,associationType,roleType) ::= <<
		public global::Allors.Meta.AssociationType $associationType.PropertyName$ 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.$associationType.RelationType.Name$;
			}
		} 
>>

initUnitRoleType(objectType,relationType,associationType,roleType) ::= <<
$if((roleType.ObjectType.IsString || roleType.ObjectType.IsBinary))$
			
			this.$roleType.PropertyName$ = builder.$roleType.PropertyName$;
$else$			
			
			if(builder.$roleType.PropertyName$.HasValue)
			{
				this.$roleType.PropertyName$ = builder.$roleType.PropertyName$.Value;
			}			
$endif$		
>>

initCompositeRoleType(objectType,relationType,associationType,roleType) ::= <<
$if(roleType.IsOne)$

			this.$roleType.PropertyName$ = builder.$roleType.PropertyName$;
		
$else$
			if(builder.$roleType.PropertyName$!=null)
			{
				this.$roleType.PropertyName$ = builder.$roleType.PropertyName$.ToArray();
			}
$endif$
>>

withUnitRoleType(objectType,relationType,associationType,roleType) ::= <<
$if(roleType.ObjectType.IsString)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
$if(roleType.ObjectType.IsBinary)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$endif$
$endif$
		/// <exclude/>
		public $objectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
		    if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
            this.$roleType.PropertyName$ = value;
            return this;
        }	

>>

withCompositeRoleType(objectType,relationType,associationType,roleType) ::= <<
$if(roleType.IsOne)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

		/// <exclude/>
		public $objectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
            if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
			this.$roleType.PropertyName$ = value;
            return this;
        }		

$else$
		public global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$> $roleType.PropertyName$ {get; set;}	

		/// <exclude/>
		public $objectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
			if(this.$roleType.PropertyName$ == null)
			{
				this.$roleType.PropertyName$ = new global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$>(); 
			}
            this.$roleType.PropertyName$.Add(value);
            return this;
        }		

$endif$		
>>

withRoleType(relationType,associationType,roleType) ::= <<
$if(roleType.ObjectType.IsUnit)$
$if(roleType.ObjectType.IsString)$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
$if(roleType.ObjectType.IsBinary)$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$endif$
$endif$
$else$
$if(roleType.IsOne)$
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
		
		global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$> $roleType.PropertyName$ {get;}		

$endif$
$endif$		
>>

objectTypePlural() ::= <<
	public partial class $objectType.pluralName$ : global::Allors.ObjectsBase<$objectType.singularName$>
	{
		public static readonly $objectType.name$Meta Meta = $objectType.name$Meta.Instance;

		public $objectType.pluralName$(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

nullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$endif$
$else$
	$objectType.SingularName$
$endif$
%>