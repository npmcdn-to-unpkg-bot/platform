delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<C# Base>>
TemplateVersion() ::= <<1.0.73>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2014 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="meta" output="Meta.g.cs"/> 
	$meta.Interfaces:{interface|<generation template="castInterface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.Classes:{class|<generation template="castClass" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

meta(meta) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Meta
{
	public partial class Units
	{
		$meta.Units:{unit|public static readonly Unit $unit.Name$ = ((Unit)Repository.MetaPopulation.Find( new System.Guid("$unit.IdAsString$")));
}$
	}

	public partial class Interfaces
	{
		$meta.Interfaces:{interface|public static readonly Interface $interface.Name$ = ((Interface)Repository.MetaPopulation.Find( new System.Guid("$interface.IdAsString$")));
}$
	}

	public partial class Classes
	{
		$meta.Classes:{class|public static readonly Class $class.Name$ = ((Class)Repository.MetaPopulation.Find( new System.Guid("$class.IdAsString$")));
}$
	}

	public partial class AssociationTypes
	{
		$meta.RelationTypes:{relationType|public static readonly AssociationType $relationType.Name$ = ((RelationType)Repository.MetaPopulation.Find( new System.Guid("$relationType.IdAsString$"))).AssociationType;
}$
	}

	public partial class RoleTypes
	{
		$meta.RelationTypes:{relationType|public static readonly RoleType $relationType.Name$ = ((RelationType)Repository.MetaPopulation.Find( new System.Guid("$relationType.IdAsString$"))).RoleType;
}$
	}

	public partial class MethodTypes
	{
		$meta.MethodTypes:{methodType|public static readonly MethodType $methodType.FullName$ = ((MethodType)Repository.MetaPopulation.Find( new System.Guid("$methodType.IdAsString$")));
}$
	}
}
>>


castInterface(meta,objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta,interface) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface $interface.name$ : $if(interface.existDirectSupertypes)$ $interface.directSupertypes:{directSupertype|$directSupertype.SingularName$,}$ $endif$Allors.IObjectBase
	{
$interface.exclusiveRoleTypes:{roleType|$interfaceExclusiveRoleType_Interface()$}$
$interface.exclusiveAssociationTypes:{associationType|$interfaceExclusiveAssociationType_Interface()$}$
	}
	
	public class $interface.name$Meta
	{
		public static readonly $interface.name$Meta Instance = new $interface.name$Meta();

		public global::Allors.Meta.Interface interface = global::Allors.Meta.Interfaces.$interface.Name$;

$interface.RoleTypes:{roleType|$objectTypeRoleType_Meta()$
}$
$interface.AssociationTypes:{associationType|$objectTypeAssociationType_Meta()$
}$
$interface.MethodTypes:{methodType|$objectTypeMethodType_Meta()$
}$
	}

	public partial interface $interface.name$Builder : $interface.DirectSupertypes:{directSupertype|$nullableName(directSupertype)$Builder ,}$ global::System.IDisposable
	{	
$interface.exclusiveRoleTypes:{roleType|$interfaceExclusiveRoleTypes_Builder()$}$
	}

$objectTypePlural()$

}
>>

interfaceExclusiveAssociationType_Interface() ::= <<
$\n$
$if(associationType.IsMany)$
		global::Allors.Extent<$nullableName(associationType.ObjectType)$> $associationType.PluralPropertyName$
		{ 
			get;
		}

		bool Exist$associationType.PluralPropertyName$
		{
			get;
		}
$else$
		$nullableName(associationType.ObjectType)$ $associationType.SingularPropertyName$
		{
			get;
		}

		bool Exist$associationType.SingularPropertyName$
		{
			get;
		}
$endif$
>>

interfaceExclusiveRoleType_Interface() ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		$nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName${get;}

		void Remove$roleType.SingularPropertyName$();
$else$
$if(roleType.IsMany)$
		global::Allors.Extent<$nullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get;
			set;
		}

		void Add$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value);

		void Remove$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value);

		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		void Remove$roleType.PluralPropertyName$();
$else$
		$nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
>>

interfaceExclusiveRoleTypes_Builder() ::= <<
$if(roleType.ObjectType.IsUnit)$
$if(roleType.ObjectType.IsString)$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
$if(roleType.ObjectType.IsBinary)$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
		
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$endif$
$endif$
$else$
$if(roleType.IsOne)$
		$nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
		
		global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$> $roleType.PropertyName$ {get;}		

$endif$
$endif$		
>>



castClass(meta,objectType) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class $class.name$ : Allors.ObjectBase $class.directSupertypes:{directSupertype|, $directSupertype.SingularName$}$
	{
		public static readonly $class.name$Meta Meta = $class.name$Meta.Instance;

		public $class.name$(Allors.IStrategy allors) : base(allors) {}

		public static $class.name$ Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return ($class.name$) allorsSession.Instantiate(allorsObjectId);		
		}

		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = ($class.name$Builder)objectBuilder;
$class.UnitRoleTypes:{roleType|$classUnitRoleTypes_Class_OnBuild()$}$
$class.CompositeRoleTypes:{roleType|$classCompsiteRoleTypes_Class_OnBuild()$}$
		}

$class.RoleTypes:{roleType|$classRoleType_Class()$}$
$class.AssociationTypes:{associationType|$classAssociationType_Class()$}$
	}

	public class $class.name$Meta
	{
		public static readonly $class.name$Meta Instance = new $class.name$Meta();

		public global::Allors.Meta.Class class = global::Allors.Meta.Classes.$class.Name$;

$class.RoleTypes:{roleType|$objectTypeRoleType_Meta()$
}$
$class.AssociationTypes:{associationType|$objectTypeAssociationType_Meta()$
}$
$class.MethodTypes:{methodType|$objectTypeMethodType_Meta()$
}$
	}

	public partial class $class.name$Builder : Allors.ObjectBuilder<$class.name$> $class.DirectSupertypes:{directSupertype|, $nullableName(directSupertype)$Builder}$, global::System.IDisposable
	{		
		public $class.name$Builder(Allors.ISession session) : base(session)
	    {
	    }

$class.RoleTypes:{roleType|
	$if(roleType.objectType.IsUnit)$
		$classUnitRoleType_Builder()$
	$else$
		$classCompositeRoleType_Builder()$
	$endif$
}$
	}

$objectTypePlural()$

}
>>

classUnitRoleTypes_Class_OnBuild() ::= <<
$if((roleType.ObjectType.IsString || roleType.ObjectType.IsBinary))$
			
			this.$roleType.PropertyName$ = builder.$roleType.PropertyName$;
$else$			
			
			if(builder.$roleType.PropertyName$.HasValue)
			{
				this.$roleType.PropertyName$ = builder.$roleType.PropertyName$.Value;
			}			
$endif$		
>>

classCompsiteRoleTypes_Class_OnBuild() ::= <<
$if(roleType.IsOne)$

			this.$roleType.PropertyName$ = builder.$roleType.PropertyName$;
		
$else$
			if(builder.$roleType.PropertyName$!=null)
			{
				this.$roleType.PropertyName$ = builder.$roleType.PropertyName$.ToArray();
			}
$endif$
>>

classAssociationType_Class() ::= <<
$\n$
$if(associationType.IsMany)$
		virtual public global::Allors.Extent<$nullableName(associationType.ObjectType)$> $associationType.PluralName$Where$associationType.roleType.SingularName$
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.$associationType.PropertyName$);
			}
		}

		virtual public bool Exist$associationType.PluralName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.$associationType.PropertyName$);
			}
		}
$else$
		virtual public $nullableName(associationType.ObjectType)$ $associationType.SingularName$Where$associationType.roleType.SingularName$
		{ 
			get
			{
				return ($nullableName(associationType.ObjectType)$) Strategy.GetCompositeAssociation(Meta.$associationType.PropertyName$);
			}
		} 

		virtual public bool Exist$associationType.SingularName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.$associationType.PropertyName$);
			}
		}
$endif$
>>

classRoleType_Class() ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		
		virtual public $nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get
			{
				return ($nullableName(roleType.ObjectType)$) Strategy.GetUnitRole(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName${
			get
			{
				return Strategy.ExistUnitRole(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveUnitRole(Meta.$roleType.SingularPropertyName$);
		}
$else$
$if(roleType.IsMany)$
		virtual public global::Allors.Extent<$nullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public void Add$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value)
		{
			Strategy.AddCompositeRole(Meta.$roleType.SingularPropertyName$, value);
		}

		virtual public void Remove$roleType.SingularPropertyName$ ($nullableName(roleType.ObjectType)$ value)
		{
			Strategy.RemoveCompositeRole(Meta.$roleType.SingularPropertyName$,value);
		}

		virtual public bool Exist$roleType.PluralPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.PluralPropertyName$()
		{
			Strategy.RemoveCompositeRoles(Meta.$roleType.SingularPropertyName$);
		}
$else$
		virtual public $nullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get
			{
				return ($nullableName(roleType.ObjectType)$) Strategy.GetCompositeRole(Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.$roleType.SingularPropertyName$ ,value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveCompositeRole(Meta.$roleType.SingularPropertyName$);
		}
$endif$
$endif$
>>

classUnitRoleType_Builder() ::= <<
$if(roleType.ObjectType.IsString)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
$if(roleType.ObjectType.IsBinary)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$endif$
$endif$
		/// <exclude/>
		public $roleType.ObjectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
		    if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
            this.$roleType.PropertyName$ = value;
            return this;
        }	

>>

classCompositeRoleType_Builder() ::= <<
$if(roleType.IsOne)$
		public $nullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

		/// <exclude/>
		public $roleType.ObjectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
            if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
			this.$roleType.PropertyName$ = value;
            return this;
        }		

$else$
		public global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$> $roleType.PropertyName$ {get; set;}	

		/// <exclude/>
		public $roleType.ObjectType.name$Builder With$roleType.SingularPropertyName$($nullableName(roleType.ObjectType)$ value)
        {
			if(this.$roleType.PropertyName$ == null)
			{
				this.$roleType.PropertyName$ = new global::System.Collections.Generic.List<$nullableName(roleType.ObjectType)$>(); 
			}
            this.$roleType.PropertyName$.Add(value);
            return this;
        }		

$endif$		
>>


objectTypeRoleType_Meta() ::= <<
		public global::Allors.Meta.RoleType $roleType.SingularPropertyName$ 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.$roleType.RelationType.Name$;
			}
		} 
>>

objectTypeAssociationType_Meta() ::= <<
		public global::Allors.Meta.AssociationType $associationType.PropertyName$ 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.$associationType.RelationType.Name$;
			}
		} 
>>

objectTypeMethodType_Meta() ::= <<
		public global::Allors.Meta.MethodType $methodType.Name$ 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.$methodType.FullName$;
			}
		} 
>>

objectTypePlural() ::= <<
	public partial class $objectType.pluralName$ : global::Allors.ObjectsBase<$objectType.singularName$>
	{
		public static readonly $objectType.name$Meta Meta = $objectType.name$Meta.Instance;

		public $objectType.pluralName$(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}
>>


boolean(value) ::= "$if(value)$true$else$false$endif$"

nullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>