group AllorsCSharpMeta;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Repository>>
TemplateVersion() ::= <<1.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(domain, settings) ::= <<
$! 
Copyright 2002-2014 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="domain" output="Repository.g.cs"/> 
</generations>
>>

domain(domain, settings) ::= <<
namespace Allors.Meta
{
	using System;
	using Allors.Meta;

	public partial static class Repository
	{
		static void $domain.Name$(Environment env)
		{
            	var domain = Domain.Create(env, new Guid("26B81EE6-08B6-48E8-931C-B8D944ED1C42"));
				domain.Name = "$domain.Name$";

				// ObjectTypes
$domain.declaredObjectTypes:{objectType|$objectTypeInit(objectType)$}$
				
				// Inheritances
$domain.compositeObjectTypes:{objectType|$objectTypeInheritance(objectType)$}$


				// RelationTypes
$domain.compositeObjectTypes:{objectType|$objectTypeRelationType(objectType)$}$

		}
	}
}
>>

objectTypeInit(objectType) ::= <<
$if(!objectType.IsInterface)$
				var $objectType.Name$ = new ClassBuilder(domain, new Guid("$objectType.IdAsString$")).WithSingularName("$objectType.SingularName$").WithPluralName("$objectType.PluralName$").Build();
$else$  
				var $objectType.Name$ = new InterfaceBuilder(domain, new Guid("$objectType.IdAsString$")).WithSingularName("$objectType.SingularName$").WithPluralName("$objectType.PluralName$").Build();
$endif$  

>>

objectTypeInheritance(objectType) ::= <<
				// $objectType.Name$
$objectType.InheritancesWhereSubtype:{inheritance|$inheritanceInit(inheritance)$}$

>>

objectTypeRelationType(objectType) ::= <<
				// $objectType.Name$
$objectType.AssociationTypesWhereObjectType:{associationType|$relationTypeInit(associationType.RelationType)$}$

>>

inheritanceInit(inheritance) ::= <<
$if(!inheritance.DomainWhereDeclaredInheritance.IsSuperDomain)$
				new InheritanceBuilder(domain, new Guid("$inheritance.IdAsString$")).WithSubtype($inheritance.Subtype.Name$).WithSupertype($inheritance.Supertype.Name$).Build();
$endif$
>>

relationTypeInit(relationType) ::= <<
$if(!relationType.DomainWhereDeclaredRelationType.IsSuperDomain)$
				new RelationTypeBuilder(domain, new Guid("$relationType.IdAsString$"), new Guid("$relationType.AssociationType.IdAsString$"), new Guid("$relationType.RoleType.IdAsString$"))$objectTypes()$$singularName()$$pluralName()$$cardinality()$$isDerived()$$isIndexed()$$precision()$$scale()$$size()$.Build();
$endif$
>>

objectTypes() ::= <%
.WithObjectTypes($relationType.AssociationType.ObjectType.Name$, $relationType.RoleType.ObjectType.Name$)
%>

singularName() ::= <%
$if(!relationType.RoleType.IsAssignedSingularNameDefault)$
.WithSingularName("$relationType.RoleType.AssignedSingularName$")
$endif$  
%>

pluralName() ::= <%
$if(!relationType.RoleType.IsAssignedPluralNameDefault)$
.WithPluralName("$relationType.RoleType.AssignedPluralName$")
$endif$  
%>

cardinality() ::= <%
$if(relationType.AssociationType.IsMany)$
	$if(relationType.RoleType.IsMany)$
.WithCardinality(Cardinalities.ManyToMany)
	$else$
.WithCardinality(Cardinalities.ManyToOne)
	$endif$
$else$
	$if(relationType.RoleType.IsMany)$
.WithCardinality(Cardinalities.OneToMany)
	$endif$
$endif$
%>

isDerived() ::= <%
$if(relationType.IsDerived)$
.WithIsDerived($boolean(relationType.IsDerived)$)
$endif$  
%>

isIndexed() ::= <%
$if(relationType.IsIndexed)$
.WithIsIndexed($boolean(relationType.IsIndexed)$)
$endif$  
%>

scale() ::= <%
$if(!relationType.RoleType.IsScaleDefault)$
.WithScale($relationType.RoleType.Scale$)
$endif$
%>

precision() ::= <%
$if(!relationType.RoleType.IsPrecisionDefault)$
.WithPrecision($relationType.RoleType.Precision$)
$endif$
%>

size() ::= <%
$if(!relationType.RoleType.IsSizeDefault)$
.WithSize($relationType.RoleType.Size$)
$endif$
%>

boolean(value) ::= "$if(value)$true$else$false$endif$"
