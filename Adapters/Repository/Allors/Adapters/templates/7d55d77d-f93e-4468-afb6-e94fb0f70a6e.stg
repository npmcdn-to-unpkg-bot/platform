group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Repository>>
TemplateVersion() ::= <<1.0.9>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(domain, settings) ::= <<
$! 
Copyright 2002-2014 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="meta" output="Meta.g.cs"/> 
$domain.compositeObjectTypes:{objectType|
	<generation template="objectType" input="$objectType.Id $" output="$objectType.SingularName$.g.cs"/>
}$
</generations>
>>

meta(domain, settings) ::= <<
namespace Allors.Meta
{
	using System;

$domain.SuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$$superDomain(domain=superDomain)$$endif$}$

	public partial class $domain.Name$Domain : Domain
	{
		public static $domain.Name$Domain Instance { get; internal set; }

		private $domain.Name$Domain(MetaPopulation metaPopulation) : base(metaPopulation, new Guid("$domain.IdAsString$"))
        {
			this.Name = "$domain.Name$";
        }

		internal override void Build()
		{
			this.AddDirectSuperdomain(CoreDomain.Instance);
			$domain.DirectSuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$	this.AddDirectSuperdomain($superDomain.Name$Domain.Instance);$endif$
}$
		}

	}
}
>>

superDomain(domain) ::= <<
	public partial class $domain.Name$Domain : Domain
	{
		public static $domain.Name$Domain Instance { get; internal set; }

		private $domain.Name$Domain(MetaPopulation metaPopulation) : base(metaPopulation, new Guid("$domain.IdAsString$"))
        {
			this.Name = "$domain.Name$";
        }

		internal override void Build()
		{
			this.AddDirectSuperdomain(CoreDomain.Instance);
			$domain.DirectSuperDomains:{superDomain|$if(!superDomain.IsAllorsUnitDomain)$		this.AddDirectSuperdomain($superDomain.Name$Domain.Instance);$endif$
}$
		}
	}
>>

objectType(domain, objectType, settings) ::= <<$if(objectType.IsInterface)$$interface()$$else$$class()$$endif$
>>

interface() ::= <<
namespace Allors.Meta
{
	using System;

	public partial class $objectType.SingularName$Interface: Interface
	{
		public static $objectType.SingularName$Interface Instance {get; internal set;}

		internal readonly RolesType Roles = new RolesType();

		internal $objectType.SingularName$Interface() : base($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance, new Guid("$objectType.IdAsString$"))
        {
			this.SingularName = "$objectType.SingularName$";
			this.PluralName = "$objectType.PluralName$";
        }

		internal override void BuildInheritances()
		{
			new Inheritance($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance, Guid.NewGuid())
			{
				Subtype = Instance,
				Supertype = ObjectInterface.Instance
			};
			
$objectType.InheritancesWhereSubtype:{inheritance|$inheritanceInit(inheritance)$}$

		}

		internal override void BuildRelationTypes()
		{
$objectType.AssociationTypesWhereObjectType:{associationType|$relationType(relationType=associationType.RelationType)$}$
		}

		internal override void SetRelationTypes()
		{
$objectType.AssociationTypesWhereObjectType:{associationType|$setRelationType(relationType=associationType.RelationType)$}$
		}

		internal class RolesType
		{
$objectType.AssociationTypesWhereObjectType:{associationType|				internal RoleType $associationType.RelationType.RoleType.HierarchySingularName$;
}$
		}
	}
}
>>

class() ::= <<
namespace Allors.Meta
{
	using System;

	public partial class $objectType.SingularName$Class : Class
	{
		public static $objectType.SingularName$Class Instance {get; internal set;}

		internal readonly RolesType Roles = new RolesType();
		internal readonly ConcreteRolesType ConcreteRoles = new ConcreteRolesType();

		internal $objectType.SingularName$Class() : base($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance, new Guid("$objectType.IdAsString$"))
        {
			this.SingularName = "$objectType.SingularName$";
			this.PluralName = "$objectType.PluralName$";
        }

		internal override void BuildInheritances()
		{
			new Inheritance($objectType.DomainWhereDeclaredObjectType.Name$Domain.Instance, Guid.NewGuid())
			{
				Subtype = Instance,
				Supertype = ObjectInterface.Instance
			};

$objectType.InheritancesWhereSubtype:{inheritance|$inheritanceInit(inheritance)$}$
		}

		internal override void BuildRelationTypes()
		{
$objectType.AssociationTypesWhereObjectType:{associationType|$relationType(relationType=associationType.RelationType)$}$
		}

		internal override void SetRelationTypes()
		{
$objectType.AssociationTypesWhereObjectType:{associationType|$setRelationType(relationType=associationType.RelationType)$}$
		}

		internal class RolesType
		{
$objectType.AssociationTypesWhereObjectType:{associationType|				internal RoleType $associationType.RelationType.RoleType.HierarchySingularName$;
}$
		}

		internal class ConcreteRolesType
		{
$objectType.RoleTypes:{roleType|				internal ConcreteRoleType $roleType.HierarchySingularName$;
}$
		}
	}
}
>>

relationType(relationType) ::= <<
			var $relationType.Name$ = new RelationType($relationType.DomainWhereDeclaredRelationType.Name$Domain.Instance, new Guid("$relationType.IdAsString$"), new Guid("$relationType.AssociationType.IdAsString$"), new Guid("$relationType.RoleType.IdAsString$"));
			$relationType.Name$.AssignedMultiplicity = $multiplicity()$;
$if(relationType.IsDerived)$
			$relationType.Name$.IsDerived = $boolean(relationType.IsDerived)$;
$endif$
$if(relationType.IsIndexed)$
			$relationType.Name$.IsIndexed = $boolean(relationType.IsIndexed)$;
$endif$

			$relationType.Name$.AssociationType.ObjectType = this;

			$relationType.Name$.RoleType.ObjectType = $newObjectType(relationType.RoleType.ObjectType)$;
$if(relationType.RoleType.ExistAssignedSingularName)$
			$relationType.Name$.RoleType.AssignedSingularName = "$relationType.RoleType.AssignedSingularName$";
$endif$
$if(relationType.RoleType.ExistAssignedPluralName)$
			$relationType.Name$.RoleType.AssignedPluralName = "$relationType.RoleType.AssignedPluralName$";
$endif$
$if(!relationType.RoleType.IsScaleDefault)$
			$relationType.Name$.RoleType.Scale = $relationType.RoleType.Scale$;
$endif$
$if(!relationType.RoleType.IsPrecisionDefault)$
			$relationType.Name$.RoleType.Precision = $relationType.RoleType.Precision$;
$endif$
$if(!relationType.RoleType.IsSizeDefault)$
			$relationType.Name$.RoleType.Size = $relationType.RoleType.Size$;
$endif$
			this.Roles.$relationType.RoleType.HierarchySingularName$ = $relationType.Name$.RoleType;


>>

setRelationType(relationType) ::= <<
			$relationType.AssociationType.ObjectType.ConcreteClasses:{class|$class.Name$Class.Instance.ConcreteRoles.$relationType.RoleType.HierarchySingularName$ = $class.Name$Class.Instance.ConcreteRoleTypeByRoleType[this.Roles.$relationType.RoleType.HierarchySingularName$]; 
}$

>>


inheritanceInit(inheritance) ::= <<
			new Inheritance($inheritance.DomainWhereDeclaredInheritance.Name$Domain.Instance, new Guid("$inheritance.IdAsString$"))
			{
				Subtype = Instance,
				Supertype = $inheritance.Supertype.Name$Interface.Instance
			};

>>

newObjectType(objectType) ::= <%
$if(objectType.IsDouble)$
AllorsFloatUnit.Instance
$else$
$objectType.Name$$if(objectType.IsUnit)$Unit$else$$if(objectType.IsInterface)$Interface$else$Class$endif$$endif$.Instance;
$endif$
%>

multiplicity() ::= <%
$if(relationType.AssociationType.IsMany)$
$if(relationType.RoleType.IsMany)$
Multiplicity.ManyToMany
$else$
Multiplicity.ManyToOne
$endif$
$else$
$if(relationType.RoleType.IsMany)$
Multiplicity.OneToMany
$else$
Multiplicity.OneToOne
$endif$
$endif$
%>

boolean(value) ::= "$if(value)$true$else$false$endif$"
